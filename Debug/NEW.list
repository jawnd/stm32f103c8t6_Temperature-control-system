
NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  08009a9c  08009a9c  0000aa9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e6c  08009e6c  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009e6c  08009e6c  0000ae6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e74  08009e74  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009e78  08009e78  0000ae78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009e7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002234  2000006c  08009ee8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022a0  08009ee8  0000b2a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d4d8  00000000  00000000  0000b095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047eb  00000000  00000000  0002856d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  0002cd58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000139b  00000000  00000000  0002e688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c40a  00000000  00000000  0002fa23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f85c  00000000  00000000  0004be2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098a62  00000000  00000000  0006b689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001040eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f58  00000000  00000000  00104130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0010b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a84 	.word	0x08009a84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08009a84 	.word	0x08009a84

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_frsub>:
 8000160:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__addsf3>
 8000166:	bf00      	nop

08000168 <__aeabi_fsub>:
 8000168:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800016c <__addsf3>:
 800016c:	0042      	lsls	r2, r0, #1
 800016e:	bf1f      	itttt	ne
 8000170:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000174:	ea92 0f03 	teqne	r2, r3
 8000178:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800017c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000180:	d06a      	beq.n	8000258 <__addsf3+0xec>
 8000182:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000186:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800018a:	bfc1      	itttt	gt
 800018c:	18d2      	addgt	r2, r2, r3
 800018e:	4041      	eorgt	r1, r0
 8000190:	4048      	eorgt	r0, r1
 8000192:	4041      	eorgt	r1, r0
 8000194:	bfb8      	it	lt
 8000196:	425b      	neglt	r3, r3
 8000198:	2b19      	cmp	r3, #25
 800019a:	bf88      	it	hi
 800019c:	4770      	bxhi	lr
 800019e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80001a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4240      	negne	r0, r0
 80001ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4249      	negne	r1, r1
 80001be:	ea92 0f03 	teq	r2, r3
 80001c2:	d03f      	beq.n	8000244 <__addsf3+0xd8>
 80001c4:	f1a2 0201 	sub.w	r2, r2, #1
 80001c8:	fa41 fc03 	asr.w	ip, r1, r3
 80001cc:	eb10 000c 	adds.w	r0, r0, ip
 80001d0:	f1c3 0320 	rsb	r3, r3, #32
 80001d4:	fa01 f103 	lsl.w	r1, r1, r3
 80001d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001dc:	d502      	bpl.n	80001e4 <__addsf3+0x78>
 80001de:	4249      	negs	r1, r1
 80001e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001e8:	d313      	bcc.n	8000212 <__addsf3+0xa6>
 80001ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001ee:	d306      	bcc.n	80001fe <__addsf3+0x92>
 80001f0:	0840      	lsrs	r0, r0, #1
 80001f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f6:	f102 0201 	add.w	r2, r2, #1
 80001fa:	2afe      	cmp	r2, #254	@ 0xfe
 80001fc:	d251      	bcs.n	80002a2 <__addsf3+0x136>
 80001fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000202:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000206:	bf08      	it	eq
 8000208:	f020 0001 	biceq.w	r0, r0, #1
 800020c:	ea40 0003 	orr.w	r0, r0, r3
 8000210:	4770      	bx	lr
 8000212:	0049      	lsls	r1, r1, #1
 8000214:	eb40 0000 	adc.w	r0, r0, r0
 8000218:	3a01      	subs	r2, #1
 800021a:	bf28      	it	cs
 800021c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000220:	d2ed      	bcs.n	80001fe <__addsf3+0x92>
 8000222:	fab0 fc80 	clz	ip, r0
 8000226:	f1ac 0c08 	sub.w	ip, ip, #8
 800022a:	ebb2 020c 	subs.w	r2, r2, ip
 800022e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000232:	bfaa      	itet	ge
 8000234:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000238:	4252      	neglt	r2, r2
 800023a:	4318      	orrge	r0, r3
 800023c:	bfbc      	itt	lt
 800023e:	40d0      	lsrlt	r0, r2
 8000240:	4318      	orrlt	r0, r3
 8000242:	4770      	bx	lr
 8000244:	f092 0f00 	teq	r2, #0
 8000248:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800024c:	bf06      	itte	eq
 800024e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000252:	3201      	addeq	r2, #1
 8000254:	3b01      	subne	r3, #1
 8000256:	e7b5      	b.n	80001c4 <__addsf3+0x58>
 8000258:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800025c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000260:	bf18      	it	ne
 8000262:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000266:	d021      	beq.n	80002ac <__addsf3+0x140>
 8000268:	ea92 0f03 	teq	r2, r3
 800026c:	d004      	beq.n	8000278 <__addsf3+0x10c>
 800026e:	f092 0f00 	teq	r2, #0
 8000272:	bf08      	it	eq
 8000274:	4608      	moveq	r0, r1
 8000276:	4770      	bx	lr
 8000278:	ea90 0f01 	teq	r0, r1
 800027c:	bf1c      	itt	ne
 800027e:	2000      	movne	r0, #0
 8000280:	4770      	bxne	lr
 8000282:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000286:	d104      	bne.n	8000292 <__addsf3+0x126>
 8000288:	0040      	lsls	r0, r0, #1
 800028a:	bf28      	it	cs
 800028c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000290:	4770      	bx	lr
 8000292:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000296:	bf3c      	itt	cc
 8000298:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800029c:	4770      	bxcc	lr
 800029e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80002a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80002a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002aa:	4770      	bx	lr
 80002ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002b0:	bf16      	itet	ne
 80002b2:	4608      	movne	r0, r1
 80002b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b8:	4601      	movne	r1, r0
 80002ba:	0242      	lsls	r2, r0, #9
 80002bc:	bf06      	itte	eq
 80002be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002c2:	ea90 0f01 	teqeq	r0, r1
 80002c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ca:	4770      	bx	lr

080002cc <__aeabi_ui2f>:
 80002cc:	f04f 0300 	mov.w	r3, #0
 80002d0:	e004      	b.n	80002dc <__aeabi_i2f+0x8>
 80002d2:	bf00      	nop

080002d4 <__aeabi_i2f>:
 80002d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002d8:	bf48      	it	mi
 80002da:	4240      	negmi	r0, r0
 80002dc:	ea5f 0c00 	movs.w	ip, r0
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002e8:	4601      	mov	r1, r0
 80002ea:	f04f 0000 	mov.w	r0, #0
 80002ee:	e01c      	b.n	800032a <__aeabi_l2f+0x2a>

080002f0 <__aeabi_ul2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f04f 0300 	mov.w	r3, #0
 80002fc:	e00a      	b.n	8000314 <__aeabi_l2f+0x14>
 80002fe:	bf00      	nop

08000300 <__aeabi_l2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800030c:	d502      	bpl.n	8000314 <__aeabi_l2f+0x14>
 800030e:	4240      	negs	r0, r0
 8000310:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000314:	ea5f 0c01 	movs.w	ip, r1
 8000318:	bf02      	ittt	eq
 800031a:	4684      	moveq	ip, r0
 800031c:	4601      	moveq	r1, r0
 800031e:	2000      	moveq	r0, #0
 8000320:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000324:	bf08      	it	eq
 8000326:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800032a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800032e:	fabc f28c 	clz	r2, ip
 8000332:	3a08      	subs	r2, #8
 8000334:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000338:	db10      	blt.n	800035c <__aeabi_l2f+0x5c>
 800033a:	fa01 fc02 	lsl.w	ip, r1, r2
 800033e:	4463      	add	r3, ip
 8000340:	fa00 fc02 	lsl.w	ip, r0, r2
 8000344:	f1c2 0220 	rsb	r2, r2, #32
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	fa20 f202 	lsr.w	r2, r0, r2
 8000350:	eb43 0002 	adc.w	r0, r3, r2
 8000354:	bf08      	it	eq
 8000356:	f020 0001 	biceq.w	r0, r0, #1
 800035a:	4770      	bx	lr
 800035c:	f102 0220 	add.w	r2, r2, #32
 8000360:	fa01 fc02 	lsl.w	ip, r1, r2
 8000364:	f1c2 0220 	rsb	r2, r2, #32
 8000368:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800036c:	fa21 f202 	lsr.w	r2, r1, r2
 8000370:	eb43 0002 	adc.w	r0, r3, r2
 8000374:	bf08      	it	eq
 8000376:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800037a:	4770      	bx	lr

0800037c <__aeabi_fmul>:
 800037c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000380:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000384:	bf1e      	ittt	ne
 8000386:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800038a:	ea92 0f0c 	teqne	r2, ip
 800038e:	ea93 0f0c 	teqne	r3, ip
 8000392:	d06f      	beq.n	8000474 <__aeabi_fmul+0xf8>
 8000394:	441a      	add	r2, r3
 8000396:	ea80 0c01 	eor.w	ip, r0, r1
 800039a:	0240      	lsls	r0, r0, #9
 800039c:	bf18      	it	ne
 800039e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003a2:	d01e      	beq.n	80003e2 <__aeabi_fmul+0x66>
 80003a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003b0:	fba0 3101 	umull	r3, r1, r0, r1
 80003b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003bc:	bf3e      	ittt	cc
 80003be:	0049      	lslcc	r1, r1, #1
 80003c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c4:	005b      	lslcc	r3, r3, #1
 80003c6:	ea40 0001 	orr.w	r0, r0, r1
 80003ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003ce:	2afd      	cmp	r2, #253	@ 0xfd
 80003d0:	d81d      	bhi.n	800040e <__aeabi_fmul+0x92>
 80003d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003da:	bf08      	it	eq
 80003dc:	f020 0001 	biceq.w	r0, r0, #1
 80003e0:	4770      	bx	lr
 80003e2:	f090 0f00 	teq	r0, #0
 80003e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003ea:	bf08      	it	eq
 80003ec:	0249      	lsleq	r1, r1, #9
 80003ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f6:	3a7f      	subs	r2, #127	@ 0x7f
 80003f8:	bfc2      	ittt	gt
 80003fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000402:	4770      	bxgt	lr
 8000404:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000408:	f04f 0300 	mov.w	r3, #0
 800040c:	3a01      	subs	r2, #1
 800040e:	dc5d      	bgt.n	80004cc <__aeabi_fmul+0x150>
 8000410:	f112 0f19 	cmn.w	r2, #25
 8000414:	bfdc      	itt	le
 8000416:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800041a:	4770      	bxle	lr
 800041c:	f1c2 0200 	rsb	r2, r2, #0
 8000420:	0041      	lsls	r1, r0, #1
 8000422:	fa21 f102 	lsr.w	r1, r1, r2
 8000426:	f1c2 0220 	rsb	r2, r2, #32
 800042a:	fa00 fc02 	lsl.w	ip, r0, r2
 800042e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000432:	f140 0000 	adc.w	r0, r0, #0
 8000436:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800043a:	bf08      	it	eq
 800043c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000440:	4770      	bx	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800044a:	bf02      	ittt	eq
 800044c:	0040      	lsleq	r0, r0, #1
 800044e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000452:	3a01      	subeq	r2, #1
 8000454:	d0f9      	beq.n	800044a <__aeabi_fmul+0xce>
 8000456:	ea40 000c 	orr.w	r0, r0, ip
 800045a:	f093 0f00 	teq	r3, #0
 800045e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000462:	bf02      	ittt	eq
 8000464:	0049      	lsleq	r1, r1, #1
 8000466:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800046a:	3b01      	subeq	r3, #1
 800046c:	d0f9      	beq.n	8000462 <__aeabi_fmul+0xe6>
 800046e:	ea41 010c 	orr.w	r1, r1, ip
 8000472:	e78f      	b.n	8000394 <__aeabi_fmul+0x18>
 8000474:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000478:	ea92 0f0c 	teq	r2, ip
 800047c:	bf18      	it	ne
 800047e:	ea93 0f0c 	teqne	r3, ip
 8000482:	d00a      	beq.n	800049a <__aeabi_fmul+0x11e>
 8000484:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000488:	bf18      	it	ne
 800048a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800048e:	d1d8      	bne.n	8000442 <__aeabi_fmul+0xc6>
 8000490:	ea80 0001 	eor.w	r0, r0, r1
 8000494:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000498:	4770      	bx	lr
 800049a:	f090 0f00 	teq	r0, #0
 800049e:	bf17      	itett	ne
 80004a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004a4:	4608      	moveq	r0, r1
 80004a6:	f091 0f00 	teqne	r1, #0
 80004aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004ae:	d014      	beq.n	80004da <__aeabi_fmul+0x15e>
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	d101      	bne.n	80004ba <__aeabi_fmul+0x13e>
 80004b6:	0242      	lsls	r2, r0, #9
 80004b8:	d10f      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004ba:	ea93 0f0c 	teq	r3, ip
 80004be:	d103      	bne.n	80004c8 <__aeabi_fmul+0x14c>
 80004c0:	024b      	lsls	r3, r1, #9
 80004c2:	bf18      	it	ne
 80004c4:	4608      	movne	r0, r1
 80004c6:	d108      	bne.n	80004da <__aeabi_fmul+0x15e>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004d8:	4770      	bx	lr
 80004da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_fdiv>:
 80004e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004ec:	bf1e      	ittt	ne
 80004ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004f2:	ea92 0f0c 	teqne	r2, ip
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d069      	beq.n	80005d0 <__aeabi_fdiv+0xec>
 80004fc:	eba2 0203 	sub.w	r2, r2, r3
 8000500:	ea80 0c01 	eor.w	ip, r0, r1
 8000504:	0249      	lsls	r1, r1, #9
 8000506:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800050a:	d037      	beq.n	800057c <__aeabi_fdiv+0x98>
 800050c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000510:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000514:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000518:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800051c:	428b      	cmp	r3, r1
 800051e:	bf38      	it	cc
 8000520:	005b      	lslcc	r3, r3, #1
 8000522:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000526:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800052a:	428b      	cmp	r3, r1
 800052c:	bf24      	itt	cs
 800052e:	1a5b      	subcs	r3, r3, r1
 8000530:	ea40 000c 	orrcs.w	r0, r0, ip
 8000534:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000538:	bf24      	itt	cs
 800053a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000542:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000546:	bf24      	itt	cs
 8000548:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800054c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000550:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000554:	bf24      	itt	cs
 8000556:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800055a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055e:	011b      	lsls	r3, r3, #4
 8000560:	bf18      	it	ne
 8000562:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000566:	d1e0      	bne.n	800052a <__aeabi_fdiv+0x46>
 8000568:	2afd      	cmp	r2, #253	@ 0xfd
 800056a:	f63f af50 	bhi.w	800040e <__aeabi_fmul+0x92>
 800056e:	428b      	cmp	r3, r1
 8000570:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000574:	bf08      	it	eq
 8000576:	f020 0001 	biceq.w	r0, r0, #1
 800057a:	4770      	bx	lr
 800057c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000580:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000584:	327f      	adds	r2, #127	@ 0x7f
 8000586:	bfc2      	ittt	gt
 8000588:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800058c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000590:	4770      	bxgt	lr
 8000592:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000596:	f04f 0300 	mov.w	r3, #0
 800059a:	3a01      	subs	r2, #1
 800059c:	e737      	b.n	800040e <__aeabi_fmul+0x92>
 800059e:	f092 0f00 	teq	r2, #0
 80005a2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80005a6:	bf02      	ittt	eq
 80005a8:	0040      	lsleq	r0, r0, #1
 80005aa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80005ae:	3a01      	subeq	r2, #1
 80005b0:	d0f9      	beq.n	80005a6 <__aeabi_fdiv+0xc2>
 80005b2:	ea40 000c 	orr.w	r0, r0, ip
 80005b6:	f093 0f00 	teq	r3, #0
 80005ba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005be:	bf02      	ittt	eq
 80005c0:	0049      	lsleq	r1, r1, #1
 80005c2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005c6:	3b01      	subeq	r3, #1
 80005c8:	d0f9      	beq.n	80005be <__aeabi_fdiv+0xda>
 80005ca:	ea41 010c 	orr.w	r1, r1, ip
 80005ce:	e795      	b.n	80004fc <__aeabi_fdiv+0x18>
 80005d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d4:	ea92 0f0c 	teq	r2, ip
 80005d8:	d108      	bne.n	80005ec <__aeabi_fdiv+0x108>
 80005da:	0242      	lsls	r2, r0, #9
 80005dc:	f47f af7d 	bne.w	80004da <__aeabi_fmul+0x15e>
 80005e0:	ea93 0f0c 	teq	r3, ip
 80005e4:	f47f af70 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e776      	b.n	80004da <__aeabi_fmul+0x15e>
 80005ec:	ea93 0f0c 	teq	r3, ip
 80005f0:	d104      	bne.n	80005fc <__aeabi_fdiv+0x118>
 80005f2:	024b      	lsls	r3, r1, #9
 80005f4:	f43f af4c 	beq.w	8000490 <__aeabi_fmul+0x114>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e76e      	b.n	80004da <__aeabi_fmul+0x15e>
 80005fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000600:	bf18      	it	ne
 8000602:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000606:	d1ca      	bne.n	800059e <__aeabi_fdiv+0xba>
 8000608:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800060c:	f47f af5c 	bne.w	80004c8 <__aeabi_fmul+0x14c>
 8000610:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000614:	f47f af3c 	bne.w	8000490 <__aeabi_fmul+0x114>
 8000618:	e75f      	b.n	80004da <__aeabi_fmul+0x15e>
 800061a:	bf00      	nop

0800061c <__gesf2>:
 800061c:	f04f 3cff 	mov.w	ip, #4294967295
 8000620:	e006      	b.n	8000630 <__cmpsf2+0x4>
 8000622:	bf00      	nop

08000624 <__lesf2>:
 8000624:	f04f 0c01 	mov.w	ip, #1
 8000628:	e002      	b.n	8000630 <__cmpsf2+0x4>
 800062a:	bf00      	nop

0800062c <__cmpsf2>:
 800062c:	f04f 0c01 	mov.w	ip, #1
 8000630:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000634:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000638:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800063c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000640:	bf18      	it	ne
 8000642:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000646:	d011      	beq.n	800066c <__cmpsf2+0x40>
 8000648:	b001      	add	sp, #4
 800064a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800064e:	bf18      	it	ne
 8000650:	ea90 0f01 	teqne	r0, r1
 8000654:	bf58      	it	pl
 8000656:	ebb2 0003 	subspl.w	r0, r2, r3
 800065a:	bf88      	it	hi
 800065c:	17c8      	asrhi	r0, r1, #31
 800065e:	bf38      	it	cc
 8000660:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000664:	bf18      	it	ne
 8000666:	f040 0001 	orrne.w	r0, r0, #1
 800066a:	4770      	bx	lr
 800066c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000670:	d102      	bne.n	8000678 <__cmpsf2+0x4c>
 8000672:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000676:	d105      	bne.n	8000684 <__cmpsf2+0x58>
 8000678:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800067c:	d1e4      	bne.n	8000648 <__cmpsf2+0x1c>
 800067e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000682:	d0e1      	beq.n	8000648 <__cmpsf2+0x1c>
 8000684:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <__aeabi_cfrcmple>:
 800068c:	4684      	mov	ip, r0
 800068e:	4608      	mov	r0, r1
 8000690:	4661      	mov	r1, ip
 8000692:	e7ff      	b.n	8000694 <__aeabi_cfcmpeq>

08000694 <__aeabi_cfcmpeq>:
 8000694:	b50f      	push	{r0, r1, r2, r3, lr}
 8000696:	f7ff ffc9 	bl	800062c <__cmpsf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006a4 <__aeabi_fcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cfcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cfcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cfcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffd2 	bl	800068c <__aeabi_cfrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_fcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc8 	bl	800068c <__aeabi_cfrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_fcmpun>:
 8000708:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800070c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000710:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000714:	d102      	bne.n	800071c <__aeabi_fcmpun+0x14>
 8000716:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800071a:	d108      	bne.n	800072e <__aeabi_fcmpun+0x26>
 800071c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000720:	d102      	bne.n	8000728 <__aeabi_fcmpun+0x20>
 8000722:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000726:	d102      	bne.n	800072e <__aeabi_fcmpun+0x26>
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	4770      	bx	lr
 800072e:	f04f 0001 	mov.w	r0, #1
 8000732:	4770      	bx	lr

08000734 <__aeabi_f2iz>:
 8000734:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000738:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800073c:	d30f      	bcc.n	800075e <__aeabi_f2iz+0x2a>
 800073e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000742:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000746:	d90d      	bls.n	8000764 <__aeabi_f2iz+0x30>
 8000748:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800074c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000750:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000754:	fa23 f002 	lsr.w	r0, r3, r2
 8000758:	bf18      	it	ne
 800075a:	4240      	negne	r0, r0
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr
 8000764:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000768:	d101      	bne.n	800076e <__aeabi_f2iz+0x3a>
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	d105      	bne.n	800077a <__aeabi_f2iz+0x46>
 800076e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000772:	bf08      	it	eq
 8000774:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000778:	4770      	bx	lr
 800077a:	f04f 0000 	mov.w	r0, #0
 800077e:	4770      	bx	lr

08000780 <__aeabi_f2uiz>:
 8000780:	0042      	lsls	r2, r0, #1
 8000782:	d20e      	bcs.n	80007a2 <__aeabi_f2uiz+0x22>
 8000784:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000788:	d30b      	bcc.n	80007a2 <__aeabi_f2uiz+0x22>
 800078a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800078e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000792:	d409      	bmi.n	80007a8 <__aeabi_f2uiz+0x28>
 8000794:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000798:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800079c:	fa23 f002 	lsr.w	r0, r3, r2
 80007a0:	4770      	bx	lr
 80007a2:	f04f 0000 	mov.w	r0, #0
 80007a6:	4770      	bx	lr
 80007a8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80007ac:	d101      	bne.n	80007b2 <__aeabi_f2uiz+0x32>
 80007ae:	0242      	lsls	r2, r0, #9
 80007b0:	d102      	bne.n	80007b8 <__aeabi_f2uiz+0x38>
 80007b2:	f04f 30ff 	mov.w	r0, #4294967295
 80007b6:	4770      	bx	lr
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop

080007c0 <DS18B20_SetOutput>:



// 设置为输出模式（推挽或开漏）
static void DS18B20_SetOutput(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	463b      	mov	r3, r7
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DS18B20_Pin; //指向结构 GPIO_InitTypeDef 的指针 DS18B20_Pin为cubemx中设置的自定义引脚名称
 80007d2:	2301      	movs	r3, #1
 80007d4:	603b      	str	r3, [r7, #0]
    // GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;  // 推挽输出
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;  // 开漏输出（推荐）
 80007d6:	2311      	movs	r3, #17
 80007d8:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 80007e2:	463b      	mov	r3, r7
 80007e4:	4619      	mov	r1, r3
 80007e6:	4803      	ldr	r0, [pc, #12]	@ (80007f4 <DS18B20_SetOutput+0x34>)
 80007e8:	f001 ffd6 	bl	8002798 <HAL_GPIO_Init>
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40010800 	.word	0x40010800

080007f8 <DS18B20_SetInput>:

// 设置为输入模式（高阻态，靠上拉电阻拉高）
static void DS18B20_SetInput(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = DS18B20_Pin;
 800080a:	2301      	movs	r3, #1
 800080c:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;  // 外部已有 4.7kΩ 上拉
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000816:	463b      	mov	r3, r7
 8000818:	4619      	mov	r1, r3
 800081a:	4803      	ldr	r0, [pc, #12]	@ (8000828 <DS18B20_SetInput+0x30>)
 800081c:	f001 ffbc 	bl	8002798 <HAL_GPIO_Init>
}
 8000820:	bf00      	nop
 8000822:	3710      	adds	r7, #16
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40010800 	.word	0x40010800

0800082c <DS18B20_Init>:

// 初始化（在 main 中调用一次）
void DS18B20_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    DS18B20_SetOutput();
 8000830:	f7ff ffc6 	bl	80007c0 <DS18B20_SetOutput>
    DS18B20_DQ_H();
 8000834:	2201      	movs	r2, #1
 8000836:	2101      	movs	r1, #1
 8000838:	4802      	ldr	r0, [pc, #8]	@ (8000844 <DS18B20_Init+0x18>)
 800083a:	f002 f948 	bl	8002ace <HAL_GPIO_WritePin>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40010800 	.word	0x40010800

08000848 <DS18B20_Reset>:

// 1-Wire 复位脉冲
uint8_t DS18B20_Reset(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
    uint8_t presence = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	71fb      	strb	r3, [r7, #7]

    DS18B20_SetOutput();
 8000852:	f7ff ffb5 	bl	80007c0 <DS18B20_SetOutput>
    DS18B20_DQ_L();              // 拉低总线
 8000856:	2200      	movs	r2, #0
 8000858:	2101      	movs	r1, #1
 800085a:	480f      	ldr	r0, [pc, #60]	@ (8000898 <DS18B20_Reset+0x50>)
 800085c:	f002 f937 	bl	8002ace <HAL_GPIO_WritePin>
    DS18B20_Delay_us(480);       // 保持 480us
 8000860:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000864:	f000 ff82 	bl	800176c <DS18B20_Delay_us>
    DS18B20_SetInput();          // 释放总线（转为输入）
 8000868:	f7ff ffc6 	bl	80007f8 <DS18B20_SetInput>
    DS18B20_Delay_us(70);        // 等待 60~70us
 800086c:	2046      	movs	r0, #70	@ 0x46
 800086e:	f000 ff7d 	bl	800176c <DS18B20_Delay_us>

    if (HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin) == GPIO_PIN_RESET)
 8000872:	2101      	movs	r1, #1
 8000874:	4808      	ldr	r0, [pc, #32]	@ (8000898 <DS18B20_Reset+0x50>)
 8000876:	f002 f913 	bl	8002aa0 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d101      	bne.n	8000884 <DS18B20_Reset+0x3c>
        presence = 1;            // 检测到应答脉冲（低电平）
 8000880:	2301      	movs	r3, #1
 8000882:	71fb      	strb	r3, [r7, #7]

    DS18B20_Delay_us(410);       // 等待复位时序结束（总 > 480us）
 8000884:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000888:	f000 ff70 	bl	800176c <DS18B20_Delay_us>
    return presence;
 800088c:	79fb      	ldrb	r3, [r7, #7]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40010800 	.word	0x40010800

0800089c <DS18B20_WriteBit>:

// 写一位
void DS18B20_WriteBit(uint8_t bit)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	71fb      	strb	r3, [r7, #7]
    DS18B20_SetOutput();
 80008a6:	f7ff ff8b 	bl	80007c0 <DS18B20_SetOutput>
    DS18B20_DQ_L();              // 拉低开始写时隙
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	480b      	ldr	r0, [pc, #44]	@ (80008dc <DS18B20_WriteBit+0x40>)
 80008b0:	f002 f90d 	bl	8002ace <HAL_GPIO_WritePin>
    DS18B20_Delay_us(1);         // >1us
 80008b4:	2001      	movs	r0, #1
 80008b6:	f000 ff59 	bl	800176c <DS18B20_Delay_us>

    if (bit)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d004      	beq.n	80008ca <DS18B20_WriteBit+0x2e>
        DS18B20_DQ_H();          // 写1：释放总线
 80008c0:	2201      	movs	r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	4805      	ldr	r0, [pc, #20]	@ (80008dc <DS18B20_WriteBit+0x40>)
 80008c6:	f002 f902 	bl	8002ace <HAL_GPIO_WritePin>
    // 如果写0，保持低电平

    DS18B20_Delay_us(60);        // 整个时隙 60~120us
 80008ca:	203c      	movs	r0, #60	@ 0x3c
 80008cc:	f000 ff4e 	bl	800176c <DS18B20_Delay_us>
    DS18B20_SetInput();          // 释放总线（即使写0，也应在时隙结束后释放）
 80008d0:	f7ff ff92 	bl	80007f8 <DS18B20_SetInput>
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40010800 	.word	0x40010800

080008e0 <DS18B20_ReadBit>:

// 读一位
uint8_t DS18B20_ReadBit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
    uint8_t bit = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]

    DS18B20_SetOutput();
 80008ea:	f7ff ff69 	bl	80007c0 <DS18B20_SetOutput>
    DS18B20_DQ_L();              // 拉低开始读时隙
 80008ee:	2200      	movs	r2, #0
 80008f0:	2101      	movs	r1, #1
 80008f2:	480e      	ldr	r0, [pc, #56]	@ (800092c <DS18B20_ReadBit+0x4c>)
 80008f4:	f002 f8eb 	bl	8002ace <HAL_GPIO_WritePin>
    DS18B20_Delay_us(1);         // >1us
 80008f8:	2001      	movs	r0, #1
 80008fa:	f000 ff37 	bl	800176c <DS18B20_Delay_us>
    DS18B20_SetInput();          // 释放总线，准备读取
 80008fe:	f7ff ff7b 	bl	80007f8 <DS18B20_SetInput>

    DS18B20_Delay_us(10);        // 等待 15us 内读取
 8000902:	200a      	movs	r0, #10
 8000904:	f000 ff32 	bl	800176c <DS18B20_Delay_us>
    if (HAL_GPIO_ReadPin(DS18B20_GPIO_Port, DS18B20_Pin) == GPIO_PIN_SET)
 8000908:	2101      	movs	r1, #1
 800090a:	4808      	ldr	r0, [pc, #32]	@ (800092c <DS18B20_ReadBit+0x4c>)
 800090c:	f002 f8c8 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8000910:	4603      	mov	r3, r0
 8000912:	2b01      	cmp	r3, #1
 8000914:	d101      	bne.n	800091a <DS18B20_ReadBit+0x3a>
        bit = 1;
 8000916:	2301      	movs	r3, #1
 8000918:	71fb      	strb	r3, [r7, #7]

    DS18B20_Delay_us(50);        // 完成整个读时隙（>60us）
 800091a:	2032      	movs	r0, #50	@ 0x32
 800091c:	f000 ff26 	bl	800176c <DS18B20_Delay_us>
    return bit;
 8000920:	79fb      	ldrb	r3, [r7, #7]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40010800 	.word	0x40010800

08000930 <DS18B20_WriteByte>:

// 写一字节
void DS18B20_WriteByte(uint8_t byte)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e00c      	b.n	800095a <DS18B20_WriteByte+0x2a>
    {
        DS18B20_WriteBit(byte & 0x01);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ffa7 	bl	800089c <DS18B20_WriteBit>
        byte >>= 1;
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	3301      	adds	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b07      	cmp	r3, #7
 800095e:	d9ef      	bls.n	8000940 <DS18B20_WriteByte+0x10>
    }
}
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <DS18B20_ReadByte>:

// 读一字节
uint8_t DS18B20_ReadByte(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 8000974:	2300      	movs	r3, #0
 8000976:	71bb      	strb	r3, [r7, #6]
 8000978:	e00e      	b.n	8000998 <DS18B20_ReadByte+0x2e>
    {
        byte >>= 1;
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	085b      	lsrs	r3, r3, #1
 800097e:	71fb      	strb	r3, [r7, #7]
        if (DS18B20_ReadBit())
 8000980:	f7ff ffae 	bl	80008e0 <DS18B20_ReadBit>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d003      	beq.n	8000992 <DS18B20_ReadByte+0x28>
            byte |= 0x80;
 800098a:	79fb      	ldrb	r3, [r7, #7]
 800098c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000990:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 8000992:	79bb      	ldrb	r3, [r7, #6]
 8000994:	3301      	adds	r3, #1
 8000996:	71bb      	strb	r3, [r7, #6]
 8000998:	79bb      	ldrb	r3, [r7, #6]
 800099a:	2b07      	cmp	r3, #7
 800099c:	d9ed      	bls.n	800097a <DS18B20_ReadByte+0x10>
    }
    return byte;
 800099e:	79fb      	ldrb	r3, [r7, #7]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <DS18B20_CheckCRC>:
    return DS18B20_CheckCRC(rom, 8);
}

// CRC8 校验（用于 ROM 和 Scratchpad）
uint8_t DS18B20_CheckCRC(uint8_t *data, uint8_t len)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
    uint8_t i, j;

    for (i = 0; i < len; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	73bb      	strb	r3, [r7, #14]
 80009bc:	e022      	b.n	8000a04 <DS18B20_CheckCRC+0x5c>
    {
        crc ^= data[i];
 80009be:	7bbb      	ldrb	r3, [r7, #14]
 80009c0:	687a      	ldr	r2, [r7, #4]
 80009c2:	4413      	add	r3, r2
 80009c4:	781a      	ldrb	r2, [r3, #0]
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
 80009c8:	4053      	eors	r3, r2
 80009ca:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	737b      	strb	r3, [r7, #13]
 80009d0:	e012      	b.n	80009f8 <DS18B20_CheckCRC+0x50>
        {
            if (crc & 0x01)
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d007      	beq.n	80009ec <DS18B20_CheckCRC+0x44>
                crc = (crc >> 1) ^ 0x8C;  // 多项式 0x8C (X8 + X5 + X4 + 1)
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	085b      	lsrs	r3, r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 80009e6:	43db      	mvns	r3, r3
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e002      	b.n	80009f2 <DS18B20_CheckCRC+0x4a>
            else
                crc >>= 1;
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	085b      	lsrs	r3, r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
        for (j = 0; j < 8; j++)
 80009f2:	7b7b      	ldrb	r3, [r7, #13]
 80009f4:	3301      	adds	r3, #1
 80009f6:	737b      	strb	r3, [r7, #13]
 80009f8:	7b7b      	ldrb	r3, [r7, #13]
 80009fa:	2b07      	cmp	r3, #7
 80009fc:	d9e9      	bls.n	80009d2 <DS18B20_CheckCRC+0x2a>
    for (i = 0; i < len; i++)
 80009fe:	7bbb      	ldrb	r3, [r7, #14]
 8000a00:	3301      	adds	r3, #1
 8000a02:	73bb      	strb	r3, [r7, #14]
 8000a04:	7bba      	ldrb	r2, [r7, #14]
 8000a06:	78fb      	ldrb	r3, [r7, #3]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d3d8      	bcc.n	80009be <DS18B20_CheckCRC+0x16>
        }
    }
    return (crc == 0);
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	bf0c      	ite	eq
 8000a12:	2301      	moveq	r3, #1
 8000a14:	2300      	movne	r3, #0
 8000a16:	b2db      	uxtb	r3, r3
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
	...

08000a24 <DS18B20_GetTemp>:

// 获取温度（跳过 ROM，适用于单个传感器）
float DS18B20_GetTemp(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b084      	sub	sp, #16
 8000a28:	af00      	add	r7, sp, #0
    uint8_t data[9];
    int16_t raw_temp;

    if (!DS18B20_Reset()) return -999.9f;
 8000a2a:	f7ff ff0d 	bl	8000848 <DS18B20_Reset>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d101      	bne.n	8000a38 <DS18B20_GetTemp+0x14>
 8000a34:	4b26      	ldr	r3, [pc, #152]	@ (8000ad0 <DS18B20_GetTemp+0xac>)
 8000a36:	e046      	b.n	8000ac6 <DS18B20_GetTemp+0xa2>

    DS18B20_WriteByte(0xCC);     // Skip ROM
 8000a38:	20cc      	movs	r0, #204	@ 0xcc
 8000a3a:	f7ff ff79 	bl	8000930 <DS18B20_WriteByte>
    DS18B20_WriteByte(0x44);     // Convert T
 8000a3e:	2044      	movs	r0, #68	@ 0x44
 8000a40:	f7ff ff76 	bl	8000930 <DS18B20_WriteByte>
    HAL_Delay(750);              // 等待转换完成（最长 750ms）
 8000a44:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000a48:	f001 fb00 	bl	800204c <HAL_Delay>

    if (!DS18B20_Reset()) return -999.9f;
 8000a4c:	f7ff fefc 	bl	8000848 <DS18B20_Reset>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d101      	bne.n	8000a5a <DS18B20_GetTemp+0x36>
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <DS18B20_GetTemp+0xac>)
 8000a58:	e035      	b.n	8000ac6 <DS18B20_GetTemp+0xa2>

    DS18B20_WriteByte(0xCC);     // Skip ROM
 8000a5a:	20cc      	movs	r0, #204	@ 0xcc
 8000a5c:	f7ff ff68 	bl	8000930 <DS18B20_WriteByte>
    DS18B20_WriteByte(0xBE);     // Read Scratchpad
 8000a60:	20be      	movs	r0, #190	@ 0xbe
 8000a62:	f7ff ff65 	bl	8000930 <DS18B20_WriteByte>

    for (int i = 0; i < 9; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e00b      	b.n	8000a84 <DS18B20_GetTemp+0x60>
    {
        data[i] = DS18B20_ReadByte();
 8000a6c:	f7ff ff7d 	bl	800096a <DS18B20_ReadByte>
 8000a70:	4603      	mov	r3, r0
 8000a72:	4619      	mov	r1, r3
 8000a74:	463a      	mov	r2, r7
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	4413      	add	r3, r2
 8000a7a:	460a      	mov	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 9; i++)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b08      	cmp	r3, #8
 8000a88:	ddf0      	ble.n	8000a6c <DS18B20_GetTemp+0x48>
    }

    if (!DS18B20_CheckCRC(data, 9))
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2109      	movs	r1, #9
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f7ff ff8a 	bl	80009a8 <DS18B20_CheckCRC>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <DS18B20_GetTemp+0x7a>
        return -999.9f;          // CRC 校验失败
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad0 <DS18B20_GetTemp+0xac>)
 8000a9c:	e013      	b.n	8000ac6 <DS18B20_GetTemp+0xa2>

    raw_temp = (data[1] << 8) | data[0];
 8000a9e:	787b      	ldrb	r3, [r7, #1]
 8000aa0:	b21b      	sxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b21a      	sxth	r2, r3
 8000aa6:	783b      	ldrb	r3, [r7, #0]
 8000aa8:	b21b      	sxth	r3, r3
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	817b      	strh	r3, [r7, #10]
    return (float)raw_temp / 16.0f;
 8000aae:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fc0e 	bl	80002d4 <__aeabi_i2f>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff fd10 	bl	80004e4 <__aeabi_fdiv>
 8000ac4:	4603      	mov	r3, r0
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	c479f99a 	.word	0xc479f99a

08000ad4 <PIDController_Init>:
 * @param pid 指向PID控制器结构体的指针
 * 
 * 该函数将PID控制器的所有内部变量初始化为0，
 * 为控制器的首次运行做好准备。
 */
void PIDController_Init(PIDController *pid) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

	/* 清除控制器变量，为新的控制循环做准备 */
	pid->integrator = 0.0f;         // 积分项清零
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f04f 0200 	mov.w	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	@ 0x24
	pid->prevError  = 0.0f;         // 上一次误差清零
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f04f 0200 	mov.w	r2, #0
 8000aea:	629a      	str	r2, [r3, #40]	@ 0x28

	pid->differentiator  = 0.0f;    // 微分项清零
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f04f 0200 	mov.w	r2, #0
 8000af2:	62da      	str	r2, [r3, #44]	@ 0x2c
	pid->prevMeasurement = 0.0f;    // 上一次测量值清零
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f04f 0200 	mov.w	r2, #0
 8000afa:	631a      	str	r2, [r3, #48]	@ 0x30

	pid->out = 0.0f;                // 输出值清零
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f04f 0200 	mov.w	r2, #0
 8000b02:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr

08000b0e <PIDController_Update>:
 * @return 控制器输出值
 * 
 * 该函数实现了完整的PID控制算法，包括比例、积分和微分三个部分，
 * 并包含了抗积分饱和和微分项低通滤波等优化措施。
 */
float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
 8000b0e:	b5b0      	push	{r4, r5, r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]

	/*
	* 计算误差信号
	* 误差 = 设定值 - 实际测量值
	*/
    float error = setpoint - measurement;
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	68b8      	ldr	r0, [r7, #8]
 8000b1e:	f7ff fb23 	bl	8000168 <__aeabi_fsub>
 8000b22:	4603      	mov	r3, r0
 8000b24:	617b      	str	r3, [r7, #20]
	/*
	* 比例项（Proportional）
	* 比例项直接与误差成正比，增益为Kp
	* Kp越大，系统响应越快，但过大会导致系统不稳定
	*/
    float proportional = pid->Kp * error;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	6978      	ldr	r0, [r7, #20]
 8000b2e:	f7ff fc25 	bl	800037c <__aeabi_fmul>
 8000b32:	4603      	mov	r3, r0
 8000b34:	613b      	str	r3, [r7, #16]
	* 积分项（Integral）
	* 积分项用于消除稳态误差，对误差进行累积
	* 使用梯形法则进行数值积分，提高计算精度
	* 积分项 = 原积分项 + 0.5 * Ki * T * (当前误差 + 上次误差)
	*/
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fc1a 	bl	800037c <__aeabi_fmul>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	6a1b      	ldr	r3, [r3, #32]
 8000b50:	4619      	mov	r1, r3
 8000b52:	4610      	mov	r0, r2
 8000b54:	f7ff fc12 	bl	800037c <__aeabi_fmul>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	461d      	mov	r5, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b60:	6979      	ldr	r1, [r7, #20]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fb02 	bl	800016c <__addsf3>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f7ff fc05 	bl	800037c <__aeabi_fmul>
 8000b72:	4603      	mov	r3, r0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4620      	mov	r0, r4
 8000b78:	f7ff faf8 	bl	800016c <__addsf3>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	625a      	str	r2, [r3, #36]	@ 0x24
	/* 
	* 积分饱和抗饱和处理（Anti-wind-up）
	* 当积分项超出预设范围时，将其限制在合理范围内
	* 防止积分项过大导致系统超调或响应迟缓
	*/
    if (pid->integrator > pid->limMaxInt) {
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4610      	mov	r0, r2
 8000b90:	f7ff fdb0 	bl	80006f4 <__aeabi_fcmpgt>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d004      	beq.n	8000ba4 <PIDController_Update+0x96>
        // 积分项超过最大限制，将其设为最大值
        pid->integrator = pid->limMaxInt;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	69da      	ldr	r2, [r3, #28]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	625a      	str	r2, [r3, #36]	@ 0x24
 8000ba2:	e00e      	b.n	8000bc2 <PIDController_Update+0xb4>

    } else if (pid->integrator < pid->limMinInt) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	699b      	ldr	r3, [r3, #24]
 8000bac:	4619      	mov	r1, r3
 8000bae:	4610      	mov	r0, r2
 8000bb0:	f7ff fd82 	bl	80006b8 <__aeabi_fcmplt>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <PIDController_Update+0xb4>
        // 积分项低于最小限制，将其设为最小值
        pid->integrator = pid->limMinInt;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	699a      	ldr	r2, [r3, #24]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	625a      	str	r2, [r3, #36]	@ 0x24
	* 微分项用于预测系统变化趋势，提高系统响应速度
	* 对测量值求微分（而非对误差求微分），避免设定值突变对系统造成冲击
	* 使用一阶低通滤波器实现带限微分器，减少噪声影响
	* 微分项 = -(2*Kd*(测量值变化量) + (2*τ-T)*上次微分项) / (2*τ+T)
	*/
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* 注意：对测量值求微分，因此方程前有负号 */
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	689b      	ldr	r3, [r3, #8]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff facf 	bl	800016c <__addsf3>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	461c      	mov	r4, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f7ff fac5 	bl	8000168 <__aeabi_fsub>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4620      	mov	r0, r4
 8000be4:	f7ff fbca 	bl	800037c <__aeabi_fmul>
 8000be8:	4603      	mov	r3, r0
 8000bea:	461c      	mov	r4, r3
                        + (2.0f * pid->tau - pid->T) * pid->differentiator)          /* τ是低通滤波器时间常数 */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff faba 	bl	800016c <__addsf3>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4619      	mov	r1, r3
 8000c02:	4610      	mov	r0, r2
 8000c04:	f7ff fab0 	bl	8000168 <__aeabi_fsub>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c10:	4619      	mov	r1, r3
 8000c12:	4610      	mov	r0, r2
 8000c14:	f7ff fbb2 	bl	800037c <__aeabi_fmul>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4620      	mov	r0, r4
 8000c1e:	f7ff faa5 	bl	800016c <__addsf3>
 8000c22:	4603      	mov	r3, r0
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* 注意：对测量值求微分，因此方程前有负号 */
 8000c24:	f083 4400 	eor.w	r4, r3, #2147483648	@ 0x80000000
                        / (2.0f * pid->tau + pid->T);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fa9c 	bl	800016c <__addsf3>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	6a1b      	ldr	r3, [r3, #32]
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4610      	mov	r0, r2
 8000c40:	f7ff fa94 	bl	800016c <__addsf3>
 8000c44:	4603      	mov	r3, r0
 8000c46:	4619      	mov	r1, r3
 8000c48:	4620      	mov	r0, r4
 8000c4a:	f7ff fc4b 	bl	80004e4 <__aeabi_fdiv>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	461a      	mov	r2, r3
    pid->differentiator = -(2.0f * pid->Kd * (measurement - pid->prevMeasurement)	/* 注意：对测量值求微分，因此方程前有负号 */
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	62da      	str	r2, [r3, #44]	@ 0x2c

	/*
	* 计算控制器总输出并应用输出限制
	* 输出 = 比例项 + 积分项 + 微分项
	*/
    pid->out = proportional + pid->integrator + pid->differentiator;
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c5a:	6939      	ldr	r1, [r7, #16]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fa85 	bl	800016c <__addsf3>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4610      	mov	r0, r2
 8000c6e:	f7ff fa7d 	bl	800016c <__addsf3>
 8000c72:	4603      	mov	r3, r0
 8000c74:	461a      	mov	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	635a      	str	r2, [r3, #52]	@ 0x34

    /* 
	* 输出值限制
	* 确保控制器输出在预设范围内，防止执行器饱和
	*/
    if (pid->out > pid->limMax) {
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4619      	mov	r1, r3
 8000c84:	4610      	mov	r0, r2
 8000c86:	f7ff fd35 	bl	80006f4 <__aeabi_fcmpgt>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d004      	beq.n	8000c9a <PIDController_Update+0x18c>
        // 输出超过最大限制，将其设为最大值
        pid->out = pid->limMax;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c98:	e00e      	b.n	8000cb8 <PIDController_Update+0x1aa>

    } else if (pid->out < pid->limMin) {
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	691b      	ldr	r3, [r3, #16]
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4610      	mov	r0, r2
 8000ca6:	f7ff fd07 	bl	80006b8 <__aeabi_fcmplt>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d003      	beq.n	8000cb8 <PIDController_Update+0x1aa>
        // 输出低于最小限制，将其设为最小值
        pid->out = pid->limMin;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	635a      	str	r2, [r3, #52]	@ 0x34
    }

	/* 
	* 保存当前误差和测量值，供下次计算使用
	*/
    pid->prevError       = error;           // 保存当前误差
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->prevMeasurement = measurement;     // 保存当前测量值
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	631a      	str	r2, [r3, #48]	@ 0x30

	/* 返回控制器输出值 */
    return pid->out;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34

}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bdb0      	pop	{r4, r5, r7, pc}

08000cd0 <CH1116_WriteCommand>:
  * @brief  向CH1116写入命令
  * @param  command: 要写入的命令
  * @retval 无
  */
void CH1116_WriteCommand(uint8_t command)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    dma_transmission_complete = 0;
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <CH1116_WriteCommand+0x40>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
    uint8_t control_byte = 0x00; // Control byte for command
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write_DMA(&hi2c2, CH1116_I2C_ADDR << 1, control_byte, 1, &command, 1);
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	2301      	movs	r3, #1
 8000cea:	9301      	str	r3, [sp, #4]
 8000cec:	1dfb      	adds	r3, r7, #7
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	2178      	movs	r1, #120	@ 0x78
 8000cf4:	4807      	ldr	r0, [pc, #28]	@ (8000d14 <CH1116_WriteCommand+0x44>)
 8000cf6:	f002 f847 	bl	8002d88 <HAL_I2C_Mem_Write_DMA>
    
    // 等待传输完成
    while (!dma_transmission_complete)
 8000cfa:	bf00      	nop
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <CH1116_WriteCommand+0x40>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0fa      	beq.n	8000cfc <CH1116_WriteCommand+0x2c>
    {
        // 可以添加超时处理
    }
}
 8000d06:	bf00      	nop
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000000 	.word	0x20000000
 8000d14:	20000520 	.word	0x20000520

08000d18 <CH1116_WriteData>:
  * @param  data: 要写入的数据
  * @param  size: 数据大小
  * @retval 无
  */
void CH1116_WriteData(uint8_t *data, uint16_t size)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	460b      	mov	r3, r1
 8000d22:	807b      	strh	r3, [r7, #2]
    dma_transmission_complete = 0;
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <CH1116_WriteData+0x44>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    uint8_t control_byte = 0x40; // Control byte for data
 8000d2a:	2340      	movs	r3, #64	@ 0x40
 8000d2c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write_DMA(&hi2c2, CH1116_I2C_ADDR << 1, control_byte, 1, data, size);
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	9301      	str	r3, [sp, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	2178      	movs	r1, #120	@ 0x78
 8000d3e:	4808      	ldr	r0, [pc, #32]	@ (8000d60 <CH1116_WriteData+0x48>)
 8000d40:	f002 f822 	bl	8002d88 <HAL_I2C_Mem_Write_DMA>
    
    // 等待传输完成
    while (!dma_transmission_complete)
 8000d44:	bf00      	nop
 8000d46:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <CH1116_WriteData+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0fa      	beq.n	8000d46 <CH1116_WriteData+0x2e>
    {
        // 可以添加超时处理
    }
}
 8000d50:	bf00      	nop
 8000d52:	bf00      	nop
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000520 	.word	0x20000520

08000d64 <CH1116_IsTransmissionComplete>:
/**
  * @brief  检查DMA传输是否完成
  * @retval 1: 传输完成, 0: 传输未完成
  */
uint8_t CH1116_IsTransmissionComplete(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
    return dma_transmission_complete;
 8000d68:	4b03      	ldr	r3, [pc, #12]	@ (8000d78 <CH1116_IsTransmissionComplete+0x14>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b2db      	uxtb	r3, r3
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000000 	.word	0x20000000

08000d7c <CH1116_PrintString>:
  * @param  column: 列地址 (0-127)
  * @param  str: 要显示的字符串
  * @retval None
  */
void CH1116_PrintString(uint8_t page, uint8_t column, char* str)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	603a      	str	r2, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	460b      	mov	r3, r1
 8000d8a:	71bb      	strb	r3, [r7, #6]
    uint8_t i, j;
    uint8_t charIndex;
    uint8_t charData;
    
    // 设置起始位置
    CH1116_SetCursor(page, column);
 8000d8c:	79ba      	ldrb	r2, [r7, #6]
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	4611      	mov	r1, r2
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 f8d2 	bl	8000f3c <CH1116_SetCursor>
    
    // 遍历字符串中的每个字符
    for (i = 0; str[i] != '\0'; i++) {
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
 8000d9c:	e043      	b.n	8000e26 <CH1116_PrintString+0xaa>
        // 计算字符在字体数组中的索引
        if (str[i] >= 32 && str[i] <= 126) {
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b1f      	cmp	r3, #31
 8000da8:	d90c      	bls.n	8000dc4 <CH1116_PrintString+0x48>
 8000daa:	7bfb      	ldrb	r3, [r7, #15]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b7e      	cmp	r3, #126	@ 0x7e
 8000db4:	d806      	bhi.n	8000dc4 <CH1116_PrintString+0x48>
            charIndex = str[i] - 32;
 8000db6:	7bfb      	ldrb	r3, [r7, #15]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	3b20      	subs	r3, #32
 8000dc0:	737b      	strb	r3, [r7, #13]
 8000dc2:	e001      	b.n	8000dc8 <CH1116_PrintString+0x4c>
        } else {
            charIndex = 0; // 默认显示空格
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	737b      	strb	r3, [r7, #13]
        }
        
        // 写入字符的5列数据
        for (j = 0; j < 5; j++) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73bb      	strb	r3, [r7, #14]
 8000dcc:	e017      	b.n	8000dfe <CH1116_PrintString+0x82>
            charData = font5x8[charIndex * 5 + j];
 8000dce:	7b7a      	ldrb	r2, [r7, #13]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	441a      	add	r2, r3
 8000dd6:	7bbb      	ldrb	r3, [r7, #14]
 8000dd8:	4413      	add	r3, r2
 8000dda:	4a18      	ldr	r2, [pc, #96]	@ (8000e3c <CH1116_PrintString+0xc0>)
 8000ddc:	5cd3      	ldrb	r3, [r2, r3]
 8000dde:	733b      	strb	r3, [r7, #12]
            
            // 等待DMA传输完成
            while (!CH1116_IsTransmissionComplete());
 8000de0:	bf00      	nop
 8000de2:	f7ff ffbf 	bl	8000d64 <CH1116_IsTransmissionComplete>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0fa      	beq.n	8000de2 <CH1116_PrintString+0x66>
            
            // 写入数据
            CH1116_WriteData(&charData, 1);
 8000dec:	f107 030c 	add.w	r3, r7, #12
 8000df0:	2101      	movs	r1, #1
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff90 	bl	8000d18 <CH1116_WriteData>
        for (j = 0; j < 5; j++) {
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	73bb      	strb	r3, [r7, #14]
 8000dfe:	7bbb      	ldrb	r3, [r7, #14]
 8000e00:	2b04      	cmp	r3, #4
 8000e02:	d9e4      	bls.n	8000dce <CH1116_PrintString+0x52>
        }
        
        // 添加一列空隙
        charData = 0x00;
 8000e04:	2300      	movs	r3, #0
 8000e06:	733b      	strb	r3, [r7, #12]
        
        // 等待DMA传输完成
        while (!CH1116_IsTransmissionComplete());
 8000e08:	bf00      	nop
 8000e0a:	f7ff ffab 	bl	8000d64 <CH1116_IsTransmissionComplete>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0fa      	beq.n	8000e0a <CH1116_PrintString+0x8e>
        
        // 写入空隙数据
        CH1116_WriteData(&charData, 1);
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2101      	movs	r1, #1
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff7c 	bl	8000d18 <CH1116_WriteData>
    for (i = 0; str[i] != '\0'; i++) {
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	3301      	adds	r3, #1
 8000e24:	73fb      	strb	r3, [r7, #15]
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1b5      	bne.n	8000d9e <CH1116_PrintString+0x22>
    }
}
 8000e32:	bf00      	nop
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	08009b90 	.word	0x08009b90

08000e40 <CH1116_Init>:
/**
  * @brief  初始化CH1116 OLED显示屏
  * @retval 无
  */
void CH1116_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CH1116_Init */
    // Wait for power stabilization
    HAL_Delay(100);
 8000e44:	2064      	movs	r0, #100	@ 0x64
 8000e46:	f001 f901 	bl	800204c <HAL_Delay>
    
    // Initialization sequence for CH1116
    CH1116_WriteCommand(CH1116_CMD_DISPLAY_OFF);                 // 关闭显示
 8000e4a:	20ae      	movs	r0, #174	@ 0xae
 8000e4c:	f7ff ff40 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_MUX_RATIO);               // 设置多路复用比率
 8000e50:	20a8      	movs	r0, #168	@ 0xa8
 8000e52:	f7ff ff3d 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x3F);                                   // 1/64占空比
 8000e56:	203f      	movs	r0, #63	@ 0x3f
 8000e58:	f7ff ff3a 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_DISPLAY_OFFSET);          // 设置显示偏移
 8000e5c:	20d3      	movs	r0, #211	@ 0xd3
 8000e5e:	f7ff ff37 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x00);                                   // 无偏移
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ff34 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_START_LINE | 0x00);       // 设置起始行
 8000e68:	2040      	movs	r0, #64	@ 0x40
 8000e6a:	f7ff ff31 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_SEGMENT_REMAP);           // 设置段重映射
 8000e6e:	20a1      	movs	r0, #161	@ 0xa1
 8000e70:	f7ff ff2e 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_COM_SCAN_DIR);            // 设置COM输出扫描方向
 8000e74:	20c8      	movs	r0, #200	@ 0xc8
 8000e76:	f7ff ff2b 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_COM_PINS);                // 设置COM引脚硬件配置
 8000e7a:	20da      	movs	r0, #218	@ 0xda
 8000e7c:	f7ff ff28 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x12);                                   // 替代COM引脚配置
 8000e80:	2012      	movs	r0, #18
 8000e82:	f7ff ff25 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_CONTRAST);                // 设置对比度控制
 8000e86:	2081      	movs	r0, #129	@ 0x81
 8000e88:	f7ff ff22 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(0xCF);                                   // 对比度值
 8000e8c:	20cf      	movs	r0, #207	@ 0xcf
 8000e8e:	f7ff ff1f 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_PRECHARGE);               // 设置预充电周期
 8000e92:	20d9      	movs	r0, #217	@ 0xd9
 8000e94:	f7ff ff1c 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(0xF1);                                   // 预充电周期
 8000e98:	20f1      	movs	r0, #241	@ 0xf1
 8000e9a:	f7ff ff19 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_VCOMH_DESELECT);          // 设置VCOMH去选中电压等级
 8000e9e:	20db      	movs	r0, #219	@ 0xdb
 8000ea0:	f7ff ff16 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x40);                                   // VCOMH去选中电压等级
 8000ea4:	2040      	movs	r0, #64	@ 0x40
 8000ea6:	f7ff ff13 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_CHARGE_PUMP);                 // 启用电荷泵调节器
 8000eaa:	208d      	movs	r0, #141	@ 0x8d
 8000eac:	f7ff ff10 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x14);                                   // 电荷泵开启
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f7ff ff0d 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_DISPLAY_ON);                  // 开启显示
 8000eb6:	20af      	movs	r0, #175	@ 0xaf
 8000eb8:	f7ff ff0a 	bl	8000cd0 <CH1116_WriteCommand>
    
    // Clear display
    CH1116_Clear();
 8000ebc:	f000 f804 	bl	8000ec8 <CH1116_Clear>
    CH1116_Display();
 8000ec0:	f000 f81c 	bl	8000efc <CH1116_Display>
    /* USER CODE END CH1116_Init */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <CH1116_Clear>:
/**
  * @brief  清除CH1116显示缓冲区
  * @retval 无
  */
void CH1116_Clear(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CH1116_Clear */
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	80fb      	strh	r3, [r7, #6]
 8000ed2:	e006      	b.n	8000ee2 <CH1116_Clear+0x1a>
    {
        CH1116_Buffer[i] = 0x00;
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <CH1116_Clear+0x30>)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 8000edc:	88fb      	ldrh	r3, [r7, #6]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	80fb      	strh	r3, [r7, #6]
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ee8:	d3f4      	bcc.n	8000ed4 <CH1116_Clear+0xc>
    }
    /* USER CODE END CH1116_Clear */
}
 8000eea:	bf00      	nop
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000088 	.word	0x20000088

08000efc <CH1116_Display>:
/**
  * @brief  用缓冲区数据更新CH1116显示屏
  * @retval 无
  */
void CH1116_Display(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CH1116_Display */
    for (uint8_t page = 0; page < CH1116_PAGES; page++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	71fb      	strb	r3, [r7, #7]
 8000f06:	e00f      	b.n	8000f28 <CH1116_Display+0x2c>
    {
        CH1116_SetCursor(page, 0);
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f815 	bl	8000f3c <CH1116_SetCursor>
        CH1116_WriteData(&CH1116_Buffer[CH1116_WIDTH * page], CH1116_WIDTH);
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	01db      	lsls	r3, r3, #7
 8000f16:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <CH1116_Display+0x3c>)
 8000f18:	4413      	add	r3, r2
 8000f1a:	2180      	movs	r1, #128	@ 0x80
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fefb 	bl	8000d18 <CH1116_WriteData>
    for (uint8_t page = 0; page < CH1116_PAGES; page++)
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	3301      	adds	r3, #1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	2b07      	cmp	r3, #7
 8000f2c:	d9ec      	bls.n	8000f08 <CH1116_Display+0xc>
    }
    /* USER CODE END CH1116_Display */
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000088 	.word	0x20000088

08000f3c <CH1116_SetCursor>:
  * @param  page: Page address (0-7)
  * @param  column: Column address (0-127)
  * @retval None
  */
void CH1116_SetCursor(uint8_t page, uint8_t column)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	460a      	mov	r2, r1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	71bb      	strb	r3, [r7, #6]
    /* USER CODE BEGIN CH1116_SetCursor */
    CH1116_CurrentPage = page;
 8000f4c:	4a11      	ldr	r2, [pc, #68]	@ (8000f94 <CH1116_SetCursor+0x58>)
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	7013      	strb	r3, [r2, #0]
    CH1116_CurrentColumn = column;
 8000f52:	4a11      	ldr	r2, [pc, #68]	@ (8000f98 <CH1116_SetCursor+0x5c>)
 8000f54:	79bb      	ldrb	r3, [r7, #6]
 8000f56:	7013      	strb	r3, [r2, #0]
    
    // Set page and column addresses
    CH1116_WriteCommand(CH1116_CMD_SET_PAGE | page);
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff feb5 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_LOW_COLUMN | (column & 0x0F));
 8000f66:	79bb      	ldrb	r3, [r7, #6]
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff feae 	bl	8000cd0 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_HIGH_COLUMN | ((column >> 4) & 0x0F));
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	091b      	lsrs	r3, r3, #4
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	f043 0310 	orr.w	r3, r3, #16
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fea3 	bl	8000cd0 <CH1116_WriteCommand>
    /* USER CODE END CH1116_SetCursor */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	20000488 	.word	0x20000488
 8000f98:	20000489 	.word	0x20000489

08000f9c <CH1116_Fill>:
  * @brief  用指定模式填充整个显示缓冲区
  * @param  color: 填充颜色 (0 = 黑色, 1 = 白色)
  * @retval 无
  */
void CH1116_Fill(uint8_t color)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN CH1116_Fill */
    uint8_t fill_byte = color ? 0xFF : 0x00;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <CH1116_Fill+0x14>
 8000fac:	23ff      	movs	r3, #255	@ 0xff
 8000fae:	e000      	b.n	8000fb2 <CH1116_Fill+0x16>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	737b      	strb	r3, [r7, #13]
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	81fb      	strh	r3, [r7, #14]
 8000fb8:	e006      	b.n	8000fc8 <CH1116_Fill+0x2c>
    {
        CH1116_Buffer[i] = fill_byte;
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	4907      	ldr	r1, [pc, #28]	@ (8000fdc <CH1116_Fill+0x40>)
 8000fbe:	7b7a      	ldrb	r2, [r7, #13]
 8000fc0:	54ca      	strb	r2, [r1, r3]
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 8000fc2:	89fb      	ldrh	r3, [r7, #14]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	81fb      	strh	r3, [r7, #14]
 8000fc8:	89fb      	ldrh	r3, [r7, #14]
 8000fca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fce:	d3f4      	bcc.n	8000fba <CH1116_Fill+0x1e>
    }
    /* USER CODE END CH1116_Fill */
}
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000088 	.word	0x20000088

08000fe0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fe6:	4b18      	ldr	r3, [pc, #96]	@ (8001048 <MX_DMA_Init+0x68>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a17      	ldr	r2, [pc, #92]	@ (8001048 <MX_DMA_Init+0x68>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6153      	str	r3, [r2, #20]
 8000ff2:	4b15      	ldr	r3, [pc, #84]	@ (8001048 <MX_DMA_Init+0x68>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2105      	movs	r1, #5
 8001002:	200e      	movs	r0, #14
 8001004:	f001 f8fb 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001008:	200e      	movs	r0, #14
 800100a:	f001 f914 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2105      	movs	r1, #5
 8001012:	200f      	movs	r0, #15
 8001014:	f001 f8f3 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001018:	200f      	movs	r0, #15
 800101a:	f001 f90c 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2105      	movs	r1, #5
 8001022:	2010      	movs	r0, #16
 8001024:	f001 f8eb 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001028:	2010      	movs	r0, #16
 800102a:	f001 f904 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2105      	movs	r1, #5
 8001032:	2011      	movs	r0, #17
 8001034:	f001 f8e3 	bl	80021fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001038:	2011      	movs	r0, #17
 800103a:	f001 f8fc 	bl	8002236 <HAL_NVIC_EnableIRQ>

}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  temperatureMutexHandle = osMutexNew(&temperatureMutex_attributes);
 8001050:	4813      	ldr	r0, [pc, #76]	@ (80010a0 <MX_FREERTOS_Init+0x54>)
 8001052:	f004 ff34 	bl	8005ebe <osMutexNew>
 8001056:	4603      	mov	r3, r0
 8001058:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <MX_FREERTOS_Init+0x58>)
 800105a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UserControl_0 */
  UserControl_0Handle = osThreadNew(StartDefaultTask, NULL, &UserControl_0_attributes);
 800105c:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <MX_FREERTOS_Init+0x5c>)
 800105e:	2100      	movs	r1, #0
 8001060:	4812      	ldr	r0, [pc, #72]	@ (80010ac <MX_FREERTOS_Init+0x60>)
 8001062:	f004 fe7f 	bl	8005d64 <osThreadNew>
 8001066:	4603      	mov	r3, r0
 8001068:	4a11      	ldr	r2, [pc, #68]	@ (80010b0 <MX_FREERTOS_Init+0x64>)
 800106a:	6013      	str	r3, [r2, #0]

  /* creation of ReadSensor_1 */
  ReadSensor_1Handle = osThreadNew(StartTask02, NULL, &ReadSensor_1_attributes);
 800106c:	4a11      	ldr	r2, [pc, #68]	@ (80010b4 <MX_FREERTOS_Init+0x68>)
 800106e:	2100      	movs	r1, #0
 8001070:	4811      	ldr	r0, [pc, #68]	@ (80010b8 <MX_FREERTOS_Init+0x6c>)
 8001072:	f004 fe77 	bl	8005d64 <osThreadNew>
 8001076:	4603      	mov	r3, r0
 8001078:	4a10      	ldr	r2, [pc, #64]	@ (80010bc <MX_FREERTOS_Init+0x70>)
 800107a:	6013      	str	r3, [r2, #0]

  /* creation of WriteScreen_2 */
  WriteScreen_2Handle = osThreadNew(StartTask03, NULL, &WriteScreen_2_attributes);
 800107c:	4a10      	ldr	r2, [pc, #64]	@ (80010c0 <MX_FREERTOS_Init+0x74>)
 800107e:	2100      	movs	r1, #0
 8001080:	4810      	ldr	r0, [pc, #64]	@ (80010c4 <MX_FREERTOS_Init+0x78>)
 8001082:	f004 fe6f 	bl	8005d64 <osThreadNew>
 8001086:	4603      	mov	r3, r0
 8001088:	4a0f      	ldr	r2, [pc, #60]	@ (80010c8 <MX_FREERTOS_Init+0x7c>)
 800108a:	6013      	str	r3, [r2, #0]

  /* creation of TECControl_3 */
  TECControl_3Handle = osThreadNew(StartTask04, NULL, &TECControl_3_attributes);
 800108c:	4a0f      	ldr	r2, [pc, #60]	@ (80010cc <MX_FREERTOS_Init+0x80>)
 800108e:	2100      	movs	r1, #0
 8001090:	480f      	ldr	r0, [pc, #60]	@ (80010d0 <MX_FREERTOS_Init+0x84>)
 8001092:	f004 fe67 	bl	8005d64 <osThreadNew>
 8001096:	4603      	mov	r3, r0
 8001098:	4a0e      	ldr	r2, [pc, #56]	@ (80010d4 <MX_FREERTOS_Init+0x88>)
 800109a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800109c:	bf00      	nop
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	08009d6c 	.word	0x08009d6c
 80010a4:	2000050c 	.word	0x2000050c
 80010a8:	08009d7c 	.word	0x08009d7c
 80010ac:	080010d9 	.word	0x080010d9
 80010b0:	20000510 	.word	0x20000510
 80010b4:	08009da0 	.word	0x08009da0
 80010b8:	080012d1 	.word	0x080012d1
 80010bc:	20000514 	.word	0x20000514
 80010c0:	08009dc4 	.word	0x08009dc4
 80010c4:	08001329 	.word	0x08001329
 80010c8:	20000518 	.word	0x20000518
 80010cc:	08009de8 	.word	0x08009de8
 80010d0:	080013f5 	.word	0x080013f5
 80010d4:	2000051c 	.word	0x2000051c

080010d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b092      	sub	sp, #72	@ 0x48
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  // UART接收缓冲区
  uint8_t rxBuffer[10];  // 增加缓冲区大小以处理更长的命令
  uint8_t commandBuffer[10];
  uint8_t commandLength = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  
  // 启动UART接收
  HAL_UART_Receive_DMA(&huart2, rxBuffer, 1);
 80010e6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010ea:	2201      	movs	r2, #1
 80010ec:	4619      	mov	r1, r3
 80010ee:	486f      	ldr	r0, [pc, #444]	@ (80012ac <StartDefaultTask+0x1d4>)
 80010f0:	f003 fe85 	bl	8004dfe <HAL_UART_Receive_DMA>
  
  /* Infinite loop */
  for(;;)
  {
    // 检查是否有接收到数据
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 80010f4:	4b6d      	ldr	r3, [pc, #436]	@ (80012ac <StartDefaultTask+0x1d4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0320 	and.w	r3, r3, #32
 80010fe:	2b20      	cmp	r3, #32
 8001100:	f040 80cf 	bne.w	80012a2 <StartDefaultTask+0x1ca>
      // 将接收到的数据添加到命令缓冲区
      if (rxBuffer[0] == '\r' || rxBuffer[0] == '\n') {
 8001104:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001108:	2b0d      	cmp	r3, #13
 800110a:	d004      	beq.n	8001116 <StartDefaultTask+0x3e>
 800110c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001110:	2b0a      	cmp	r3, #10
 8001112:	f040 80ac 	bne.w	800126e <StartDefaultTask+0x196>
        // 处理命令结束符
        if (commandLength > 0) {
 8001116:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800111a:	2b00      	cmp	r3, #0
 800111c:	f000 80ba 	beq.w	8001294 <StartDefaultTask+0x1bc>
          commandBuffer[commandLength] = '\0';  // 字符串结束符
 8001120:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001124:	3348      	adds	r3, #72	@ 0x48
 8001126:	443b      	add	r3, r7
 8001128:	2200      	movs	r2, #0
 800112a:	f803 2c20 	strb.w	r2, [r3, #-32]
          
          // 处理命令
          if (commandLength == 2 && commandBuffer[0] == 'P' && commandBuffer[1] == '0') {
 800112e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001132:	2b02      	cmp	r3, #2
 8001134:	d113      	bne.n	800115e <StartDefaultTask+0x86>
 8001136:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800113a:	2b50      	cmp	r3, #80	@ 0x50
 800113c:	d10f      	bne.n	800115e <StartDefaultTask+0x86>
 800113e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001142:	2b30      	cmp	r3, #48	@ 0x30
 8001144:	d10b      	bne.n	800115e <StartDefaultTask+0x86>
            // 关闭TEC
            tecEnabled = 0;
 8001146:	4b5a      	ldr	r3, [pc, #360]	@ (80012b0 <StartDefaultTask+0x1d8>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
            TEC_Stop();
 800114c:	f000 fd4c 	bl	8001be8 <TEC_Stop>
            // 发送确认信息
            HAL_UART_Transmit(&huart2, (uint8_t*)"TEC Disabled\r\n", 14, 100);
 8001150:	2364      	movs	r3, #100	@ 0x64
 8001152:	220e      	movs	r2, #14
 8001154:	4957      	ldr	r1, [pc, #348]	@ (80012b4 <StartDefaultTask+0x1dc>)
 8001156:	4855      	ldr	r0, [pc, #340]	@ (80012ac <StartDefaultTask+0x1d4>)
 8001158:	f003 fdc6 	bl	8004ce8 <HAL_UART_Transmit>
 800115c:	e083      	b.n	8001266 <StartDefaultTask+0x18e>
          }
          else if (commandLength == 2 && commandBuffer[0] == 'P' && commandBuffer[1] == '1') {
 800115e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001162:	2b02      	cmp	r3, #2
 8001164:	d113      	bne.n	800118e <StartDefaultTask+0xb6>
 8001166:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800116a:	2b50      	cmp	r3, #80	@ 0x50
 800116c:	d10f      	bne.n	800118e <StartDefaultTask+0xb6>
 800116e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001172:	2b31      	cmp	r3, #49	@ 0x31
 8001174:	d10b      	bne.n	800118e <StartDefaultTask+0xb6>
            // 启用TEC
            tecEnabled = 1;
 8001176:	4b4e      	ldr	r3, [pc, #312]	@ (80012b0 <StartDefaultTask+0x1d8>)
 8001178:	2201      	movs	r2, #1
 800117a:	701a      	strb	r2, [r3, #0]
            TEC_Start();
 800117c:	f000 fd1e 	bl	8001bbc <TEC_Start>
            // 发送确认信息
            HAL_UART_Transmit(&huart2, (uint8_t*)"TEC Enabled\r\n", 13, 100);
 8001180:	2364      	movs	r3, #100	@ 0x64
 8001182:	220d      	movs	r2, #13
 8001184:	494c      	ldr	r1, [pc, #304]	@ (80012b8 <StartDefaultTask+0x1e0>)
 8001186:	4849      	ldr	r0, [pc, #292]	@ (80012ac <StartDefaultTask+0x1d4>)
 8001188:	f003 fdae 	bl	8004ce8 <HAL_UART_Transmit>
 800118c:	e06b      	b.n	8001266 <StartDefaultTask+0x18e>
          }
          else if (commandLength == 3 && commandBuffer[0] == 'T' && 
 800118e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001192:	2b03      	cmp	r3, #3
 8001194:	d161      	bne.n	800125a <StartDefaultTask+0x182>
 8001196:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800119a:	2b54      	cmp	r3, #84	@ 0x54
 800119c:	d15d      	bne.n	800125a <StartDefaultTask+0x182>
                   commandBuffer[1] >= '0' && commandBuffer[1] <= '9' &&
 800119e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
          else if (commandLength == 3 && commandBuffer[0] == 'T' && 
 80011a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80011a4:	d959      	bls.n	800125a <StartDefaultTask+0x182>
                   commandBuffer[1] >= '0' && commandBuffer[1] <= '9' &&
 80011a6:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80011aa:	2b39      	cmp	r3, #57	@ 0x39
 80011ac:	d855      	bhi.n	800125a <StartDefaultTask+0x182>
                   commandBuffer[2] >= '0' && commandBuffer[2] <= '9') {
 80011ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
                   commandBuffer[1] >= '0' && commandBuffer[1] <= '9' &&
 80011b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80011b4:	d951      	bls.n	800125a <StartDefaultTask+0x182>
                   commandBuffer[2] >= '0' && commandBuffer[2] <= '9') {
 80011b6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80011ba:	2b39      	cmp	r3, #57	@ 0x39
 80011bc:	d84d      	bhi.n	800125a <StartDefaultTask+0x182>
            // 设置目标温度
            uint8_t tempTens = commandBuffer[1] - '0';
 80011be:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80011c2:	3b30      	subs	r3, #48	@ 0x30
 80011c4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
            uint8_t tempOnes = commandBuffer[2] - '0';
 80011c8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80011cc:	3b30      	subs	r3, #48	@ 0x30
 80011ce:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            uint8_t tempValue = tempTens * 10 + tempOnes;
 80011d2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80011d6:	461a      	mov	r2, r3
 80011d8:	0092      	lsls	r2, r2, #2
 80011da:	4413      	add	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	b2da      	uxtb	r2, r3
 80011e0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80011e4:	4413      	add	r3, r2
 80011e6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            
            // 检查温度范围
            if (tempValue <= 50) {
 80011ea:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80011ee:	2b32      	cmp	r3, #50	@ 0x32
 80011f0:	d82c      	bhi.n	800124c <StartDefaultTask+0x174>
              // 获取互斥锁
              osStatus_t status = osMutexAcquire(temperatureMutexHandle, 100);
 80011f2:	4b32      	ldr	r3, [pc, #200]	@ (80012bc <StartDefaultTask+0x1e4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2164      	movs	r1, #100	@ 0x64
 80011f8:	4618      	mov	r0, r3
 80011fa:	f004 fee6 	bl	8005fca <osMutexAcquire>
 80011fe:	6438      	str	r0, [r7, #64]	@ 0x40
              if (status == osOK) {
 8001200:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10c      	bne.n	8001220 <StartDefaultTask+0x148>
                targetTemperature = (float)tempValue;
 8001206:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f85e 	bl	80002cc <__aeabi_ui2f>
 8001210:	4603      	mov	r3, r0
 8001212:	4a2b      	ldr	r2, [pc, #172]	@ (80012c0 <StartDefaultTask+0x1e8>)
 8001214:	6013      	str	r3, [r2, #0]
                // 释放互斥锁
                osMutexRelease(temperatureMutexHandle);
 8001216:	4b29      	ldr	r3, [pc, #164]	@ (80012bc <StartDefaultTask+0x1e4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f004 ff20 	bl	8006060 <osMutexRelease>
              }
              // 发送确认信息
              char response[30];
              snprintf(response, sizeof(response), "Target Temp Set: %d C\r\n", tempValue);
 8001220:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001224:	f107 0008 	add.w	r0, r7, #8
 8001228:	4a26      	ldr	r2, [pc, #152]	@ (80012c4 <StartDefaultTask+0x1ec>)
 800122a:	211e      	movs	r1, #30
 800122c:	f007 fec4 	bl	8008fb8 <sniprintf>
              HAL_UART_Transmit(&huart2, (uint8_t*)response, strlen(response), 100);
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4618      	mov	r0, r3
 8001236:	f7fe ff8b 	bl	8000150 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f107 0108 	add.w	r1, r7, #8
 8001242:	2364      	movs	r3, #100	@ 0x64
 8001244:	4819      	ldr	r0, [pc, #100]	@ (80012ac <StartDefaultTask+0x1d4>)
 8001246:	f003 fd4f 	bl	8004ce8 <HAL_UART_Transmit>
                   commandBuffer[2] >= '0' && commandBuffer[2] <= '9') {
 800124a:	e00c      	b.n	8001266 <StartDefaultTask+0x18e>
            } else {
              // 温度超出范围
              HAL_UART_Transmit(&huart2, (uint8_t*)"Temp Out of Range (0-50)\r\n", 26, 100);
 800124c:	2364      	movs	r3, #100	@ 0x64
 800124e:	221a      	movs	r2, #26
 8001250:	491d      	ldr	r1, [pc, #116]	@ (80012c8 <StartDefaultTask+0x1f0>)
 8001252:	4816      	ldr	r0, [pc, #88]	@ (80012ac <StartDefaultTask+0x1d4>)
 8001254:	f003 fd48 	bl	8004ce8 <HAL_UART_Transmit>
                   commandBuffer[2] >= '0' && commandBuffer[2] <= '9') {
 8001258:	e005      	b.n	8001266 <StartDefaultTask+0x18e>
            }
          }
          else {
            // 无效命令
            HAL_UART_Transmit(&huart2, (uint8_t*)"Invalid command\r\n", 17, 100);
 800125a:	2364      	movs	r3, #100	@ 0x64
 800125c:	2211      	movs	r2, #17
 800125e:	491b      	ldr	r1, [pc, #108]	@ (80012cc <StartDefaultTask+0x1f4>)
 8001260:	4812      	ldr	r0, [pc, #72]	@ (80012ac <StartDefaultTask+0x1d4>)
 8001262:	f003 fd41 	bl	8004ce8 <HAL_UART_Transmit>
          }
          
          // 重置命令长度
          commandLength = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if (commandLength > 0) {
 800126c:	e012      	b.n	8001294 <StartDefaultTask+0x1bc>
        }
      }
      else if (commandLength < 9) {
 800126e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001272:	2b08      	cmp	r3, #8
 8001274:	d80b      	bhi.n	800128e <StartDefaultTask+0x1b6>
        // 添加字符到命令缓冲区
        commandBuffer[commandLength++] = rxBuffer[0];
 8001276:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800127a:	1c5a      	adds	r2, r3, #1
 800127c:	f887 2047 	strb.w	r2, [r7, #71]	@ 0x47
 8001280:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8001284:	3348      	adds	r3, #72	@ 0x48
 8001286:	443b      	add	r3, r7
 8001288:	f803 2c20 	strb.w	r2, [r3, #-32]
 800128c:	e002      	b.n	8001294 <StartDefaultTask+0x1bc>
      }
      else {
        // 缓冲区溢出，重置
        commandLength = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
      
      // 重新启动接收
      HAL_UART_Receive_DMA(&huart2, rxBuffer, 1);
 8001294:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001298:	2201      	movs	r2, #1
 800129a:	4619      	mov	r1, r3
 800129c:	4803      	ldr	r0, [pc, #12]	@ (80012ac <StartDefaultTask+0x1d4>)
 800129e:	f003 fdae 	bl	8004dfe <HAL_UART_Receive_DMA>
    }
    osDelay(10);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f004 fdf0 	bl	8005e88 <osDelay>
    if (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE)) {
 80012a8:	e724      	b.n	80010f4 <StartDefaultTask+0x1c>
 80012aa:	bf00      	nop
 80012ac:	2000069c 	.word	0x2000069c
 80012b0:	20000008 	.word	0x20000008
 80012b4:	08009af0 	.word	0x08009af0
 80012b8:	08009b00 	.word	0x08009b00
 80012bc:	2000050c 	.word	0x2000050c
 80012c0:	20000004 	.word	0x20000004
 80012c4:	08009b10 	.word	0x08009b10
 80012c8:	08009b28 	.word	0x08009b28
 80012cc:	08009b44 	.word	0x08009b44

080012d0 <StartTask02>:
  * @brief  ReadSensor_1任务函数
  * @param  argument: Not used
  * @retval None
  */
void StartTask02(void *argument)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  float temperature;
  osStatus_t status;
  
  // 初始化DS18B20温度传感器
  DS18B20_Init();
 80012d8:	f7ff faa8 	bl	800082c <DS18B20_Init>
  
  /* Infinite loop */
  for(;;)
  {
    // 读取温度传感器数据
    temperature = DS18B20_GetTemp();
 80012dc:	f7ff fba2 	bl	8000a24 <DS18B20_GetTemp>
 80012e0:	60f8      	str	r0, [r7, #12]
    
    // 检查温度读取是否有效
    if (!isnan(temperature)) {
 80012e2:	68f9      	ldr	r1, [r7, #12]
 80012e4:	68f8      	ldr	r0, [r7, #12]
 80012e6:	f7ff fa0f 	bl	8000708 <__aeabi_fcmpun>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d111      	bne.n	8001314 <StartTask02+0x44>
      // 获取互斥锁
      status = osMutexAcquire(temperatureMutexHandle, 100);
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <StartTask02+0x50>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2164      	movs	r1, #100	@ 0x64
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 fe67 	bl	8005fca <osMutexAcquire>
 80012fc:	60b8      	str	r0, [r7, #8]
      if (status == osOK) {
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d107      	bne.n	8001314 <StartTask02+0x44>
        // 更新全局温度变量
        currentTemperature = temperature;
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <StartTask02+0x54>)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	6013      	str	r3, [r2, #0]
        // 释放互斥锁
        osMutexRelease(temperatureMutexHandle);
 800130a:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <StartTask02+0x50>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f004 fea6 	bl	8006060 <osMutexRelease>
      }
    }
    
    // 每500ms读取一次温度
    osDelay(500);
 8001314:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001318:	f004 fdb6 	bl	8005e88 <osDelay>
    temperature = DS18B20_GetTemp();
 800131c:	e7de      	b.n	80012dc <StartTask02+0xc>
 800131e:	bf00      	nop
 8001320:	2000050c 	.word	0x2000050c
 8001324:	2000048c 	.word	0x2000048c

08001328 <StartTask03>:
  * @brief  WriteScreen_2任务函数
  * @param  argument: Not used
  * @retval None
  */
void StartTask03(void *argument)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af02      	add	r7, sp, #8
 800132e:	6078      	str	r0, [r7, #4]
  
  /* Infinite loop */
  for(;;)
  {
    // 获取互斥锁
    status = osMutexAcquire(temperatureMutexHandle, 100);
 8001330:	4b29      	ldr	r3, [pc, #164]	@ (80013d8 <StartTask03+0xb0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2164      	movs	r1, #100	@ 0x64
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fe47 	bl	8005fca <osMutexAcquire>
 800133c:	61b8      	str	r0, [r7, #24]
    if (status == osOK) {
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d144      	bne.n	80013ce <StartTask03+0xa6>
      // 读取全局变量
      localTemperature = currentTemperature;
 8001344:	4b25      	ldr	r3, [pc, #148]	@ (80013dc <StartTask03+0xb4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	617b      	str	r3, [r7, #20]
      localTecPower = tecPower;
 800134a:	4b25      	ldr	r3, [pc, #148]	@ (80013e0 <StartTask03+0xb8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	74fb      	strb	r3, [r7, #19]
      // 释放互斥锁
      osMutexRelease(temperatureMutexHandle);
 8001350:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <StartTask03+0xb0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fe83 	bl	8006060 <osMutexRelease>
      
      // 清除显示缓冲区
      CH1116_Clear();
 800135a:	f7ff fdb5 	bl	8000ec8 <CH1116_Clear>
      
      // 显示温度信息
      int tempIntPart = (int)localTemperature;
 800135e:	6978      	ldr	r0, [r7, #20]
 8001360:	f7ff f9e8 	bl	8000734 <__aeabi_f2iz>
 8001364:	4603      	mov	r3, r0
 8001366:	60fb      	str	r3, [r7, #12]
      int tempDecPart = (int)((localTemperature - tempIntPart) * 100);
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f7fe ffb3 	bl	80002d4 <__aeabi_i2f>
 800136e:	4603      	mov	r3, r0
 8001370:	4619      	mov	r1, r3
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7fe fef8 	bl	8000168 <__aeabi_fsub>
 8001378:	4603      	mov	r3, r0
 800137a:	491a      	ldr	r1, [pc, #104]	@ (80013e4 <StartTask03+0xbc>)
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe fffd 	bl	800037c <__aeabi_fmul>
 8001382:	4603      	mov	r3, r0
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f9d5 	bl	8000734 <__aeabi_f2iz>
 800138a:	4603      	mov	r3, r0
 800138c:	61fb      	str	r3, [r7, #28]
      if (tempDecPart < 0) tempDecPart = -tempDecPart; // 处理负数情况
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	2b00      	cmp	r3, #0
 8001392:	da02      	bge.n	800139a <StartTask03+0x72>
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	425b      	negs	r3, r3
 8001398:	61fb      	str	r3, [r7, #28]
      snprintf(displayBuffer, sizeof(displayBuffer), "Temp: %d.%02d C", tempIntPart, tempDecPart);
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <StartTask03+0xc0>)
 80013a2:	2140      	movs	r1, #64	@ 0x40
 80013a4:	4811      	ldr	r0, [pc, #68]	@ (80013ec <StartTask03+0xc4>)
 80013a6:	f007 fe07 	bl	8008fb8 <sniprintf>
      CH1116_PrintString(0, 0, displayBuffer);
 80013aa:	4a10      	ldr	r2, [pc, #64]	@ (80013ec <StartTask03+0xc4>)
 80013ac:	2100      	movs	r1, #0
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fce4 	bl	8000d7c <CH1116_PrintString>
      
      // 显示TEC功率信息
      snprintf(displayBuffer, sizeof(displayBuffer), "TEC Power: %d%%", localTecPower);
 80013b4:	7cfb      	ldrb	r3, [r7, #19]
 80013b6:	4a0e      	ldr	r2, [pc, #56]	@ (80013f0 <StartTask03+0xc8>)
 80013b8:	2140      	movs	r1, #64	@ 0x40
 80013ba:	480c      	ldr	r0, [pc, #48]	@ (80013ec <StartTask03+0xc4>)
 80013bc:	f007 fdfc 	bl	8008fb8 <sniprintf>
      CH1116_PrintString(2, 0, displayBuffer);
 80013c0:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <StartTask03+0xc4>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	2002      	movs	r0, #2
 80013c6:	f7ff fcd9 	bl	8000d7c <CH1116_PrintString>
      
      // 更新显示
      CH1116_Display();
 80013ca:	f7ff fd97 	bl	8000efc <CH1116_Display>
    }
    
    // 每1000ms更新一次显示
    osDelay(1000);
 80013ce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013d2:	f004 fd59 	bl	8005e88 <osDelay>
    status = osMutexAcquire(temperatureMutexHandle, 100);
 80013d6:	e7ab      	b.n	8001330 <StartTask03+0x8>
 80013d8:	2000050c 	.word	0x2000050c
 80013dc:	2000048c 	.word	0x2000048c
 80013e0:	20000490 	.word	0x20000490
 80013e4:	42c80000 	.word	0x42c80000
 80013e8:	08009b58 	.word	0x08009b58
 80013ec:	20000494 	.word	0x20000494
 80013f0:	08009b68 	.word	0x08009b68

080013f4 <StartTask04>:
  * @brief  TECControl_3任务函数
  * @param  argument: Not used
  * @retval None
  */
void StartTask04(void *argument)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  float pidOutput;
  uint8_t tecPowerValue;
  extern uint8_t tecEnabled; // 引用UserControl_0任务中的tecEnabled变量
  
  // 初始化PID控制器
  pidController.Kp = 2.0f;
 80013fc:	4b4a      	ldr	r3, [pc, #296]	@ (8001528 <StartTask04+0x134>)
 80013fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001402:	601a      	str	r2, [r3, #0]
  pidController.Ki = 0.5f;
 8001404:	4b48      	ldr	r3, [pc, #288]	@ (8001528 <StartTask04+0x134>)
 8001406:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800140a:	605a      	str	r2, [r3, #4]
  pidController.Kd = 0.1f;
 800140c:	4b46      	ldr	r3, [pc, #280]	@ (8001528 <StartTask04+0x134>)
 800140e:	4a47      	ldr	r2, [pc, #284]	@ (800152c <StartTask04+0x138>)
 8001410:	609a      	str	r2, [r3, #8]
  pidController.tau = 0.02f;
 8001412:	4b45      	ldr	r3, [pc, #276]	@ (8001528 <StartTask04+0x134>)
 8001414:	4a46      	ldr	r2, [pc, #280]	@ (8001530 <StartTask04+0x13c>)
 8001416:	60da      	str	r2, [r3, #12]
  pidController.limMin = 0.0f;
 8001418:	4b43      	ldr	r3, [pc, #268]	@ (8001528 <StartTask04+0x134>)
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
  pidController.limMax = 100.0f;
 8001420:	4b41      	ldr	r3, [pc, #260]	@ (8001528 <StartTask04+0x134>)
 8001422:	4a44      	ldr	r2, [pc, #272]	@ (8001534 <StartTask04+0x140>)
 8001424:	615a      	str	r2, [r3, #20]
  pidController.limMinInt = -100.0f;
 8001426:	4b40      	ldr	r3, [pc, #256]	@ (8001528 <StartTask04+0x134>)
 8001428:	4a43      	ldr	r2, [pc, #268]	@ (8001538 <StartTask04+0x144>)
 800142a:	619a      	str	r2, [r3, #24]
  pidController.limMaxInt = 100.0f;
 800142c:	4b3e      	ldr	r3, [pc, #248]	@ (8001528 <StartTask04+0x134>)
 800142e:	4a41      	ldr	r2, [pc, #260]	@ (8001534 <StartTask04+0x140>)
 8001430:	61da      	str	r2, [r3, #28]
  pidController.T = 0.5f; // 500ms采样周期
 8001432:	4b3d      	ldr	r3, [pc, #244]	@ (8001528 <StartTask04+0x134>)
 8001434:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 8001438:	621a      	str	r2, [r3, #32]
  PIDController_Init(&pidController);
 800143a:	483b      	ldr	r0, [pc, #236]	@ (8001528 <StartTask04+0x134>)
 800143c:	f7ff fb4a 	bl	8000ad4 <PIDController_Init>
  
  // 初始化TEC
  TEC_Init(&htim3, TIM_CHANNEL_2);
 8001440:	2104      	movs	r1, #4
 8001442:	483e      	ldr	r0, [pc, #248]	@ (800153c <StartTask04+0x148>)
 8001444:	f000 fba2 	bl	8001b8c <TEC_Init>
  TEC_Start();
 8001448:	f000 fbb8 	bl	8001bbc <TEC_Start>
  
  /* Infinite loop */
  for(;;)
  {
    // 检查TEC是否启用
    if (tecEnabled) {
 800144c:	4b3c      	ldr	r3, [pc, #240]	@ (8001540 <StartTask04+0x14c>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d04f      	beq.n	80014f4 <StartTask04+0x100>
      // 获取互斥锁
      status = osMutexAcquire(temperatureMutexHandle, 100);
 8001454:	4b3b      	ldr	r3, [pc, #236]	@ (8001544 <StartTask04+0x150>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2164      	movs	r1, #100	@ 0x64
 800145a:	4618      	mov	r0, r3
 800145c:	f004 fdb5 	bl	8005fca <osMutexAcquire>
 8001460:	6138      	str	r0, [r7, #16]
      if (status == osOK) {
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d15a      	bne.n	800151e <StartTask04+0x12a>
        // 读取全局变量
        localTemperature = currentTemperature;
 8001468:	4b37      	ldr	r3, [pc, #220]	@ (8001548 <StartTask04+0x154>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	60fb      	str	r3, [r7, #12]
        // 释放互斥锁
        osMutexRelease(temperatureMutexHandle);
 800146e:	4b35      	ldr	r3, [pc, #212]	@ (8001544 <StartTask04+0x150>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f004 fdf4 	bl	8006060 <osMutexRelease>
        
        // 检查目标温度是否高于当前温度（TEC只能冷却）
        if (targetTemperature >= localTemperature) {
 8001478:	4b34      	ldr	r3, [pc, #208]	@ (800154c <StartTask04+0x158>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f7ff f924 	bl	80006cc <__aeabi_fcmple>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <StartTask04+0xa2>
          // 目标温度高于或等于当前温度，TEC不工作
          TEC_SetPower(0);
 800148a:	2000      	movs	r0, #0
 800148c:	f000 fbc4 	bl	8001c18 <TEC_SetPower>
          tecPowerValue = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
 8001494:	e01b      	b.n	80014ce <StartTask04+0xda>
        } else {
          // 目标温度低于当前温度，使用PID控制器计算TEC功率
          pidOutput = PIDController_Update(&pidController, targetTemperature, localTemperature);
 8001496:	4b2d      	ldr	r3, [pc, #180]	@ (800154c <StartTask04+0x158>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	4619      	mov	r1, r3
 800149e:	4822      	ldr	r0, [pc, #136]	@ (8001528 <StartTask04+0x134>)
 80014a0:	f7ff fb35 	bl	8000b0e <PIDController_Update>
 80014a4:	60b8      	str	r0, [r7, #8]
          
          // 限制输出范围并转换为整数
          pidOutput = fmaxf(0.0f, fminf(100.0f, pidOutput));
 80014a6:	4923      	ldr	r1, [pc, #140]	@ (8001534 <StartTask04+0x140>)
 80014a8:	68b8      	ldr	r0, [r7, #8]
 80014aa:	f008 fabc 	bl	8009a26 <fminf>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f04f 0100 	mov.w	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f008 faa1 	bl	80099fc <fmaxf>
 80014ba:	60b8      	str	r0, [r7, #8]
          tecPowerValue = (uint8_t)pidOutput;
 80014bc:	68b8      	ldr	r0, [r7, #8]
 80014be:	f7ff f95f 	bl	8000780 <__aeabi_f2uiz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	75fb      	strb	r3, [r7, #23]
          
          // 设置TEC功率
          TEC_SetPower(tecPowerValue);
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fba5 	bl	8001c18 <TEC_SetPower>
        }
        
        // 更新全局TEC功率变量
        status = osMutexAcquire(temperatureMutexHandle, 100);
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <StartTask04+0x150>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2164      	movs	r1, #100	@ 0x64
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fd78 	bl	8005fca <osMutexAcquire>
 80014da:	6138      	str	r0, [r7, #16]
        if (status == osOK) {
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d11d      	bne.n	800151e <StartTask04+0x12a>
          tecPower = tecPowerValue;
 80014e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <StartTask04+0x15c>)
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	7013      	strb	r3, [r2, #0]
          osMutexRelease(temperatureMutexHandle);
 80014e8:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <StartTask04+0x150>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f004 fdb7 	bl	8006060 <osMutexRelease>
 80014f2:	e014      	b.n	800151e <StartTask04+0x12a>
        }
      }
    } else {
      // TEC未启用，确保功率为0
      TEC_SetPower(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 fb8f 	bl	8001c18 <TEC_SetPower>
      // 更新全局TEC功率变量
      status = osMutexAcquire(temperatureMutexHandle, 100);
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <StartTask04+0x150>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	2164      	movs	r1, #100	@ 0x64
 8001500:	4618      	mov	r0, r3
 8001502:	f004 fd62 	bl	8005fca <osMutexAcquire>
 8001506:	6138      	str	r0, [r7, #16]
      if (status == osOK) {
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d107      	bne.n	800151e <StartTask04+0x12a>
        tecPower = 0;
 800150e:	4b10      	ldr	r3, [pc, #64]	@ (8001550 <StartTask04+0x15c>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
        osMutexRelease(temperatureMutexHandle);
 8001514:	4b0b      	ldr	r3, [pc, #44]	@ (8001544 <StartTask04+0x150>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4618      	mov	r0, r3
 800151a:	f004 fda1 	bl	8006060 <osMutexRelease>
      }
    }
    
    // 每500ms调整一次TEC功率
    osDelay(500);
 800151e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001522:	f004 fcb1 	bl	8005e88 <osDelay>
    if (tecEnabled) {
 8001526:	e791      	b.n	800144c <StartTask04+0x58>
 8001528:	200004d4 	.word	0x200004d4
 800152c:	3dcccccd 	.word	0x3dcccccd
 8001530:	3ca3d70a 	.word	0x3ca3d70a
 8001534:	42c80000 	.word	0x42c80000
 8001538:	c2c80000 	.word	0xc2c80000
 800153c:	20000654 	.word	0x20000654
 8001540:	20000008 	.word	0x20000008
 8001544:	2000050c 	.word	0x2000050c
 8001548:	2000048c 	.word	0x2000048c
 800154c:	20000004 	.word	0x20000004
 8001550:	20000490 	.word	0x20000490

08001554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001568:	4b1d      	ldr	r3, [pc, #116]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	4a1c      	ldr	r2, [pc, #112]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 800156e:	f043 0320 	orr.w	r3, r3, #32
 8001572:	6193      	str	r3, [r2, #24]
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b17      	ldr	r3, [pc, #92]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a16      	ldr	r2, [pc, #88]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b14      	ldr	r3, [pc, #80]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b11      	ldr	r3, [pc, #68]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a10      	ldr	r2, [pc, #64]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <MX_GPIO_Init+0x8c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2101      	movs	r1, #1
 80015b4:	480b      	ldr	r0, [pc, #44]	@ (80015e4 <MX_GPIO_Init+0x90>)
 80015b6:	f001 fa8a 	bl	8002ace <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 80015ba:	2301      	movs	r3, #1
 80015bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015be:	2311      	movs	r3, #17
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c6:	2302      	movs	r3, #2
 80015c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	4619      	mov	r1, r3
 80015d0:	4804      	ldr	r0, [pc, #16]	@ (80015e4 <MX_GPIO_Init+0x90>)
 80015d2:	f001 f8e1 	bl	8002798 <HAL_GPIO_Init>

}
 80015d6:	bf00      	nop
 80015d8:	3720      	adds	r7, #32
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010800 	.word	0x40010800

080015e8 <MX_I2C2_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <MX_I2C2_Init+0x50>)
 80015ee:	4a13      	ldr	r2, [pc, #76]	@ (800163c <MX_I2C2_Init+0x54>)
 80015f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <MX_I2C2_Init+0x50>)
 80015f4:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <MX_I2C2_Init+0x58>)
 80015f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <MX_I2C2_Init+0x50>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <MX_I2C2_Init+0x50>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <MX_I2C2_Init+0x50>)
 8001606:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800160a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800160c:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <MX_I2C2_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001612:	4b09      	ldr	r3, [pc, #36]	@ (8001638 <MX_I2C2_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001618:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <MX_I2C2_Init+0x50>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <MX_I2C2_Init+0x50>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	@ (8001638 <MX_I2C2_Init+0x50>)
 8001626:	f001 fa6b 	bl	8002b00 <HAL_I2C_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001630:	f000 f95e 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000520 	.word	0x20000520
 800163c:	40005800 	.word	0x40005800
 8001640:	00061a80 	.word	0x00061a80

08001644 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b088      	sub	sp, #32
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800164c:	f107 0310 	add.w	r3, r7, #16
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	605a      	str	r2, [r3, #4]
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a3c      	ldr	r2, [pc, #240]	@ (8001750 <HAL_I2C_MspInit+0x10c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d170      	bne.n	8001746 <HAL_I2C_MspInit+0x102>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001664:	4b3b      	ldr	r3, [pc, #236]	@ (8001754 <HAL_I2C_MspInit+0x110>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	4a3a      	ldr	r2, [pc, #232]	@ (8001754 <HAL_I2C_MspInit+0x110>)
 800166a:	f043 0308 	orr.w	r3, r3, #8
 800166e:	6193      	str	r3, [r2, #24]
 8001670:	4b38      	ldr	r3, [pc, #224]	@ (8001754 <HAL_I2C_MspInit+0x110>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	f003 0308 	and.w	r3, r3, #8
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800167c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001680:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001682:	2312      	movs	r3, #18
 8001684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001686:	2303      	movs	r3, #3
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0310 	add.w	r3, r7, #16
 800168e:	4619      	mov	r1, r3
 8001690:	4831      	ldr	r0, [pc, #196]	@ (8001758 <HAL_I2C_MspInit+0x114>)
 8001692:	f001 f881 	bl	8002798 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001696:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_I2C_MspInit+0x110>)
 8001698:	69db      	ldr	r3, [r3, #28]
 800169a:	4a2e      	ldr	r2, [pc, #184]	@ (8001754 <HAL_I2C_MspInit+0x110>)
 800169c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80016a0:	61d3      	str	r3, [r2, #28]
 80016a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001754 <HAL_I2C_MspInit+0x110>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 DMA Init */
    /* I2C2_RX Init */
    hdma_i2c2_rx.Instance = DMA1_Channel5;
 80016ae:	4b2b      	ldr	r3, [pc, #172]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001760 <HAL_I2C_MspInit+0x11c>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b4:	4b29      	ldr	r3, [pc, #164]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ba:	4b28      	ldr	r3, [pc, #160]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016c0:	4b26      	ldr	r3, [pc, #152]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c6:	4b25      	ldr	r3, [pc, #148]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016d8:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80016de:	481f      	ldr	r0, [pc, #124]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016e0:	f000 fdb8 	bl	8002254 <HAL_DMA_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <HAL_I2C_MspInit+0xaa>
    {
      Error_Handler();
 80016ea:	f000 f901 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a1a      	ldr	r2, [pc, #104]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80016f4:	4a19      	ldr	r2, [pc, #100]	@ (800175c <HAL_I2C_MspInit+0x118>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* I2C2_TX Init */
    hdma_i2c2_tx.Instance = DMA1_Channel4;
 80016fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 80016fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001768 <HAL_I2C_MspInit+0x124>)
 80016fe:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001700:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 8001702:	2210      	movs	r2, #16
 8001704:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 800170e:	2280      	movs	r2, #128	@ 0x80
 8001710:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001712:	4b14      	ldr	r3, [pc, #80]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001718:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001724:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 800172a:	480e      	ldr	r0, [pc, #56]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 800172c:	f000 fd92 	bl	8002254 <HAL_DMA_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_MspInit+0xf6>
    {
      Error_Handler();
 8001736:	f000 f8db 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 800173e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001740:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <HAL_I2C_MspInit+0x120>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001746:	bf00      	nop
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40005800 	.word	0x40005800
 8001754:	40021000 	.word	0x40021000
 8001758:	40010c00 	.word	0x40010c00
 800175c:	20000574 	.word	0x20000574
 8001760:	40020058 	.word	0x40020058
 8001764:	200005b8 	.word	0x200005b8
 8001768:	40020044 	.word	0x40020044

0800176c <DS18B20_Delay_us>:
    DWT->CYCCNT = 0;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void DS18B20_Delay_us(uint32_t us)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
    uint32_t start = DWT->CYCCNT;
 8001774:	4b0d      	ldr	r3, [pc, #52]	@ (80017ac <DS18B20_Delay_us+0x40>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	60fb      	str	r3, [r7, #12]
    uint32_t cycles = us * (SystemCoreClock / 1000000);
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <DS18B20_Delay_us+0x44>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <DS18B20_Delay_us+0x48>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	0c9a      	lsrs	r2, r3, #18
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	fb02 f303 	mul.w	r3, r2, r3
 800178c:	60bb      	str	r3, [r7, #8]
    while ((DWT->CYCCNT - start) < cycles);
 800178e:	bf00      	nop
 8001790:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <DS18B20_Delay_us+0x40>)
 8001792:	685a      	ldr	r2, [r3, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	68ba      	ldr	r2, [r7, #8]
 800179a:	429a      	cmp	r2, r3
 800179c:	d8f8      	bhi.n	8001790 <DS18B20_Delay_us+0x24>
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e0001000 	.word	0xe0001000
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	431bde83 	.word	0x431bde83

080017b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017be:	f000 fc13 	bl	8001fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017c2:	f000 f83d 	bl	8001840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c6:	f7ff fec5 	bl	8001554 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ca:	f7ff fc09 	bl	8000fe0 <MX_DMA_Init>
  MX_I2C2_Init();
 80017ce:	f7ff ff0b 	bl	80015e8 <MX_I2C2_Init>
  MX_TIM3_Init();
 80017d2:	f000 fa67 	bl	8001ca4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80017d6:	f000 fb0f 	bl	8001df8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize CH1116 OLED display
  CH1116_Init();
 80017da:	f7ff fb31 	bl	8000e40 <CH1116_Init>
  
  // Display a test pattern
  CH1116_Clear();
 80017de:	f7ff fb73 	bl	8000ec8 <CH1116_Clear>
  CH1116_Fill(1);
 80017e2:	2001      	movs	r0, #1
 80017e4:	f7ff fbda 	bl	8000f9c <CH1116_Fill>
  CH1116_Display();
 80017e8:	f7ff fb88 	bl	8000efc <CH1116_Display>
  HAL_Delay(1000);
 80017ec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017f0:	f000 fc2c 	bl	800204c <HAL_Delay>
  
  CH1116_Clear();
 80017f4:	f7ff fb68 	bl	8000ec8 <CH1116_Clear>
  CH1116_Display();
 80017f8:	f7ff fb80 	bl	8000efc <CH1116_Display>
  
  // Initialize TEC
  TEC_Init(&htim3, TIM_CHANNEL_2);
 80017fc:	2104      	movs	r1, #4
 80017fe:	480f      	ldr	r0, [pc, #60]	@ (800183c <main+0x84>)
 8001800:	f000 f9c4 	bl	8001b8c <TEC_Init>
  TEC_Start();
 8001804:	f000 f9da 	bl	8001bbc <TEC_Start>
  
  // Test TEC with varying power levels
  for (int i = 0; i <= 100; i += 10) {
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	e00a      	b.n	8001824 <main+0x6c>
    TEC_SetPower(i);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fa00 	bl	8001c18 <TEC_SetPower>
    HAL_Delay(200);
 8001818:	20c8      	movs	r0, #200	@ 0xc8
 800181a:	f000 fc17 	bl	800204c <HAL_Delay>
  for (int i = 0; i <= 100; i += 10) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	330a      	adds	r3, #10
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b64      	cmp	r3, #100	@ 0x64
 8001828:	ddf1      	ble.n	800180e <main+0x56>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800182a:	f004 fa53 	bl	8005cd4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800182e:	f7ff fc0d 	bl	800104c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001832:	f004 fa71 	bl	8005d18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001836:	bf00      	nop
 8001838:	e7fd      	b.n	8001836 <main+0x7e>
 800183a:	bf00      	nop
 800183c:	20000654 	.word	0x20000654

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b090      	sub	sp, #64	@ 0x40
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	2228      	movs	r2, #40	@ 0x28
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f007 fbe8 	bl	8009024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001862:	2301      	movs	r3, #1
 8001864:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001866:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800186a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001870:	2301      	movs	r3, #1
 8001872:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001874:	2302      	movs	r3, #2
 8001876:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001878:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800187c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800187e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001882:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	4618      	mov	r0, r3
 800188a:	f001 ff3d 	bl	8003708 <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001894:	f000 f82c 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001898:	230f      	movs	r3, #15
 800189a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189c:	2302      	movs	r3, #2
 800189e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f002 f9aa 	bl	8003c0c <HAL_RCC_ClockConfig>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80018be:	f000 f817 	bl	80018f0 <Error_Handler>
  }
}
 80018c2:	bf00      	nop
 80018c4:	3740      	adds	r7, #64	@ 0x40
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a04      	ldr	r2, [pc, #16]	@ (80018ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80018de:	f000 fb99 	bl	8002014 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40000800 	.word	0x40000800

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	bf00      	nop
 80018fa:	e7fd      	b.n	80018f8 <Error_Handler+0x8>

080018fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001902:	4b18      	ldr	r3, [pc, #96]	@ (8001964 <HAL_MspInit+0x68>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	4a17      	ldr	r2, [pc, #92]	@ (8001964 <HAL_MspInit+0x68>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b15      	ldr	r3, [pc, #84]	@ (8001964 <HAL_MspInit+0x68>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800191a:	4b12      	ldr	r3, [pc, #72]	@ (8001964 <HAL_MspInit+0x68>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a11      	ldr	r2, [pc, #68]	@ (8001964 <HAL_MspInit+0x68>)
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b0f      	ldr	r3, [pc, #60]	@ (8001964 <HAL_MspInit+0x68>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	210f      	movs	r1, #15
 8001936:	f06f 0001 	mvn.w	r0, #1
 800193a:	f000 fc60 	bl	80021fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800193e:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <HAL_MspInit+0x6c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <HAL_MspInit+0x6c>)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000

0800196c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08e      	sub	sp, #56	@ 0x38
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001982:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <HAL_InitTick+0xe8>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a33      	ldr	r2, [pc, #204]	@ (8001a54 <HAL_InitTick+0xe8>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <HAL_InitTick+0xe8>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800199a:	f107 0210 	add.w	r2, r7, #16
 800199e:	f107 0314 	add.w	r3, r7, #20
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f002 faa1 	bl	8003eec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80019aa:	6a3b      	ldr	r3, [r7, #32]
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d103      	bne.n	80019bc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019b4:	f002 fa72 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80019b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80019ba:	e004      	b.n	80019c6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80019bc:	f002 fa6e 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 80019c0:	4603      	mov	r3, r0
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80019c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80019c8:	4a23      	ldr	r2, [pc, #140]	@ (8001a58 <HAL_InitTick+0xec>)
 80019ca:	fba2 2303 	umull	r2, r3, r2, r3
 80019ce:	0c9b      	lsrs	r3, r3, #18
 80019d0:	3b01      	subs	r3, #1
 80019d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80019d4:	4b21      	ldr	r3, [pc, #132]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019d6:	4a22      	ldr	r2, [pc, #136]	@ (8001a60 <HAL_InitTick+0xf4>)
 80019d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019e0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80019e2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ee:	4b1b      	ldr	r3, [pc, #108]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80019fa:	4818      	ldr	r0, [pc, #96]	@ (8001a5c <HAL_InitTick+0xf0>)
 80019fc:	f002 fac4 	bl	8003f88 <HAL_TIM_Base_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d11b      	bne.n	8001a46 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001a0e:	4813      	ldr	r0, [pc, #76]	@ (8001a5c <HAL_InitTick+0xf0>)
 8001a10:	f002 fb12 	bl	8004038 <HAL_TIM_Base_Start_IT>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001a1a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d111      	bne.n	8001a46 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a22:	201e      	movs	r0, #30
 8001a24:	f000 fc07 	bl	8002236 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b0f      	cmp	r3, #15
 8001a2c:	d808      	bhi.n	8001a40 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001a2e:	2200      	movs	r2, #0
 8001a30:	6879      	ldr	r1, [r7, #4]
 8001a32:	201e      	movs	r0, #30
 8001a34:	f000 fbe3 	bl	80021fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a38:	4a0a      	ldr	r2, [pc, #40]	@ (8001a64 <HAL_InitTick+0xf8>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e002      	b.n	8001a46 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a46:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3738      	adds	r7, #56	@ 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	431bde83 	.word	0x431bde83
 8001a5c:	200005fc 	.word	0x200005fc
 8001a60:	40000800 	.word	0x40000800
 8001a64:	20000010 	.word	0x20000010

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a6c:	bf00      	nop
 8001a6e:	e7fd      	b.n	8001a6c <NMI_Handler+0x4>

08001a70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a74:	bf00      	nop
 8001a76:	e7fd      	b.n	8001a74 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	bf00      	nop
 8001a7e:	e7fd      	b.n	8001a7c <MemManage_Handler+0x4>

08001a80 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a84:	bf00      	nop
 8001a86:	e7fd      	b.n	8001a84 <BusFault_Handler+0x4>

08001a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a8c:	bf00      	nop
 8001a8e:	e7fd      	b.n	8001a8c <UsageFault_Handler+0x4>

08001a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001aa0:	4802      	ldr	r0, [pc, #8]	@ (8001aac <DMA1_Channel4_IRQHandler+0x10>)
 8001aa2:	f000 fd45 	bl	8002530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	200005b8 	.word	0x200005b8

08001ab0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001ab4:	4802      	ldr	r0, [pc, #8]	@ (8001ac0 <DMA1_Channel5_IRQHandler+0x10>)
 8001ab6:	f000 fd3b 	bl	8002530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000574 	.word	0x20000574

08001ac4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001ac8:	4802      	ldr	r0, [pc, #8]	@ (8001ad4 <DMA1_Channel6_IRQHandler+0x10>)
 8001aca:	f000 fd31 	bl	8002530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200006e4 	.word	0x200006e4

08001ad8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001adc:	4802      	ldr	r0, [pc, #8]	@ (8001ae8 <DMA1_Channel7_IRQHandler+0x10>)
 8001ade:	f000 fd27 	bl	8002530 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000728 	.word	0x20000728

08001aec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <TIM4_IRQHandler+0x10>)
 8001af2:	f002 fc49 	bl	8004388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200005fc 	.word	0x200005fc

08001b00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <USART2_IRQHandler+0x10>)
 8001b06:	f003 f99f 	bl	8004e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	2000069c 	.word	0x2000069c

08001b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b1c:	4a14      	ldr	r2, [pc, #80]	@ (8001b70 <_sbrk+0x5c>)
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <_sbrk+0x60>)
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b28:	4b13      	ldr	r3, [pc, #76]	@ (8001b78 <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d102      	bne.n	8001b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b30:	4b11      	ldr	r3, [pc, #68]	@ (8001b78 <_sbrk+0x64>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	@ (8001b7c <_sbrk+0x68>)
 8001b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b36:	4b10      	ldr	r3, [pc, #64]	@ (8001b78 <_sbrk+0x64>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d207      	bcs.n	8001b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b44:	f007 fad4 	bl	80090f0 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b52:	e009      	b.n	8001b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b54:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5a:	4b07      	ldr	r3, [pc, #28]	@ (8001b78 <_sbrk+0x64>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4413      	add	r3, r2
 8001b62:	4a05      	ldr	r2, [pc, #20]	@ (8001b78 <_sbrk+0x64>)
 8001b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b66:	68fb      	ldr	r3, [r7, #12]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20005000 	.word	0x20005000
 8001b74:	00000400 	.word	0x00000400
 8001b78:	20000644 	.word	0x20000644
 8001b7c:	200022a0 	.word	0x200022a0

08001b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <TEC_Init>:
  * @param  htim: PWM定时器句柄
  * @param  channel: PWM通道
  * @retval None
  */
void TEC_Init(TIM_HandleTypeDef* htim, uint32_t channel)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 2 */
    htec.timHandle = htim;
 8001b96:	4a08      	ldr	r2, [pc, #32]	@ (8001bb8 <TEC_Init+0x2c>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6013      	str	r3, [r2, #0]
    htec.channel = channel;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	@ (8001bb8 <TEC_Init+0x2c>)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	6053      	str	r3, [r2, #4]
    htec.state = TEC_STATE_STOP;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <TEC_Init+0x2c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	721a      	strb	r2, [r3, #8]
    htec.duty = 0;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	@ (8001bb8 <TEC_Init+0x2c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	725a      	strb	r2, [r3, #9]
    /* USER CODE END 2 */
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	20000648 	.word	0x20000648

08001bbc <TEC_Start>:
  * @brief  启动TEC制冷
  * @param  None
  * @retval None
  */
void TEC_Start(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    if (htec.state == TEC_STATE_STOP) {
 8001bc0:	4b08      	ldr	r3, [pc, #32]	@ (8001be4 <TEC_Start+0x28>)
 8001bc2:	7a1b      	ldrb	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d10a      	bne.n	8001bde <TEC_Start+0x22>
        HAL_TIM_PWM_Start(htec.timHandle, htec.channel);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <TEC_Start+0x28>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <TEC_Start+0x28>)
 8001bce:	6852      	ldr	r2, [r2, #4]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 fad2 	bl	800417c <HAL_TIM_PWM_Start>
        htec.state = TEC_STATE_RUNNING;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	@ (8001be4 <TEC_Start+0x28>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	721a      	strb	r2, [r3, #8]
    }
    /* USER CODE END 3 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20000648 	.word	0x20000648

08001be8 <TEC_Stop>:
  * @brief  停止TEC制冷
  * @param  None
  * @retval None
  */
void TEC_Stop(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 4 */
    if (htec.state == TEC_STATE_RUNNING) {
 8001bec:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <TEC_Stop+0x2c>)
 8001bee:	7a1b      	ldrb	r3, [r3, #8]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d10d      	bne.n	8001c10 <TEC_Stop+0x28>
        HAL_TIM_PWM_Stop(htec.timHandle, htec.channel);
 8001bf4:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <TEC_Stop+0x2c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a06      	ldr	r2, [pc, #24]	@ (8001c14 <TEC_Stop+0x2c>)
 8001bfa:	6852      	ldr	r2, [r2, #4]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f002 fb5e 	bl	80042c0 <HAL_TIM_PWM_Stop>
        htec.state = TEC_STATE_STOP;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <TEC_Stop+0x2c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	721a      	strb	r2, [r3, #8]
        htec.duty = 0;
 8001c0a:	4b02      	ldr	r3, [pc, #8]	@ (8001c14 <TEC_Stop+0x2c>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	725a      	strb	r2, [r3, #9]
    }
    /* USER CODE END 4 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000648 	.word	0x20000648

08001c18 <TEC_SetPower>:
  * @brief  设置TEC制冷功率
  * @param  duty: 占空比 (0-100)
  * @retval None
  */
void TEC_SetPower(uint8_t duty)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN 5 */
    if (duty > 100) {
 8001c22:	79fb      	ldrb	r3, [r7, #7]
 8001c24:	2b64      	cmp	r3, #100	@ 0x64
 8001c26:	d901      	bls.n	8001c2c <TEC_SetPower+0x14>
        duty = 100;
 8001c28:	2364      	movs	r3, #100	@ 0x64
 8001c2a:	71fb      	strb	r3, [r7, #7]
    }
    
    htec.duty = duty;
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
 8001c30:	7253      	strb	r3, [r2, #9]
    
    // 计算比较值
    uint32_t pulse = (htec.timHandle->Init.Period + 1) * duty / 100;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	79fa      	ldrb	r2, [r7, #7]
 8001c3c:	fb02 f303 	mul.w	r3, r2, r3
 8001c40:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <TEC_SetPower+0x88>)
 8001c42:	fba2 2303 	umull	r2, r3, r2, r3
 8001c46:	095b      	lsrs	r3, r3, #5
 8001c48:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <TEC_SetPower+0x46>
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	635a      	str	r2, [r3, #52]	@ 0x34
    /* USER CODE END 5 */
}
 8001c5c:	e018      	b.n	8001c90 <TEC_SetPower+0x78>
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b04      	cmp	r3, #4
 8001c64:	d105      	bne.n	8001c72 <TEC_SetPower+0x5a>
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001c70:	e00e      	b.n	8001c90 <TEC_SetPower+0x78>
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 8001c72:	4b0a      	ldr	r3, [pc, #40]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d105      	bne.n	8001c86 <TEC_SetPower+0x6e>
 8001c7a:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001c84:	e004      	b.n	8001c90 <TEC_SetPower+0x78>
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <TEC_SetPower+0x84>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001c90:	bf00      	nop
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bc80      	pop	{r7}
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	20000648 	.word	0x20000648
 8001ca0:	51eb851f 	.word	0x51eb851f

08001ca4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	@ 0x28
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]
 8001cc2:	615a      	str	r2, [r3, #20]
 8001cc4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cc6:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001cc8:	4a22      	ldr	r2, [pc, #136]	@ (8001d54 <MX_TIM3_Init+0xb0>)
 8001cca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001ccc:	4b20      	ldr	r3, [pc, #128]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001cce:	2247      	movs	r2, #71	@ 0x47
 8001cd0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001cda:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cde:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cec:	4818      	ldr	r0, [pc, #96]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001cee:	f002 f9f5 	bl	80040dc <HAL_TIM_PWM_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001cf8:	f7ff fdfa 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d04:	f107 0320 	add.w	r3, r7, #32
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4811      	ldr	r0, [pc, #68]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001d0c:	f002 ff2c 	bl	8004b68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001d16:	f7ff fdeb 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d1a:	2360      	movs	r3, #96	@ 0x60
 8001d1c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	2204      	movs	r2, #4
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001d32:	f002 fc19 	bl	8004568 <HAL_TIM_PWM_ConfigChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001d3c:	f7ff fdd8 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d40:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <MX_TIM3_Init+0xac>)
 8001d42:	f000 f827 	bl	8001d94 <HAL_TIM_MspPostInit>

}
 8001d46:	bf00      	nop
 8001d48:	3728      	adds	r7, #40	@ 0x28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	20000654 	.word	0x20000654
 8001d54:	40000400 	.word	0x40000400

08001d58 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a09      	ldr	r2, [pc, #36]	@ (8001d8c <HAL_TIM_PWM_MspInit+0x34>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10b      	bne.n	8001d82 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d6a:	4b09      	ldr	r3, [pc, #36]	@ (8001d90 <HAL_TIM_PWM_MspInit+0x38>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	4a08      	ldr	r2, [pc, #32]	@ (8001d90 <HAL_TIM_PWM_MspInit+0x38>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	61d3      	str	r3, [r2, #28]
 8001d76:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_TIM_PWM_MspInit+0x38>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40021000 	.word	0x40021000

08001d94 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b088      	sub	sp, #32
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0f      	ldr	r2, [pc, #60]	@ (8001dec <HAL_TIM_MspPostInit+0x58>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d117      	bne.n	8001de4 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	4b0e      	ldr	r3, [pc, #56]	@ (8001df0 <HAL_TIM_MspPostInit+0x5c>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <HAL_TIM_MspPostInit+0x5c>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6193      	str	r3, [r2, #24]
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <HAL_TIM_MspPostInit+0x5c>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001dcc:	2380      	movs	r3, #128	@ 0x80
 8001dce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd8:	f107 0310 	add.w	r3, r7, #16
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <HAL_TIM_MspPostInit+0x60>)
 8001de0:	f000 fcda 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001de4:	bf00      	nop
 8001de6:	3720      	adds	r7, #32
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40010800 	.word	0x40010800

08001df8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001dfe:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <MX_USART2_UART_Init+0x50>)
 8001e00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e16:	4b0b      	ldr	r3, [pc, #44]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e1e:	220c      	movs	r2, #12
 8001e20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e22:	4b08      	ldr	r3, [pc, #32]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_USART2_UART_Init+0x4c>)
 8001e30:	f002 ff0a 	bl	8004c48 <HAL_UART_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e3a:	f7ff fd59 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000069c 	.word	0x2000069c
 8001e48:	40004400 	.word	0x40004400

08001e4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a46      	ldr	r2, [pc, #280]	@ (8001f80 <HAL_UART_MspInit+0x134>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	f040 8084 	bne.w	8001f76 <HAL_UART_MspInit+0x12a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6e:	4b45      	ldr	r3, [pc, #276]	@ (8001f84 <HAL_UART_MspInit+0x138>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	4a44      	ldr	r2, [pc, #272]	@ (8001f84 <HAL_UART_MspInit+0x138>)
 8001e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e78:	61d3      	str	r3, [r2, #28]
 8001e7a:	4b42      	ldr	r3, [pc, #264]	@ (8001f84 <HAL_UART_MspInit+0x138>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b3f      	ldr	r3, [pc, #252]	@ (8001f84 <HAL_UART_MspInit+0x138>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f84 <HAL_UART_MspInit+0x138>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b3c      	ldr	r3, [pc, #240]	@ (8001f84 <HAL_UART_MspInit+0x138>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4835      	ldr	r0, [pc, #212]	@ (8001f88 <HAL_UART_MspInit+0x13c>)
 8001eb2:	f000 fc71 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0310 	add.w	r3, r7, #16
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	482f      	ldr	r0, [pc, #188]	@ (8001f88 <HAL_UART_MspInit+0x13c>)
 8001eca:	f000 fc65 	bl	8002798 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ece:	4b2f      	ldr	r3, [pc, #188]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001ed0:	4a2f      	ldr	r2, [pc, #188]	@ (8001f90 <HAL_UART_MspInit+0x144>)
 8001ed2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eda:	4b2c      	ldr	r3, [pc, #176]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001ee2:	2280      	movs	r2, #128	@ 0x80
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ee6:	4b29      	ldr	r3, [pc, #164]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eec:	4b27      	ldr	r3, [pc, #156]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001ef2:	4b26      	ldr	r3, [pc, #152]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001efe:	4823      	ldr	r0, [pc, #140]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001f00:	f000 f9a8 	bl	8002254 <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001f0a:	f7ff fcf1 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001f12:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f14:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <HAL_UART_MspInit+0x140>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <HAL_UART_MspInit+0x14c>)
 8001f1e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f20:	4b1c      	ldr	r3, [pc, #112]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f22:	2210      	movs	r2, #16
 8001f24:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f26:	4b1b      	ldr	r3, [pc, #108]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f2e:	2280      	movs	r2, #128	@ 0x80
 8001f30:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f32:	4b18      	ldr	r3, [pc, #96]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f38:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f44:	4b13      	ldr	r3, [pc, #76]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f4a:	4812      	ldr	r0, [pc, #72]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f4c:	f000 f982 	bl	8002254 <HAL_DMA_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001f56:	f7ff fccb 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f60:	4a0c      	ldr	r2, [pc, #48]	@ (8001f94 <HAL_UART_MspInit+0x148>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001f66:	2200      	movs	r2, #0
 8001f68:	2105      	movs	r1, #5
 8001f6a:	2026      	movs	r0, #38	@ 0x26
 8001f6c:	f000 f947 	bl	80021fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f70:	2026      	movs	r0, #38	@ 0x26
 8001f72:	f000 f960 	bl	8002236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f76:	bf00      	nop
 8001f78:	3720      	adds	r7, #32
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40004400 	.word	0x40004400
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010800 	.word	0x40010800
 8001f8c:	200006e4 	.word	0x200006e4
 8001f90:	4002006c 	.word	0x4002006c
 8001f94:	20000728 	.word	0x20000728
 8001f98:	40020080 	.word	0x40020080

08001f9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f9c:	f7ff fdf0 	bl	8001b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa0:	480b      	ldr	r0, [pc, #44]	@ (8001fd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001fa2:	490c      	ldr	r1, [pc, #48]	@ (8001fd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8001fd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a09      	ldr	r2, [pc, #36]	@ (8001fdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fb8:	4c09      	ldr	r4, [pc, #36]	@ (8001fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc6:	f007 f899 	bl	80090fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fca:	f7ff fbf5 	bl	80017b8 <main>
  bx lr
 8001fce:	4770      	bx	lr
  ldr r0, =_sdata
 8001fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001fd8:	08009e7c 	.word	0x08009e7c
  ldr r2, =_sbss
 8001fdc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001fe0:	200022a0 	.word	0x200022a0

08001fe4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe4:	e7fe      	b.n	8001fe4 <ADC1_2_IRQHandler>
	...

08001fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <HAL_Init+0x28>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a07      	ldr	r2, [pc, #28]	@ (8002010 <HAL_Init+0x28>)
 8001ff2:	f043 0310 	orr.w	r3, r3, #16
 8001ff6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff8:	2003      	movs	r0, #3
 8001ffa:	f000 f8f5 	bl	80021e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffe:	200f      	movs	r0, #15
 8002000:	f7ff fcb4 	bl	800196c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002004:	f7ff fc7a 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000

08002014 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002018:	4b05      	ldr	r3, [pc, #20]	@ (8002030 <HAL_IncTick+0x1c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b05      	ldr	r3, [pc, #20]	@ (8002034 <HAL_IncTick+0x20>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a03      	ldr	r2, [pc, #12]	@ (8002034 <HAL_IncTick+0x20>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	20000014 	.word	0x20000014
 8002034:	2000076c 	.word	0x2000076c

08002038 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return uwTick;
 800203c:	4b02      	ldr	r3, [pc, #8]	@ (8002048 <HAL_GetTick+0x10>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	2000076c 	.word	0x2000076c

0800204c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002054:	f7ff fff0 	bl	8002038 <HAL_GetTick>
 8002058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d005      	beq.n	8002072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002066:	4b0a      	ldr	r3, [pc, #40]	@ (8002090 <HAL_Delay+0x44>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4413      	add	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002072:	bf00      	nop
 8002074:	f7ff ffe0 	bl	8002038 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	68fa      	ldr	r2, [r7, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d8f7      	bhi.n	8002074 <HAL_Delay+0x28>
  {
  }
}
 8002084:	bf00      	nop
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000014 	.word	0x20000014

08002094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80020b0:	4013      	ands	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <__NVIC_SetPriorityGrouping+0x44>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e0:	4b04      	ldr	r3, [pc, #16]	@ (80020f4 <__NVIC_GetPriorityGrouping+0x18>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	f003 0307 	and.w	r3, r3, #7
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000ed00 	.word	0xe000ed00

080020f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	2b00      	cmp	r3, #0
 8002108:	db0b      	blt.n	8002122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	f003 021f 	and.w	r2, r3, #31
 8002110:	4906      	ldr	r1, [pc, #24]	@ (800212c <__NVIC_EnableIRQ+0x34>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	095b      	lsrs	r3, r3, #5
 8002118:	2001      	movs	r0, #1
 800211a:	fa00 f202 	lsl.w	r2, r0, r2
 800211e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	e000e100 	.word	0xe000e100

08002130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	6039      	str	r1, [r7, #0]
 800213a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800213c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002140:	2b00      	cmp	r3, #0
 8002142:	db0a      	blt.n	800215a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2da      	uxtb	r2, r3
 8002148:	490c      	ldr	r1, [pc, #48]	@ (800217c <__NVIC_SetPriority+0x4c>)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	0112      	lsls	r2, r2, #4
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	440b      	add	r3, r1
 8002154:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002158:	e00a      	b.n	8002170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	b2da      	uxtb	r2, r3
 800215e:	4908      	ldr	r1, [pc, #32]	@ (8002180 <__NVIC_SetPriority+0x50>)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	3b04      	subs	r3, #4
 8002168:	0112      	lsls	r2, r2, #4
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	440b      	add	r3, r1
 800216e:	761a      	strb	r2, [r3, #24]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000e100 	.word	0xe000e100
 8002180:	e000ed00 	.word	0xe000ed00

08002184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	@ 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f1c3 0307 	rsb	r3, r3, #7
 800219e:	2b04      	cmp	r3, #4
 80021a0:	bf28      	it	cs
 80021a2:	2304      	movcs	r3, #4
 80021a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3304      	adds	r3, #4
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d902      	bls.n	80021b4 <NVIC_EncodePriority+0x30>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3b03      	subs	r3, #3
 80021b2:	e000      	b.n	80021b6 <NVIC_EncodePriority+0x32>
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	401a      	ands	r2, r3
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021cc:	f04f 31ff 	mov.w	r1, #4294967295
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	43d9      	mvns	r1, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021dc:	4313      	orrs	r3, r2
         );
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	@ 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bc80      	pop	{r7}
 80021e6:	4770      	bx	lr

080021e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff4f 	bl	8002094 <__NVIC_SetPriorityGrouping>
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fe:	b580      	push	{r7, lr}
 8002200:	b086      	sub	sp, #24
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002210:	f7ff ff64 	bl	80020dc <__NVIC_GetPriorityGrouping>
 8002214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	6978      	ldr	r0, [r7, #20]
 800221c:	f7ff ffb2 	bl	8002184 <NVIC_EncodePriority>
 8002220:	4602      	mov	r2, r0
 8002222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff81 	bl	8002130 <__NVIC_SetPriority>
}
 800222e:	bf00      	nop
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	4603      	mov	r3, r0
 800223e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff ff57 	bl	80020f8 <__NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e043      	b.n	80022f2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <HAL_DMA_Init+0xa8>)
 8002272:	4413      	add	r3, r2
 8002274:	4a22      	ldr	r2, [pc, #136]	@ (8002300 <HAL_DMA_Init+0xac>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	009a      	lsls	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a1f      	ldr	r2, [pc, #124]	@ (8002304 <HAL_DMA_Init+0xb0>)
 8002286:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2202      	movs	r2, #2
 800228c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800229e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80022a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80022ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80022cc:	68fa      	ldr	r2, [r7, #12]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3714      	adds	r7, #20
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bc80      	pop	{r7}
 80022fa:	4770      	bx	lr
 80022fc:	bffdfff8 	.word	0xbffdfff8
 8002300:	cccccccd 	.word	0xcccccccd
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
 8002314:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_DMA_Start_IT+0x20>
 8002324:	2302      	movs	r3, #2
 8002326:	e04b      	b.n	80023c0 <HAL_DMA_Start_IT+0xb8>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d13a      	bne.n	80023b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0201 	bic.w	r2, r2, #1
 8002358:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	68b9      	ldr	r1, [r7, #8]
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 f9eb 	bl	800273c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f042 020e 	orr.w	r2, r2, #14
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	e00f      	b.n	80023a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0204 	bic.w	r2, r2, #4
 800238e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 020a 	orr.w	r2, r2, #10
 800239e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e005      	b.n	80023be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80023ba:	2302      	movs	r3, #2
 80023bc:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80023be:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2204      	movs	r2, #4
 80023e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e020      	b.n	8002434 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 020e 	bic.w	r2, r2, #14
 8002400:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0201 	bic.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241a:	2101      	movs	r1, #1
 800241c:	fa01 f202 	lsl.w	r2, r1, r2
 8002420:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002432:	7bfb      	ldrb	r3, [r7, #15]
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
	...

08002440 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d005      	beq.n	8002464 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2204      	movs	r2, #4
 800245c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	73fb      	strb	r3, [r7, #15]
 8002462:	e051      	b.n	8002508 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 020e 	bic.w	r2, r2, #14
 8002472:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a22      	ldr	r2, [pc, #136]	@ (8002514 <HAL_DMA_Abort_IT+0xd4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d029      	beq.n	80024e2 <HAL_DMA_Abort_IT+0xa2>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a21      	ldr	r2, [pc, #132]	@ (8002518 <HAL_DMA_Abort_IT+0xd8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d022      	beq.n	80024de <HAL_DMA_Abort_IT+0x9e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1f      	ldr	r2, [pc, #124]	@ (800251c <HAL_DMA_Abort_IT+0xdc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d01a      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x98>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002520 <HAL_DMA_Abort_IT+0xe0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d012      	beq.n	80024d2 <HAL_DMA_Abort_IT+0x92>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002524 <HAL_DMA_Abort_IT+0xe4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00a      	beq.n	80024cc <HAL_DMA_Abort_IT+0x8c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002528 <HAL_DMA_Abort_IT+0xe8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d102      	bne.n	80024c6 <HAL_DMA_Abort_IT+0x86>
 80024c0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80024c4:	e00e      	b.n	80024e4 <HAL_DMA_Abort_IT+0xa4>
 80024c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024ca:	e00b      	b.n	80024e4 <HAL_DMA_Abort_IT+0xa4>
 80024cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024d0:	e008      	b.n	80024e4 <HAL_DMA_Abort_IT+0xa4>
 80024d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024d6:	e005      	b.n	80024e4 <HAL_DMA_Abort_IT+0xa4>
 80024d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024dc:	e002      	b.n	80024e4 <HAL_DMA_Abort_IT+0xa4>
 80024de:	2310      	movs	r3, #16
 80024e0:	e000      	b.n	80024e4 <HAL_DMA_Abort_IT+0xa4>
 80024e2:	2301      	movs	r3, #1
 80024e4:	4a11      	ldr	r2, [pc, #68]	@ (800252c <HAL_DMA_Abort_IT+0xec>)
 80024e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d003      	beq.n	8002508 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
    } 
  }
  return status;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40020008 	.word	0x40020008
 8002518:	4002001c 	.word	0x4002001c
 800251c:	40020030 	.word	0x40020030
 8002520:	40020044 	.word	0x40020044
 8002524:	40020058 	.word	0x40020058
 8002528:	4002006c 	.word	0x4002006c
 800252c:	40020000 	.word	0x40020000

08002530 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254c:	2204      	movs	r2, #4
 800254e:	409a      	lsls	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4013      	ands	r3, r2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d04f      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xc8>
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0304 	and.w	r3, r3, #4
 800255e:	2b00      	cmp	r3, #0
 8002560:	d04a      	beq.n	80025f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d107      	bne.n	8002580 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0204 	bic.w	r2, r2, #4
 800257e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a66      	ldr	r2, [pc, #408]	@ (8002720 <HAL_DMA_IRQHandler+0x1f0>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d029      	beq.n	80025de <HAL_DMA_IRQHandler+0xae>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a65      	ldr	r2, [pc, #404]	@ (8002724 <HAL_DMA_IRQHandler+0x1f4>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d022      	beq.n	80025da <HAL_DMA_IRQHandler+0xaa>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a63      	ldr	r2, [pc, #396]	@ (8002728 <HAL_DMA_IRQHandler+0x1f8>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d01a      	beq.n	80025d4 <HAL_DMA_IRQHandler+0xa4>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a62      	ldr	r2, [pc, #392]	@ (800272c <HAL_DMA_IRQHandler+0x1fc>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d012      	beq.n	80025ce <HAL_DMA_IRQHandler+0x9e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a60      	ldr	r2, [pc, #384]	@ (8002730 <HAL_DMA_IRQHandler+0x200>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00a      	beq.n	80025c8 <HAL_DMA_IRQHandler+0x98>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a5f      	ldr	r2, [pc, #380]	@ (8002734 <HAL_DMA_IRQHandler+0x204>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d102      	bne.n	80025c2 <HAL_DMA_IRQHandler+0x92>
 80025bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80025c0:	e00e      	b.n	80025e0 <HAL_DMA_IRQHandler+0xb0>
 80025c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80025c6:	e00b      	b.n	80025e0 <HAL_DMA_IRQHandler+0xb0>
 80025c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80025cc:	e008      	b.n	80025e0 <HAL_DMA_IRQHandler+0xb0>
 80025ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025d2:	e005      	b.n	80025e0 <HAL_DMA_IRQHandler+0xb0>
 80025d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025d8:	e002      	b.n	80025e0 <HAL_DMA_IRQHandler+0xb0>
 80025da:	2340      	movs	r3, #64	@ 0x40
 80025dc:	e000      	b.n	80025e0 <HAL_DMA_IRQHandler+0xb0>
 80025de:	2304      	movs	r3, #4
 80025e0:	4a55      	ldr	r2, [pc, #340]	@ (8002738 <HAL_DMA_IRQHandler+0x208>)
 80025e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8094 	beq.w	8002716 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80025f6:	e08e      	b.n	8002716 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	2202      	movs	r2, #2
 80025fe:	409a      	lsls	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4013      	ands	r3, r2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d056      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x186>
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d051      	beq.n	80026b6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0320 	and.w	r3, r3, #32
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10b      	bne.n	8002638 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 020a 	bic.w	r2, r2, #10
 800262e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a38      	ldr	r2, [pc, #224]	@ (8002720 <HAL_DMA_IRQHandler+0x1f0>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d029      	beq.n	8002696 <HAL_DMA_IRQHandler+0x166>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a37      	ldr	r2, [pc, #220]	@ (8002724 <HAL_DMA_IRQHandler+0x1f4>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_DMA_IRQHandler+0x162>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a35      	ldr	r2, [pc, #212]	@ (8002728 <HAL_DMA_IRQHandler+0x1f8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d01a      	beq.n	800268c <HAL_DMA_IRQHandler+0x15c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a34      	ldr	r2, [pc, #208]	@ (800272c <HAL_DMA_IRQHandler+0x1fc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d012      	beq.n	8002686 <HAL_DMA_IRQHandler+0x156>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a32      	ldr	r2, [pc, #200]	@ (8002730 <HAL_DMA_IRQHandler+0x200>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00a      	beq.n	8002680 <HAL_DMA_IRQHandler+0x150>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a31      	ldr	r2, [pc, #196]	@ (8002734 <HAL_DMA_IRQHandler+0x204>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d102      	bne.n	800267a <HAL_DMA_IRQHandler+0x14a>
 8002674:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002678:	e00e      	b.n	8002698 <HAL_DMA_IRQHandler+0x168>
 800267a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800267e:	e00b      	b.n	8002698 <HAL_DMA_IRQHandler+0x168>
 8002680:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002684:	e008      	b.n	8002698 <HAL_DMA_IRQHandler+0x168>
 8002686:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800268a:	e005      	b.n	8002698 <HAL_DMA_IRQHandler+0x168>
 800268c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002690:	e002      	b.n	8002698 <HAL_DMA_IRQHandler+0x168>
 8002692:	2320      	movs	r3, #32
 8002694:	e000      	b.n	8002698 <HAL_DMA_IRQHandler+0x168>
 8002696:	2302      	movs	r3, #2
 8002698:	4a27      	ldr	r2, [pc, #156]	@ (8002738 <HAL_DMA_IRQHandler+0x208>)
 800269a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d034      	beq.n	8002716 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026b4:	e02f      	b.n	8002716 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ba:	2208      	movs	r2, #8
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	4013      	ands	r3, r2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d028      	beq.n	8002718 <HAL_DMA_IRQHandler+0x1e8>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 020e 	bic.w	r2, r2, #14
 80026de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e8:	2101      	movs	r1, #1
 80026ea:	fa01 f202 	lsl.w	r2, r1, r2
 80026ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270a:	2b00      	cmp	r3, #0
 800270c:	d004      	beq.n	8002718 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	4798      	blx	r3
    }
  }
  return;
 8002716:	bf00      	nop
 8002718:	bf00      	nop
}
 800271a:	3710      	adds	r7, #16
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40020008 	.word	0x40020008
 8002724:	4002001c 	.word	0x4002001c
 8002728:	40020030 	.word	0x40020030
 800272c:	40020044 	.word	0x40020044
 8002730:	40020058 	.word	0x40020058
 8002734:	4002006c 	.word	0x4002006c
 8002738:	40020000 	.word	0x40020000

0800273c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
 8002748:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b10      	cmp	r3, #16
 8002768:	d108      	bne.n	800277c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800277a:	e007      	b.n	800278c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b08b      	sub	sp, #44	@ 0x2c
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027aa:	e169      	b.n	8002a80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027ac:	2201      	movs	r2, #1
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	69fa      	ldr	r2, [r7, #28]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8158 	bne.w	8002a7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002a38 <HAL_GPIO_Init+0x2a0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d05e      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027d4:	4a98      	ldr	r2, [pc, #608]	@ (8002a38 <HAL_GPIO_Init+0x2a0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d875      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027da:	4a98      	ldr	r2, [pc, #608]	@ (8002a3c <HAL_GPIO_Init+0x2a4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d058      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027e0:	4a96      	ldr	r2, [pc, #600]	@ (8002a3c <HAL_GPIO_Init+0x2a4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d86f      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027e6:	4a96      	ldr	r2, [pc, #600]	@ (8002a40 <HAL_GPIO_Init+0x2a8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d052      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027ec:	4a94      	ldr	r2, [pc, #592]	@ (8002a40 <HAL_GPIO_Init+0x2a8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d869      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027f2:	4a94      	ldr	r2, [pc, #592]	@ (8002a44 <HAL_GPIO_Init+0x2ac>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04c      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 80027f8:	4a92      	ldr	r2, [pc, #584]	@ (8002a44 <HAL_GPIO_Init+0x2ac>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d863      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 80027fe:	4a92      	ldr	r2, [pc, #584]	@ (8002a48 <HAL_GPIO_Init+0x2b0>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d046      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
 8002804:	4a90      	ldr	r2, [pc, #576]	@ (8002a48 <HAL_GPIO_Init+0x2b0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d85d      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 800280a:	2b12      	cmp	r3, #18
 800280c:	d82a      	bhi.n	8002864 <HAL_GPIO_Init+0xcc>
 800280e:	2b12      	cmp	r3, #18
 8002810:	d859      	bhi.n	80028c6 <HAL_GPIO_Init+0x12e>
 8002812:	a201      	add	r2, pc, #4	@ (adr r2, 8002818 <HAL_GPIO_Init+0x80>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002893 	.word	0x08002893
 800281c:	0800286d 	.word	0x0800286d
 8002820:	0800287f 	.word	0x0800287f
 8002824:	080028c1 	.word	0x080028c1
 8002828:	080028c7 	.word	0x080028c7
 800282c:	080028c7 	.word	0x080028c7
 8002830:	080028c7 	.word	0x080028c7
 8002834:	080028c7 	.word	0x080028c7
 8002838:	080028c7 	.word	0x080028c7
 800283c:	080028c7 	.word	0x080028c7
 8002840:	080028c7 	.word	0x080028c7
 8002844:	080028c7 	.word	0x080028c7
 8002848:	080028c7 	.word	0x080028c7
 800284c:	080028c7 	.word	0x080028c7
 8002850:	080028c7 	.word	0x080028c7
 8002854:	080028c7 	.word	0x080028c7
 8002858:	080028c7 	.word	0x080028c7
 800285c:	08002875 	.word	0x08002875
 8002860:	08002889 	.word	0x08002889
 8002864:	4a79      	ldr	r2, [pc, #484]	@ (8002a4c <HAL_GPIO_Init+0x2b4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800286a:	e02c      	b.n	80028c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	623b      	str	r3, [r7, #32]
          break;
 8002872:	e029      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	3304      	adds	r3, #4
 800287a:	623b      	str	r3, [r7, #32]
          break;
 800287c:	e024      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	3308      	adds	r3, #8
 8002884:	623b      	str	r3, [r7, #32]
          break;
 8002886:	e01f      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	330c      	adds	r3, #12
 800288e:	623b      	str	r3, [r7, #32]
          break;
 8002890:	e01a      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800289a:	2304      	movs	r3, #4
 800289c:	623b      	str	r3, [r7, #32]
          break;
 800289e:	e013      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d105      	bne.n	80028b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028a8:	2308      	movs	r3, #8
 80028aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69fa      	ldr	r2, [r7, #28]
 80028b0:	611a      	str	r2, [r3, #16]
          break;
 80028b2:	e009      	b.n	80028c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028b4:	2308      	movs	r3, #8
 80028b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	615a      	str	r2, [r3, #20]
          break;
 80028be:	e003      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028c0:	2300      	movs	r3, #0
 80028c2:	623b      	str	r3, [r7, #32]
          break;
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x130>
          break;
 80028c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2bff      	cmp	r3, #255	@ 0xff
 80028cc:	d801      	bhi.n	80028d2 <HAL_GPIO_Init+0x13a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	e001      	b.n	80028d6 <HAL_GPIO_Init+0x13e>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3304      	adds	r3, #4
 80028d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	2bff      	cmp	r3, #255	@ 0xff
 80028dc:	d802      	bhi.n	80028e4 <HAL_GPIO_Init+0x14c>
 80028de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	e002      	b.n	80028ea <HAL_GPIO_Init+0x152>
 80028e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e6:	3b08      	subs	r3, #8
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	210f      	movs	r1, #15
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	401a      	ands	r2, r3
 80028fc:	6a39      	ldr	r1, [r7, #32]
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	fa01 f303 	lsl.w	r3, r1, r3
 8002904:	431a      	orrs	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80b1 	beq.w	8002a7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002918:	4b4d      	ldr	r3, [pc, #308]	@ (8002a50 <HAL_GPIO_Init+0x2b8>)
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a50 <HAL_GPIO_Init+0x2b8>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6193      	str	r3, [r2, #24]
 8002924:	4b4a      	ldr	r3, [pc, #296]	@ (8002a50 <HAL_GPIO_Init+0x2b8>)
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	60bb      	str	r3, [r7, #8]
 800292e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002930:	4a48      	ldr	r2, [pc, #288]	@ (8002a54 <HAL_GPIO_Init+0x2bc>)
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4013      	ands	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a40      	ldr	r2, [pc, #256]	@ (8002a58 <HAL_GPIO_Init+0x2c0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d013      	beq.n	8002984 <HAL_GPIO_Init+0x1ec>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a3f      	ldr	r2, [pc, #252]	@ (8002a5c <HAL_GPIO_Init+0x2c4>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d00d      	beq.n	8002980 <HAL_GPIO_Init+0x1e8>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a3e      	ldr	r2, [pc, #248]	@ (8002a60 <HAL_GPIO_Init+0x2c8>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d007      	beq.n	800297c <HAL_GPIO_Init+0x1e4>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a64 <HAL_GPIO_Init+0x2cc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_GPIO_Init+0x1e0>
 8002974:	2303      	movs	r3, #3
 8002976:	e006      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002978:	2304      	movs	r3, #4
 800297a:	e004      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 800297c:	2302      	movs	r3, #2
 800297e:	e002      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_GPIO_Init+0x1ee>
 8002984:	2300      	movs	r3, #0
 8002986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002988:	f002 0203 	and.w	r2, r2, #3
 800298c:	0092      	lsls	r2, r2, #2
 800298e:	4093      	lsls	r3, r2
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002996:	492f      	ldr	r1, [pc, #188]	@ (8002a54 <HAL_GPIO_Init+0x2bc>)
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	089b      	lsrs	r3, r3, #2
 800299c:	3302      	adds	r3, #2
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d006      	beq.n	80029be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80029b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	492c      	ldr	r1, [pc, #176]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	608b      	str	r3, [r1, #8]
 80029bc:	e006      	b.n	80029cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80029be:	4b2a      	ldr	r3, [pc, #168]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	43db      	mvns	r3, r3
 80029c6:	4928      	ldr	r1, [pc, #160]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80029d8:	4b23      	ldr	r3, [pc, #140]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029da:	68da      	ldr	r2, [r3, #12]
 80029dc:	4922      	ldr	r1, [pc, #136]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
 80029e4:	e006      	b.n	80029f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029e6:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029e8:	68da      	ldr	r2, [r3, #12]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	491e      	ldr	r1, [pc, #120]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d006      	beq.n	8002a0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a00:	4b19      	ldr	r3, [pc, #100]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4918      	ldr	r1, [pc, #96]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	604b      	str	r3, [r1, #4]
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a0e:	4b16      	ldr	r3, [pc, #88]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	43db      	mvns	r3, r3
 8002a16:	4914      	ldr	r1, [pc, #80]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d021      	beq.n	8002a6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a28:	4b0f      	ldr	r3, [pc, #60]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	490e      	ldr	r1, [pc, #56]	@ (8002a68 <HAL_GPIO_Init+0x2d0>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	600b      	str	r3, [r1, #0]
 8002a34:	e021      	b.n	8002a7a <HAL_GPIO_Init+0x2e2>
 8002a36:	bf00      	nop
 8002a38:	10320000 	.word	0x10320000
 8002a3c:	10310000 	.word	0x10310000
 8002a40:	10220000 	.word	0x10220000
 8002a44:	10210000 	.word	0x10210000
 8002a48:	10120000 	.word	0x10120000
 8002a4c:	10110000 	.word	0x10110000
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40010000 	.word	0x40010000
 8002a58:	40010800 	.word	0x40010800
 8002a5c:	40010c00 	.word	0x40010c00
 8002a60:	40011000 	.word	0x40011000
 8002a64:	40011400 	.word	0x40011400
 8002a68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4909      	ldr	r1, [pc, #36]	@ (8002a9c <HAL_GPIO_Init+0x304>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f47f ae8e 	bne.w	80027ac <HAL_GPIO_Init+0x14>
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	372c      	adds	r7, #44	@ 0x2c
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	807b      	strh	r3, [r7, #2]
 8002ada:	4613      	mov	r3, r2
 8002adc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ade:	787b      	ldrb	r3, [r7, #1]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae4:	887a      	ldrh	r2, [r7, #2]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aea:	e003      	b.n	8002af4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	041a      	lsls	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	611a      	str	r2, [r3, #16]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e12b      	b.n	8002d6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f7fe fd8c 	bl	8001644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2224      	movs	r2, #36	@ 0x24
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b64:	f001 f99a 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8002b68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	4a81      	ldr	r2, [pc, #516]	@ (8002d74 <HAL_I2C_Init+0x274>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d807      	bhi.n	8002b84 <HAL_I2C_Init+0x84>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	4a80      	ldr	r2, [pc, #512]	@ (8002d78 <HAL_I2C_Init+0x278>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	bf94      	ite	ls
 8002b7c:	2301      	movls	r3, #1
 8002b7e:	2300      	movhi	r3, #0
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	e006      	b.n	8002b92 <HAL_I2C_Init+0x92>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	4a7d      	ldr	r2, [pc, #500]	@ (8002d7c <HAL_I2C_Init+0x27c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	bf94      	ite	ls
 8002b8c:	2301      	movls	r3, #1
 8002b8e:	2300      	movhi	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e0e7      	b.n	8002d6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4a78      	ldr	r2, [pc, #480]	@ (8002d80 <HAL_I2C_Init+0x280>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	0c9b      	lsrs	r3, r3, #18
 8002ba4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002d74 <HAL_I2C_Init+0x274>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d802      	bhi.n	8002bd4 <HAL_I2C_Init+0xd4>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	e009      	b.n	8002be8 <HAL_I2C_Init+0xe8>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	4a69      	ldr	r2, [pc, #420]	@ (8002d84 <HAL_I2C_Init+0x284>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	099b      	lsrs	r3, r3, #6
 8002be6:	3301      	adds	r3, #1
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6812      	ldr	r2, [r2, #0]
 8002bec:	430b      	orrs	r3, r1
 8002bee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002bfa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	495c      	ldr	r1, [pc, #368]	@ (8002d74 <HAL_I2C_Init+0x274>)
 8002c04:	428b      	cmp	r3, r1
 8002c06:	d819      	bhi.n	8002c3c <HAL_I2C_Init+0x13c>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1e59      	subs	r1, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c16:	1c59      	adds	r1, r3, #1
 8002c18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_I2C_Init+0x138>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	1e59      	subs	r1, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c36:	e051      	b.n	8002cdc <HAL_I2C_Init+0x1dc>
 8002c38:	2304      	movs	r3, #4
 8002c3a:	e04f      	b.n	8002cdc <HAL_I2C_Init+0x1dc>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d111      	bne.n	8002c68 <HAL_I2C_Init+0x168>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1e58      	subs	r0, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6859      	ldr	r1, [r3, #4]
 8002c4c:	460b      	mov	r3, r1
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	440b      	add	r3, r1
 8002c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	e012      	b.n	8002c8e <HAL_I2C_Init+0x18e>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	1e58      	subs	r0, r3, #1
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6859      	ldr	r1, [r3, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	0099      	lsls	r1, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	bf0c      	ite	eq
 8002c88:	2301      	moveq	r3, #1
 8002c8a:	2300      	movne	r3, #0
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Init+0x196>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e022      	b.n	8002cdc <HAL_I2C_Init+0x1dc>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10e      	bne.n	8002cbc <HAL_I2C_Init+0x1bc>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1e58      	subs	r0, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	440b      	add	r3, r1
 8002cac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cba:	e00f      	b.n	8002cdc <HAL_I2C_Init+0x1dc>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1e58      	subs	r0, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6859      	ldr	r1, [r3, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	0099      	lsls	r1, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	6809      	ldr	r1, [r1, #0]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	6911      	ldr	r1, [r2, #16]
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	68d2      	ldr	r2, [r2, #12]
 8002d16:	4311      	orrs	r1, r2
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	695a      	ldr	r2, [r3, #20]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	000186a0 	.word	0x000186a0
 8002d78:	001e847f 	.word	0x001e847f
 8002d7c:	003d08ff 	.word	0x003d08ff
 8002d80:	431bde83 	.word	0x431bde83
 8002d84:	10624dd3 	.word	0x10624dd3

08002d88 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	@ 0x28
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	4608      	mov	r0, r1
 8002d92:	4611      	mov	r1, r2
 8002d94:	461a      	mov	r2, r3
 8002d96:	4603      	mov	r3, r0
 8002d98:	817b      	strh	r3, [r7, #10]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	813b      	strh	r3, [r7, #8]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da6:	f7ff f947 	bl	8002038 <HAL_GetTick>
 8002daa:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	f040 812e 	bne.w	8003016 <HAL_I2C_Mem_Write_DMA+0x28e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8002dba:	4b99      	ldr	r3, [pc, #612]	@ (8003020 <HAL_I2C_Mem_Write_DMA+0x298>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	08db      	lsrs	r3, r3, #3
 8002dc0:	4a98      	ldr	r2, [pc, #608]	@ (8003024 <HAL_I2C_Mem_Write_DMA+0x29c>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	0a1a      	lsrs	r2, r3, #8
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	009a      	lsls	r2, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d112      	bne.n	8002e06 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f043 0220 	orr.w	r2, r3, #32
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
 8002e04:	e108      	b.n	8003018 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d0df      	beq.n	8002dd4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_I2C_Mem_Write_DMA+0x9a>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0fa      	b.n	8003018 <HAL_I2C_Mem_Write_DMA+0x290>
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d007      	beq.n	8002e48 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0201 	orr.w	r2, r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2221      	movs	r2, #33	@ 0x21
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2240      	movs	r2, #64	@ 0x40
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e72:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8002e78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4a68      	ldr	r2, [pc, #416]	@ (8003028 <HAL_I2C_Mem_Write_DMA+0x2a0>)
 8002e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8002e8a:	897a      	ldrh	r2, [r7, #10]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8002e90:	893a      	ldrh	r2, [r7, #8]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	f000 80a1 	beq.w	8002fee <HAL_I2C_Mem_Write_DMA+0x266>
    {
      if (hi2c->hdmatx != NULL)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d022      	beq.n	8002efa <HAL_I2C_Mem_Write_DMA+0x172>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb8:	4a5c      	ldr	r2, [pc, #368]	@ (800302c <HAL_I2C_Mem_Write_DMA+0x2a4>)
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec0:	4a5b      	ldr	r2, [pc, #364]	@ (8003030 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8002ec2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ec8:	2200      	movs	r2, #0
 8002eca:	62da      	str	r2, [r3, #44]	@ 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002edc:	4619      	mov	r1, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3310      	adds	r3, #16
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eea:	f7ff fa0d 	bl	8002308 <HAL_DMA_Start_IT>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8002ef2:	7efb      	ldrb	r3, [r7, #27]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d166      	bne.n	8002fc6 <HAL_I2C_Mem_Write_DMA+0x23e>
 8002ef8:	e013      	b.n	8002f22 <HAL_I2C_Mem_Write_DMA+0x19a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e07a      	b.n	8003018 <HAL_I2C_Mem_Write_DMA+0x290>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8002f22:	88f8      	ldrh	r0, [r7, #6]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	8979      	ldrh	r1, [r7, #10]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	2323      	movs	r3, #35	@ 0x23
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	4603      	mov	r3, r0
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f8ac 	bl	8003090 <I2C_RequestMemoryWrite>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d022      	beq.n	8002f84 <HAL_I2C_Mem_Write_DMA+0x1fc>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fa7c 	bl	8002440 <HAL_DMA_Abort_IT>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	2200      	movs	r2, #0
 8002f52:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f62:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e049      	b.n	8003018 <HAL_I2C_Mem_Write_DMA+0x290>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	613b      	str	r3, [r7, #16]
 8002f98:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fb0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc0:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e028      	b.n	8003018 <HAL_I2C_Mem_Write_DMA+0x290>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f043 0210 	orr.w	r2, r3, #16
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e014      	b.n	8003018 <HAL_I2C_Mem_Write_DMA+0x290>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e000      	b.n	8003018 <HAL_I2C_Mem_Write_DMA+0x290>
    }
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3720      	adds	r7, #32
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	2000000c 	.word	0x2000000c
 8003024:	14f8b589 	.word	0x14f8b589
 8003028:	ffff0000 	.word	0xffff0000
 800302c:	080031bd 	.word	0x080031bd
 8003030:	0800337b 	.word	0x0800337b

08003034 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr

08003046 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	bc80      	pop	{r7}
 8003068:	4770      	bx	lr

0800306a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr
	...

08003090 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b088      	sub	sp, #32
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	4608      	mov	r0, r1
 800309a:	4611      	mov	r1, r2
 800309c:	461a      	mov	r2, r3
 800309e:	4603      	mov	r3, r0
 80030a0:	817b      	strh	r3, [r7, #10]
 80030a2:	460b      	mov	r3, r1
 80030a4:	813b      	strh	r3, [r7, #8]
 80030a6:	4613      	mov	r3, r2
 80030a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 f98e 	bl	80033e8 <I2C_WaitOnFlagUntilTimeout>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e0:	d103      	bne.n	80030ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e05f      	b.n	80031ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030ee:	897b      	ldrh	r3, [r7, #10]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003100:	6a3a      	ldr	r2, [r7, #32]
 8003102:	492d      	ldr	r1, [pc, #180]	@ (80031b8 <I2C_RequestMemoryWrite+0x128>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f9e9 	bl	80034dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04c      	b.n	80031ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	617b      	str	r3, [r7, #20]
 8003128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f000 fa74 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00d      	beq.n	8003156 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2b04      	cmp	r3, #4
 8003140:	d107      	bne.n	8003152 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e02b      	b.n	80031ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d105      	bne.n	8003168 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800315c:	893b      	ldrh	r3, [r7, #8]
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	611a      	str	r2, [r3, #16]
 8003166:	e021      	b.n	80031ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003168:	893b      	ldrh	r3, [r7, #8]
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	b29b      	uxth	r3, r3
 800316e:	b2da      	uxtb	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003178:	6a39      	ldr	r1, [r7, #32]
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 fa4e 	bl	800361c <I2C_WaitOnTXEFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00d      	beq.n	80031a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	2b04      	cmp	r3, #4
 800318c:	d107      	bne.n	800319e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800319c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e005      	b.n	80031ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031a2:	893b      	ldrh	r3, [r7, #8]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3718      	adds	r7, #24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	00010002 	.word	0x00010002

080031bc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031d8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031de:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80031ee:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fc:	2200      	movs	r2, #0
 80031fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800320c:	2200      	movs	r2, #0
 800320e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003216:	2b21      	cmp	r3, #33	@ 0x21
 8003218:	d007      	beq.n	800322a <I2C_DMAXferCplt+0x6e>
 800321a:	7cfb      	ldrb	r3, [r7, #19]
 800321c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8003220:	2b22      	cmp	r3, #34	@ 0x22
 8003222:	d131      	bne.n	8003288 <I2C_DMAXferCplt+0xcc>
 8003224:	7cbb      	ldrb	r3, [r7, #18]
 8003226:	2b20      	cmp	r3, #32
 8003228:	d12e      	bne.n	8003288 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003238:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2200      	movs	r2, #0
 800323e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003240:	7cfb      	ldrb	r3, [r7, #19]
 8003242:	2b29      	cmp	r3, #41	@ 0x29
 8003244:	d10a      	bne.n	800325c <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2221      	movs	r2, #33	@ 0x21
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2228      	movs	r2, #40	@ 0x28
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003254:	6978      	ldr	r0, [r7, #20]
 8003256:	f7ff fef6 	bl	8003046 <HAL_I2C_SlaveTxCpltCallback>
 800325a:	e00c      	b.n	8003276 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003260:	d109      	bne.n	8003276 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2222      	movs	r2, #34	@ 0x22
 8003266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2228      	movs	r2, #40	@ 0x28
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003270:	6978      	ldr	r0, [r7, #20]
 8003272:	f7ff fef1 	bl	8003058 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003284:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003286:	e074      	b.n	8003372 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d06e      	beq.n	8003372 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	d107      	bne.n	80032ae <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ac:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80032bc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032c4:	d009      	beq.n	80032da <I2C_DMAXferCplt+0x11e>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d006      	beq.n	80032da <I2C_DMAXferCplt+0x11e>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80032d2:	d002      	beq.n	80032da <I2C_DMAXferCplt+0x11e>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d107      	bne.n	80032ea <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032e8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032f8:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003308:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8003318:	6978      	ldr	r0, [r7, #20]
 800331a:	f7ff feaf 	bl	800307c <HAL_I2C_ErrorCallback>
}
 800331e:	e028      	b.n	8003372 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800332e:	b2db      	uxtb	r3, r3
 8003330:	2b40      	cmp	r3, #64	@ 0x40
 8003332:	d10a      	bne.n	800334a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2200      	movs	r2, #0
 8003340:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003342:	6978      	ldr	r0, [r7, #20]
 8003344:	f7ff fe91 	bl	800306a <HAL_I2C_MemRxCpltCallback>
}
 8003348:	e013      	b.n	8003372 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d002      	beq.n	800335e <I2C_DMAXferCplt+0x1a2>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b20      	cmp	r3, #32
 800335c:	d103      	bne.n	8003366 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	631a      	str	r2, [r3, #48]	@ 0x30
 8003364:	e002      	b.n	800336c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2212      	movs	r2, #18
 800336a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800336c:	6978      	ldr	r0, [r7, #20]
 800336e:	f7ff fe61 	bl	8003034 <HAL_I2C_MasterRxCpltCallback>
}
 8003372:	bf00      	nop
 8003374:	3718      	adds	r7, #24
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003394:	2200      	movs	r2, #0
 8003396:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800339c:	2b00      	cmp	r3, #0
 800339e:	d003      	beq.n	80033a8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a4:	2200      	movs	r2, #0
 80033a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033b6:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2200      	movs	r2, #0
 80033bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d2:	f043 0210 	orr.w	r2, r3, #16
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f7ff fe4e 	bl	800307c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	603b      	str	r3, [r7, #0]
 80033f4:	4613      	mov	r3, r2
 80033f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033f8:	e048      	b.n	800348c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003400:	d044      	beq.n	800348c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003402:	f7fe fe19 	bl	8002038 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d302      	bcc.n	8003418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d139      	bne.n	800348c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	0c1b      	lsrs	r3, r3, #16
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	d10d      	bne.n	800343e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	43da      	mvns	r2, r3
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4013      	ands	r3, r2
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	e00c      	b.n	8003458 <I2C_WaitOnFlagUntilTimeout+0x70>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	43da      	mvns	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf0c      	ite	eq
 8003450:	2301      	moveq	r3, #1
 8003452:	2300      	movne	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	461a      	mov	r2, r3
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	429a      	cmp	r2, r3
 800345c:	d116      	bne.n	800348c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003478:	f043 0220 	orr.w	r2, r3, #32
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e023      	b.n	80034d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	0c1b      	lsrs	r3, r3, #16
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d10d      	bne.n	80034b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	43da      	mvns	r2, r3
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	e00c      	b.n	80034cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf0c      	ite	eq
 80034c4:	2301      	moveq	r3, #1
 80034c6:	2300      	movne	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	461a      	mov	r2, r3
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d093      	beq.n	80033fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ea:	e071      	b.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034fa:	d123      	bne.n	8003544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800350a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003514:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2220      	movs	r2, #32
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	f043 0204 	orr.w	r2, r3, #4
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e067      	b.n	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d041      	beq.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354c:	f7fe fd74 	bl	8002038 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d302      	bcc.n	8003562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d136      	bne.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	0c1b      	lsrs	r3, r3, #16
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10c      	bne.n	8003586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	43da      	mvns	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4013      	ands	r3, r2
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf14      	ite	ne
 800357e:	2301      	movne	r3, #1
 8003580:	2300      	moveq	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	e00b      	b.n	800359e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	43da      	mvns	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4013      	ands	r3, r2
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf14      	ite	ne
 8003598:	2301      	movne	r3, #1
 800359a:	2300      	moveq	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d016      	beq.n	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2220      	movs	r2, #32
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e021      	b.n	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	0c1b      	lsrs	r3, r3, #16
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d10c      	bne.n	80035f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	43da      	mvns	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	4013      	ands	r3, r2
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf14      	ite	ne
 80035ec:	2301      	movne	r3, #1
 80035ee:	2300      	moveq	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e00b      	b.n	800360c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	43da      	mvns	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	4013      	ands	r3, r2
 8003600:	b29b      	uxth	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	bf14      	ite	ne
 8003606:	2301      	movne	r3, #1
 8003608:	2300      	moveq	r3, #0
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f af6d 	bne.w	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003628:	e034      	b.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 f83e 	bl	80036ac <I2C_IsAcknowledgeFailed>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e034      	b.n	80036a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d028      	beq.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003642:	f7fe fcf9 	bl	8002038 <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	429a      	cmp	r2, r3
 8003650:	d302      	bcc.n	8003658 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d11d      	bne.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003662:	2b80      	cmp	r3, #128	@ 0x80
 8003664:	d016      	beq.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e007      	b.n	80036a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	2b80      	cmp	r3, #128	@ 0x80
 80036a0:	d1c3      	bne.n	800362a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c2:	d11b      	bne.n	80036fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f043 0204 	orr.w	r2, r3, #4
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e272      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8087 	beq.w	8003836 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003728:	4b92      	ldr	r3, [pc, #584]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b04      	cmp	r3, #4
 8003732:	d00c      	beq.n	800374e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003734:	4b8f      	ldr	r3, [pc, #572]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 030c 	and.w	r3, r3, #12
 800373c:	2b08      	cmp	r3, #8
 800373e:	d112      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
 8003740:	4b8c      	ldr	r3, [pc, #560]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800374c:	d10b      	bne.n	8003766 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800374e:	4b89      	ldr	r3, [pc, #548]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d06c      	beq.n	8003834 <HAL_RCC_OscConfig+0x12c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d168      	bne.n	8003834 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e24c      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x76>
 8003770:	4b80      	ldr	r3, [pc, #512]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a7f      	ldr	r2, [pc, #508]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800377a:	6013      	str	r3, [r2, #0]
 800377c:	e02e      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x98>
 8003786:	4b7b      	ldr	r3, [pc, #492]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a7a      	ldr	r2, [pc, #488]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 800378c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	4b78      	ldr	r3, [pc, #480]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a77      	ldr	r2, [pc, #476]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003798:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379c:	6013      	str	r3, [r2, #0]
 800379e:	e01d      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037a8:	d10c      	bne.n	80037c4 <HAL_RCC_OscConfig+0xbc>
 80037aa:	4b72      	ldr	r3, [pc, #456]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a71      	ldr	r2, [pc, #452]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037b4:	6013      	str	r3, [r2, #0]
 80037b6:	4b6f      	ldr	r3, [pc, #444]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a6e      	ldr	r2, [pc, #440]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037c0:	6013      	str	r3, [r2, #0]
 80037c2:	e00b      	b.n	80037dc <HAL_RCC_OscConfig+0xd4>
 80037c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6a      	ldr	r2, [pc, #424]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b68      	ldr	r3, [pc, #416]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a67      	ldr	r2, [pc, #412]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80037d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe fc28 	bl	8002038 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fe fc24 	bl	8002038 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	@ 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e200      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fe:	4b5d      	ldr	r3, [pc, #372]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d0f0      	beq.n	80037ec <HAL_RCC_OscConfig+0xe4>
 800380a:	e014      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe fc14 	bl	8002038 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003814:	f7fe fc10 	bl	8002038 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b64      	cmp	r3, #100	@ 0x64
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e1ec      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003826:	4b53      	ldr	r3, [pc, #332]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x10c>
 8003832:	e000      	b.n	8003836 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d063      	beq.n	800390a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003842:	4b4c      	ldr	r3, [pc, #304]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00b      	beq.n	8003866 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800384e:	4b49      	ldr	r3, [pc, #292]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b08      	cmp	r3, #8
 8003858:	d11c      	bne.n	8003894 <HAL_RCC_OscConfig+0x18c>
 800385a:	4b46      	ldr	r3, [pc, #280]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003866:	4b43      	ldr	r3, [pc, #268]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d005      	beq.n	800387e <HAL_RCC_OscConfig+0x176>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e1c0      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800387e:	4b3d      	ldr	r3, [pc, #244]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	4939      	ldr	r1, [pc, #228]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003892:	e03a      	b.n	800390a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800389c:	4b36      	ldr	r3, [pc, #216]	@ (8003978 <HAL_RCC_OscConfig+0x270>)
 800389e:	2201      	movs	r2, #1
 80038a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a2:	f7fe fbc9 	bl	8002038 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038aa:	f7fe fbc5 	bl	8002038 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e1a1      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0f0      	beq.n	80038aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c8:	4b2a      	ldr	r3, [pc, #168]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4927      	ldr	r1, [pc, #156]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]
 80038dc:	e015      	b.n	800390a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038de:	4b26      	ldr	r3, [pc, #152]	@ (8003978 <HAL_RCC_OscConfig+0x270>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fba8 	bl	8002038 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ec:	f7fe fba4 	bl	8002038 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e180      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fe:	4b1d      	ldr	r3, [pc, #116]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0308 	and.w	r3, r3, #8
 8003912:	2b00      	cmp	r3, #0
 8003914:	d03a      	beq.n	800398c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d019      	beq.n	8003952 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800391e:	4b17      	ldr	r3, [pc, #92]	@ (800397c <HAL_RCC_OscConfig+0x274>)
 8003920:	2201      	movs	r2, #1
 8003922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fe fb88 	bl	8002038 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800392c:	f7fe fb84 	bl	8002038 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e160      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393e:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <HAL_RCC_OscConfig+0x26c>)
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800394a:	2001      	movs	r0, #1
 800394c:	f000 fafe 	bl	8003f4c <RCC_Delay>
 8003950:	e01c      	b.n	800398c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003952:	4b0a      	ldr	r3, [pc, #40]	@ (800397c <HAL_RCC_OscConfig+0x274>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003958:	f7fe fb6e 	bl	8002038 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800395e:	e00f      	b.n	8003980 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003960:	f7fe fb6a 	bl	8002038 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d908      	bls.n	8003980 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e146      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
 8003972:	bf00      	nop
 8003974:	40021000 	.word	0x40021000
 8003978:	42420000 	.word	0x42420000
 800397c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003980:	4b92      	ldr	r3, [pc, #584]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e9      	bne.n	8003960 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	f000 80a6 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800399e:	4b8b      	ldr	r3, [pc, #556]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10d      	bne.n	80039c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039aa:	4b88      	ldr	r3, [pc, #544]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	4a87      	ldr	r2, [pc, #540]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039b4:	61d3      	str	r3, [r2, #28]
 80039b6:	4b85      	ldr	r3, [pc, #532]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	69db      	ldr	r3, [r3, #28]
 80039ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039be:	60bb      	str	r3, [r7, #8]
 80039c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039c2:	2301      	movs	r3, #1
 80039c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c6:	4b82      	ldr	r3, [pc, #520]	@ (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d118      	bne.n	8003a04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039d2:	4b7f      	ldr	r3, [pc, #508]	@ (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a7e      	ldr	r2, [pc, #504]	@ (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039de:	f7fe fb2b 	bl	8002038 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e6:	f7fe fb27 	bl	8002038 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b64      	cmp	r3, #100	@ 0x64
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e103      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f8:	4b75      	ldr	r3, [pc, #468]	@ (8003bd0 <HAL_RCC_OscConfig+0x4c8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x312>
 8003a0c:	4b6f      	ldr	r3, [pc, #444]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a6e      	ldr	r2, [pc, #440]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	f043 0301 	orr.w	r3, r3, #1
 8003a16:	6213      	str	r3, [r2, #32]
 8003a18:	e02d      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10c      	bne.n	8003a3c <HAL_RCC_OscConfig+0x334>
 8003a22:	4b6a      	ldr	r3, [pc, #424]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	4a69      	ldr	r2, [pc, #420]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a28:	f023 0301 	bic.w	r3, r3, #1
 8003a2c:	6213      	str	r3, [r2, #32]
 8003a2e:	4b67      	ldr	r3, [pc, #412]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	4a66      	ldr	r2, [pc, #408]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f023 0304 	bic.w	r3, r3, #4
 8003a38:	6213      	str	r3, [r2, #32]
 8003a3a:	e01c      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d10c      	bne.n	8003a5e <HAL_RCC_OscConfig+0x356>
 8003a44:	4b61      	ldr	r3, [pc, #388]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a60      	ldr	r2, [pc, #384]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	f043 0304 	orr.w	r3, r3, #4
 8003a4e:	6213      	str	r3, [r2, #32]
 8003a50:	4b5e      	ldr	r3, [pc, #376]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	4a5d      	ldr	r2, [pc, #372]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	6213      	str	r3, [r2, #32]
 8003a5c:	e00b      	b.n	8003a76 <HAL_RCC_OscConfig+0x36e>
 8003a5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4a5a      	ldr	r2, [pc, #360]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6213      	str	r3, [r2, #32]
 8003a6a:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	4a57      	ldr	r2, [pc, #348]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	f023 0304 	bic.w	r3, r3, #4
 8003a74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d015      	beq.n	8003aaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a7e:	f7fe fadb 	bl	8002038 <HAL_GetTick>
 8003a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe fad7 	bl	8002038 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e0b1      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0ee      	beq.n	8003a86 <HAL_RCC_OscConfig+0x37e>
 8003aa8:	e014      	b.n	8003ad4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aaa:	f7fe fac5 	bl	8002038 <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab0:	e00a      	b.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ab2:	f7fe fac1 	bl	8002038 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e09b      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ac8:	4b40      	ldr	r3, [pc, #256]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003aca:	6a1b      	ldr	r3, [r3, #32]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d105      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ada:	4b3c      	ldr	r3, [pc, #240]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	69db      	ldr	r3, [r3, #28]
 8003ade:	4a3b      	ldr	r2, [pc, #236]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003ae0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ae4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	f000 8087 	beq.w	8003bfe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003af0:	4b36      	ldr	r3, [pc, #216]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d061      	beq.n	8003bc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69db      	ldr	r3, [r3, #28]
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d146      	bne.n	8003b92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b04:	4b33      	ldr	r3, [pc, #204]	@ (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe fa95 	bl	8002038 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fe fa91 	bl	8002038 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e06d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b24:	4b29      	ldr	r3, [pc, #164]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b38:	d108      	bne.n	8003b4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b3a:	4b24      	ldr	r3, [pc, #144]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	4921      	ldr	r1, [pc, #132]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a19      	ldr	r1, [r3, #32]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	491b      	ldr	r1, [pc, #108]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b64:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fa65 	bl	8002038 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fe fa61 	bl	8002038 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e03d      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b84:	4b11      	ldr	r3, [pc, #68]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCC_OscConfig+0x46a>
 8003b90:	e035      	b.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b92:	4b10      	ldr	r3, [pc, #64]	@ (8003bd4 <HAL_RCC_OscConfig+0x4cc>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b98:	f7fe fa4e 	bl	8002038 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ba0:	f7fe fa4a 	bl	8002038 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e026      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb2:	4b06      	ldr	r3, [pc, #24]	@ (8003bcc <HAL_RCC_OscConfig+0x4c4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x498>
 8003bbe:	e01e      	b.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e019      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	40007000 	.word	0x40007000
 8003bd4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_RCC_OscConfig+0x500>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d106      	bne.n	8003bfa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d001      	beq.n	8003bfe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e000      	b.n	8003c00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000

08003c0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e0d0      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c20:	4b6a      	ldr	r3, [pc, #424]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	683a      	ldr	r2, [r7, #0]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d910      	bls.n	8003c50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c2e:	4b67      	ldr	r3, [pc, #412]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 0207 	bic.w	r2, r3, #7
 8003c36:	4965      	ldr	r1, [pc, #404]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3e:	4b63      	ldr	r3, [pc, #396]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 0307 	and.w	r3, r3, #7
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e0b8      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c68:	4b59      	ldr	r3, [pc, #356]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	4a58      	ldr	r2, [pc, #352]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c80:	4b53      	ldr	r3, [pc, #332]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	4a52      	ldr	r2, [pc, #328]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c86:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c8c:	4b50      	ldr	r3, [pc, #320]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	494d      	ldr	r1, [pc, #308]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d040      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb2:	4b47      	ldr	r3, [pc, #284]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e07f      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cca:	4b41      	ldr	r3, [pc, #260]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e073      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b3d      	ldr	r3, [pc, #244]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06b      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	4b39      	ldr	r3, [pc, #228]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4936      	ldr	r1, [pc, #216]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cfc:	f7fe f99c 	bl	8002038 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fe f998 	bl	8002038 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e053      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f003 020c 	and.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1eb      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d2c:	4b27      	ldr	r3, [pc, #156]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d210      	bcs.n	8003d5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3a:	4b24      	ldr	r3, [pc, #144]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 0207 	bic.w	r2, r3, #7
 8003d42:	4922      	ldr	r1, [pc, #136]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b20      	ldr	r3, [pc, #128]	@ (8003dcc <HAL_RCC_ClockConfig+0x1c0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d68:	4b19      	ldr	r3, [pc, #100]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	4916      	ldr	r1, [pc, #88]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0308 	and.w	r3, r3, #8
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d009      	beq.n	8003d9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d86:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	490e      	ldr	r1, [pc, #56]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d9a:	f000 f821 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	4b0b      	ldr	r3, [pc, #44]	@ (8003dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	091b      	lsrs	r3, r3, #4
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	490a      	ldr	r1, [pc, #40]	@ (8003dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dac:	5ccb      	ldrb	r3, [r1, r3]
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	4a09      	ldr	r2, [pc, #36]	@ (8003dd8 <HAL_RCC_ClockConfig+0x1cc>)
 8003db4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <HAL_RCC_ClockConfig+0x1d0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7fd fdd6 	bl	800196c <HAL_InitTick>

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40022000 	.word	0x40022000
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	08009e0c 	.word	0x08009e0c
 8003dd8:	2000000c 	.word	0x2000000c
 8003ddc:	20000010 	.word	0x20000010

08003de0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	2300      	movs	r3, #0
 8003dec:	60bb      	str	r3, [r7, #8]
 8003dee:	2300      	movs	r3, #0
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d002      	beq.n	8003e10 <HAL_RCC_GetSysClockFreq+0x30>
 8003e0a:	2b08      	cmp	r3, #8
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x36>
 8003e0e:	e027      	b.n	8003e60 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e10:	4b19      	ldr	r3, [pc, #100]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e12:	613b      	str	r3, [r7, #16]
      break;
 8003e14:	e027      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	0c9b      	lsrs	r3, r3, #18
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	4a17      	ldr	r2, [pc, #92]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e20:	5cd3      	ldrb	r3, [r2, r3]
 8003e22:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d010      	beq.n	8003e50 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_RCC_GetSysClockFreq+0x94>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	0c5b      	lsrs	r3, r3, #17
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	4a11      	ldr	r2, [pc, #68]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003e3a:	5cd3      	ldrb	r3, [r2, r3]
 8003e3c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a0d      	ldr	r2, [pc, #52]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e42:	fb03 f202 	mul.w	r2, r3, r2
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e4c:	617b      	str	r3, [r7, #20]
 8003e4e:	e004      	b.n	8003e5a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	4a0c      	ldr	r2, [pc, #48]	@ (8003e84 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e54:	fb02 f303 	mul.w	r3, r2, r3
 8003e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	613b      	str	r3, [r7, #16]
      break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e60:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e62:	613b      	str	r3, [r7, #16]
      break;
 8003e64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e66:	693b      	ldr	r3, [r7, #16]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bc80      	pop	{r7}
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	007a1200 	.word	0x007a1200
 8003e7c:	08009e24 	.word	0x08009e24
 8003e80:	08009e34 	.word	0x08009e34
 8003e84:	003d0900 	.word	0x003d0900

08003e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e8c:	4b02      	ldr	r3, [pc, #8]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	2000000c 	.word	0x2000000c

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff2 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	0a1b      	lsrs	r3, r3, #8
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	@ (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	08009e1c 	.word	0x08009e1c

08003ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ec8:	f7ff ffde 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0adb      	lsrs	r3, r3, #11
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	@ (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	08009e1c 	.word	0x08009e1c

08003eec <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	220f      	movs	r2, #15
 8003efa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003efc:	4b11      	ldr	r3, [pc, #68]	@ (8003f44 <HAL_RCC_GetClockConfig+0x58>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 0203 	and.w	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f08:	4b0e      	ldr	r3, [pc, #56]	@ (8003f44 <HAL_RCC_GetClockConfig+0x58>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f14:	4b0b      	ldr	r3, [pc, #44]	@ (8003f44 <HAL_RCC_GetClockConfig+0x58>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f20:	4b08      	ldr	r3, [pc, #32]	@ (8003f44 <HAL_RCC_GetClockConfig+0x58>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f2e:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_RCC_GetClockConfig+0x5c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0207 	and.w	r2, r3, #7
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f3a:	bf00      	nop
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr
 8003f44:	40021000 	.word	0x40021000
 8003f48:	40022000 	.word	0x40022000

08003f4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f54:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <RCC_Delay+0x34>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a0a      	ldr	r2, [pc, #40]	@ (8003f84 <RCC_Delay+0x38>)
 8003f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5e:	0a5b      	lsrs	r3, r3, #9
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003f68:	bf00      	nop
  }
  while (Delay --);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	1e5a      	subs	r2, r3, #1
 8003f6e:	60fa      	str	r2, [r7, #12]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f9      	bne.n	8003f68 <RCC_Delay+0x1c>
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	2000000c 	.word	0x2000000c
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e041      	b.n	800401e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f839 	bl	8004026 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	f000 fbb4 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3708      	adds	r7, #8
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	bc80      	pop	{r7}
 8004036:	4770      	bx	lr

08004038 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004038:	b480      	push	{r7}
 800403a:	b085      	sub	sp, #20
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b01      	cmp	r3, #1
 800404a:	d001      	beq.n	8004050 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e03a      	b.n	80040c6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2202      	movs	r2, #2
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a18      	ldr	r2, [pc, #96]	@ (80040d0 <HAL_TIM_Base_Start_IT+0x98>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x58>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407a:	d009      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x58>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a14      	ldr	r2, [pc, #80]	@ (80040d4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_TIM_Base_Start_IT+0x58>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a13      	ldr	r2, [pc, #76]	@ (80040d8 <HAL_TIM_Base_Start_IT+0xa0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d111      	bne.n	80040b4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b06      	cmp	r3, #6
 80040a0:	d010      	beq.n	80040c4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0201 	orr.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	e007      	b.n	80040c4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	40000400 	.word	0x40000400
 80040d8:	40000800 	.word	0x40000800

080040dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e041      	b.n	8004172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fd fe28 	bl	8001d58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3304      	adds	r3, #4
 8004118:	4619      	mov	r1, r3
 800411a:	4610      	mov	r0, r2
 800411c:	f000 fb0a 	bl	8004734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <HAL_TIM_PWM_Start+0x24>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b01      	cmp	r3, #1
 8004196:	bf14      	ite	ne
 8004198:	2301      	movne	r3, #1
 800419a:	2300      	moveq	r3, #0
 800419c:	b2db      	uxtb	r3, r3
 800419e:	e022      	b.n	80041e6 <HAL_TIM_PWM_Start+0x6a>
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d109      	bne.n	80041ba <HAL_TIM_PWM_Start+0x3e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	bf14      	ite	ne
 80041b2:	2301      	movne	r3, #1
 80041b4:	2300      	moveq	r3, #0
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	e015      	b.n	80041e6 <HAL_TIM_PWM_Start+0x6a>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d109      	bne.n	80041d4 <HAL_TIM_PWM_Start+0x58>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	bf14      	ite	ne
 80041cc:	2301      	movne	r3, #1
 80041ce:	2300      	moveq	r3, #0
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e008      	b.n	80041e6 <HAL_TIM_PWM_Start+0x6a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e05e      	b.n	80042ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d104      	bne.n	80041fe <HAL_TIM_PWM_Start+0x82>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041fc:	e013      	b.n	8004226 <HAL_TIM_PWM_Start+0xaa>
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d104      	bne.n	800420e <HAL_TIM_PWM_Start+0x92>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2202      	movs	r2, #2
 8004208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800420c:	e00b      	b.n	8004226 <HAL_TIM_PWM_Start+0xaa>
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b08      	cmp	r3, #8
 8004212:	d104      	bne.n	800421e <HAL_TIM_PWM_Start+0xa2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800421c:	e003      	b.n	8004226 <HAL_TIM_PWM_Start+0xaa>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	2201      	movs	r2, #1
 800422c:	6839      	ldr	r1, [r7, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fc76 	bl	8004b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1e      	ldr	r2, [pc, #120]	@ (80042b4 <HAL_TIM_PWM_Start+0x138>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d107      	bne.n	800424e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800424c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a18      	ldr	r2, [pc, #96]	@ (80042b4 <HAL_TIM_PWM_Start+0x138>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d00e      	beq.n	8004276 <HAL_TIM_PWM_Start+0xfa>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004260:	d009      	beq.n	8004276 <HAL_TIM_PWM_Start+0xfa>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a14      	ldr	r2, [pc, #80]	@ (80042b8 <HAL_TIM_PWM_Start+0x13c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d004      	beq.n	8004276 <HAL_TIM_PWM_Start+0xfa>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <HAL_TIM_PWM_Start+0x140>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d111      	bne.n	800429a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0307 	and.w	r3, r3, #7
 8004280:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b06      	cmp	r3, #6
 8004286:	d010      	beq.n	80042aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004298:	e007      	b.n	80042aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f042 0201 	orr.w	r2, r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40012c00 	.word	0x40012c00
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800

080042c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2200      	movs	r2, #0
 80042d0:	6839      	ldr	r1, [r7, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 fc24 	bl	8004b20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a29      	ldr	r2, [pc, #164]	@ (8004384 <HAL_TIM_PWM_Stop+0xc4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d117      	bne.n	8004312 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6a1a      	ldr	r2, [r3, #32]
 80042e8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80042ec:	4013      	ands	r3, r2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10f      	bne.n	8004312 <HAL_TIM_PWM_Stop+0x52>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6a1a      	ldr	r2, [r3, #32]
 80042f8:	f240 4344 	movw	r3, #1092	@ 0x444
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d107      	bne.n	8004312 <HAL_TIM_PWM_Stop+0x52>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004310:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6a1a      	ldr	r2, [r3, #32]
 8004318:	f241 1311 	movw	r3, #4369	@ 0x1111
 800431c:	4013      	ands	r3, r2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10f      	bne.n	8004342 <HAL_TIM_PWM_Stop+0x82>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a1a      	ldr	r2, [r3, #32]
 8004328:	f240 4344 	movw	r3, #1092	@ 0x444
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <HAL_TIM_PWM_Stop+0x82>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f022 0201 	bic.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <HAL_TIM_PWM_Stop+0x92>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004350:	e013      	b.n	800437a <HAL_TIM_PWM_Stop+0xba>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b04      	cmp	r3, #4
 8004356:	d104      	bne.n	8004362 <HAL_TIM_PWM_Stop+0xa2>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004360:	e00b      	b.n	800437a <HAL_TIM_PWM_Stop+0xba>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	2b08      	cmp	r3, #8
 8004366:	d104      	bne.n	8004372 <HAL_TIM_PWM_Stop+0xb2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004370:	e003      	b.n	800437a <HAL_TIM_PWM_Stop+0xba>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3708      	adds	r7, #8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40012c00 	.word	0x40012c00

08004388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d020      	beq.n	80043ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01b      	beq.n	80043ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0202 	mvn.w	r2, #2
 80043bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f993 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f986 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f995 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f003 0304 	and.w	r3, r3, #4
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d020      	beq.n	8004438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 0304 	and.w	r3, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d01b      	beq.n	8004438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f06f 0204 	mvn.w	r2, #4
 8004408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2202      	movs	r2, #2
 800440e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f96d 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 8004424:	e005      	b.n	8004432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 f960 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f96f 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d020      	beq.n	8004484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0308 	and.w	r3, r3, #8
 8004448:	2b00      	cmp	r3, #0
 800444a:	d01b      	beq.n	8004484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0208 	mvn.w	r2, #8
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2204      	movs	r2, #4
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f947 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 8004470:	e005      	b.n	800447e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f93a 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f949 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0310 	and.w	r3, r3, #16
 800448a:	2b00      	cmp	r3, #0
 800448c:	d020      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01b      	beq.n	80044d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f06f 0210 	mvn.w	r2, #16
 80044a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2208      	movs	r2, #8
 80044a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f921 	bl	80046fe <HAL_TIM_IC_CaptureCallback>
 80044bc:	e005      	b.n	80044ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f914 	bl	80046ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f923 	bl	8004710 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00c      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d007      	beq.n	80044f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7fd f9ec 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00c      	beq.n	8004518 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004504:	2b00      	cmp	r3, #0
 8004506:	d007      	beq.n	8004518 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fb8f 	bl	8004c36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00c      	beq.n	800453c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8f3 	bl	8004722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0320 	and.w	r3, r3, #32
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0220 	mvn.w	r2, #32
 8004558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fb62 	bl	8004c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004560:	bf00      	nop
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800457e:	2b01      	cmp	r3, #1
 8004580:	d101      	bne.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004582:	2302      	movs	r3, #2
 8004584:	e0ae      	b.n	80046e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b0c      	cmp	r3, #12
 8004592:	f200 809f 	bhi.w	80046d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004596:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045d1 	.word	0x080045d1
 80045a0:	080046d5 	.word	0x080046d5
 80045a4:	080046d5 	.word	0x080046d5
 80045a8:	080046d5 	.word	0x080046d5
 80045ac:	08004611 	.word	0x08004611
 80045b0:	080046d5 	.word	0x080046d5
 80045b4:	080046d5 	.word	0x080046d5
 80045b8:	080046d5 	.word	0x080046d5
 80045bc:	08004653 	.word	0x08004653
 80045c0:	080046d5 	.word	0x080046d5
 80045c4:	080046d5 	.word	0x080046d5
 80045c8:	080046d5 	.word	0x080046d5
 80045cc:	08004693 	.word	0x08004693
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68b9      	ldr	r1, [r7, #8]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f91a 	bl	8004810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699a      	ldr	r2, [r3, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0208 	orr.w	r2, r2, #8
 80045ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699a      	ldr	r2, [r3, #24]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0204 	bic.w	r2, r2, #4
 80045fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6999      	ldr	r1, [r3, #24]
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	619a      	str	r2, [r3, #24]
      break;
 800460e:	e064      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f960 	bl	80048dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699a      	ldr	r2, [r3, #24]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800462a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800463a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6999      	ldr	r1, [r3, #24]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	021a      	lsls	r2, r3, #8
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	430a      	orrs	r2, r1
 800464e:	619a      	str	r2, [r3, #24]
      break;
 8004650:	e043      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68b9      	ldr	r1, [r7, #8]
 8004658:	4618      	mov	r0, r3
 800465a:	f000 f9a9 	bl	80049b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69da      	ldr	r2, [r3, #28]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0208 	orr.w	r2, r2, #8
 800466c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	69da      	ldr	r2, [r3, #28]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f022 0204 	bic.w	r2, r2, #4
 800467c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	69d9      	ldr	r1, [r3, #28]
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	61da      	str	r2, [r3, #28]
      break;
 8004690:	e023      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	4618      	mov	r0, r3
 800469a:	f000 f9f3 	bl	8004a84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	69da      	ldr	r2, [r3, #28]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69d9      	ldr	r1, [r3, #28]
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	021a      	lsls	r2, r3, #8
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	61da      	str	r2, [r3, #28]
      break;
 80046d2:	e002      	b.n	80046da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
      break;
 80046d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80046e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	bc80      	pop	{r7}
 800470e:	4770      	bx	lr

08004710 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004718:	bf00      	nop
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr

08004722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr

08004734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a2f      	ldr	r2, [pc, #188]	@ (8004804 <TIM_Base_SetConfig+0xd0>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00b      	beq.n	8004764 <TIM_Base_SetConfig+0x30>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004752:	d007      	beq.n	8004764 <TIM_Base_SetConfig+0x30>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a2c      	ldr	r2, [pc, #176]	@ (8004808 <TIM_Base_SetConfig+0xd4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_Base_SetConfig+0x30>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a2b      	ldr	r2, [pc, #172]	@ (800480c <TIM_Base_SetConfig+0xd8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d108      	bne.n	8004776 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a22      	ldr	r2, [pc, #136]	@ (8004804 <TIM_Base_SetConfig+0xd0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d00b      	beq.n	8004796 <TIM_Base_SetConfig+0x62>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004784:	d007      	beq.n	8004796 <TIM_Base_SetConfig+0x62>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1f      	ldr	r2, [pc, #124]	@ (8004808 <TIM_Base_SetConfig+0xd4>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d003      	beq.n	8004796 <TIM_Base_SetConfig+0x62>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a1e      	ldr	r2, [pc, #120]	@ (800480c <TIM_Base_SetConfig+0xd8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d108      	bne.n	80047a8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800479c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004804 <TIM_Base_SetConfig+0xd0>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d005      	beq.n	80047fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]
  }
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800

08004810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004810:	b480      	push	{r7}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	f023 0201 	bic.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800483e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 0302 	bic.w	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <TIM_OC1_SetConfig+0xc8>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d10c      	bne.n	8004886 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f023 0308 	bic.w	r3, r3, #8
 8004872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	4313      	orrs	r3, r2
 800487c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	f023 0304 	bic.w	r3, r3, #4
 8004884:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a13      	ldr	r2, [pc, #76]	@ (80048d8 <TIM_OC1_SetConfig+0xc8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d111      	bne.n	80048b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004894:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800489c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685a      	ldr	r2, [r3, #4]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00

080048dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	f023 0210 	bic.w	r2, r3, #16
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800490a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004912:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	021b      	lsls	r3, r3, #8
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4313      	orrs	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	f023 0320 	bic.w	r3, r3, #32
 8004926:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	011b      	lsls	r3, r3, #4
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4a1d      	ldr	r2, [pc, #116]	@ (80049ac <TIM_OC2_SetConfig+0xd0>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d10d      	bne.n	8004958 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004956:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a14      	ldr	r2, [pc, #80]	@ (80049ac <TIM_OC2_SetConfig+0xd0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d113      	bne.n	8004988 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800496e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	4313      	orrs	r3, r2
 800497a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	4313      	orrs	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bc80      	pop	{r7}
 80049aa:	4770      	bx	lr
 80049ac:	40012c00 	.word	0x40012c00

080049b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69db      	ldr	r3, [r3, #28]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	021b      	lsls	r3, r3, #8
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a1d      	ldr	r2, [pc, #116]	@ (8004a80 <TIM_OC3_SetConfig+0xd0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d10d      	bne.n	8004a2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	021b      	lsls	r3, r3, #8
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a14      	ldr	r2, [pc, #80]	@ (8004a80 <TIM_OC3_SetConfig+0xd0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d113      	bne.n	8004a5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	011b      	lsls	r3, r3, #4
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	693a      	ldr	r2, [r7, #16]
 8004a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	697a      	ldr	r2, [r7, #20]
 8004a72:	621a      	str	r2, [r3, #32]
}
 8004a74:	bf00      	nop
 8004a76:	371c      	adds	r7, #28
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40012c00 	.word	0x40012c00

08004a84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ace:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	031b      	lsls	r3, r3, #12
 8004ad6:	693a      	ldr	r2, [r7, #16]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a0f      	ldr	r2, [pc, #60]	@ (8004b1c <TIM_OC4_SetConfig+0x98>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d109      	bne.n	8004af8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	019b      	lsls	r3, r3, #6
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	621a      	str	r2, [r3, #32]
}
 8004b12:	bf00      	nop
 8004b14:	371c      	adds	r7, #28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bc80      	pop	{r7}
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00

08004b20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 031f 	and.w	r3, r3, #31
 8004b32:	2201      	movs	r2, #1
 8004b34:	fa02 f303 	lsl.w	r3, r2, r3
 8004b38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6a1a      	ldr	r2, [r3, #32]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	43db      	mvns	r3, r3
 8004b42:	401a      	ands	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1a      	ldr	r2, [r3, #32]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f003 031f 	and.w	r3, r3, #31
 8004b52:	6879      	ldr	r1, [r7, #4]
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	621a      	str	r2, [r3, #32]
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d101      	bne.n	8004b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	e046      	b.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68fa      	ldr	r2, [r7, #12]
 8004bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a16      	ldr	r2, [pc, #88]	@ (8004c18 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a12      	ldr	r2, [pc, #72]	@ (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a10      	ldr	r2, [pc, #64]	@ (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10c      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	40000400 	.word	0x40000400
 8004c20:	40000800 	.word	0x40000800

08004c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bc80      	pop	{r7}
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr

08004c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e042      	b.n	8004ce0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fd f8ec 	bl	8001e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2224      	movs	r2, #36	@ 0x24
 8004c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 ff4f 	bl	8005b30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	695a      	ldr	r2, [r3, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68da      	ldr	r2, [r3, #12]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b08a      	sub	sp, #40	@ 0x28
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	d175      	bne.n	8004df4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d002      	beq.n	8004d14 <HAL_UART_Transmit+0x2c>
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e06e      	b.n	8004df6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2221      	movs	r2, #33	@ 0x21
 8004d22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d26:	f7fd f987 	bl	8002038 <HAL_GetTick>
 8004d2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	88fa      	ldrh	r2, [r7, #6]
 8004d30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	88fa      	ldrh	r2, [r7, #6]
 8004d36:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d108      	bne.n	8004d54 <HAL_UART_Transmit+0x6c>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d104      	bne.n	8004d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	61bb      	str	r3, [r7, #24]
 8004d52:	e003      	b.n	8004d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d5c:	e02e      	b.n	8004dbc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	9300      	str	r3, [sp, #0]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2200      	movs	r2, #0
 8004d66:	2180      	movs	r1, #128	@ 0x80
 8004d68:	68f8      	ldr	r0, [r7, #12]
 8004d6a:	f000 fc2c 	bl	80055c6 <UART_WaitOnFlagUntilTimeout>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d005      	beq.n	8004d80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e03a      	b.n	8004df6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10b      	bne.n	8004d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	3302      	adds	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
 8004d9c:	e007      	b.n	8004dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	3301      	adds	r3, #1
 8004dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1cb      	bne.n	8004d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	2140      	movs	r1, #64	@ 0x40
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f000 fbf8 	bl	80055c6 <UART_WaitOnFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d005      	beq.n	8004de8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e006      	b.n	8004df6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	e000      	b.n	8004df6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004df4:	2302      	movs	r3, #2
  }
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b20      	cmp	r3, #32
 8004e16:	d112      	bne.n	8004e3e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <HAL_UART_Receive_DMA+0x26>
 8004e1e:	88fb      	ldrh	r3, [r7, #6]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d101      	bne.n	8004e28 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e00b      	b.n	8004e40 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	461a      	mov	r2, r3
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f000 fc1f 	bl	8005678 <UART_Start_Receive_DMA>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	e000      	b.n	8004e40 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004e3e:	2302      	movs	r3, #2
  }
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b0ba      	sub	sp, #232	@ 0xe8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10f      	bne.n	8004eae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_UART_IRQHandler+0x66>
 8004e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd84 	bl	80059b4 <UART_Receive_IT>
      return;
 8004eac:	e25b      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004eae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80de 	beq.w	8005074 <HAL_UART_IRQHandler+0x22c>
 8004eb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ebc:	f003 0301 	and.w	r3, r3, #1
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ec8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80d1 	beq.w	8005074 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xae>
 8004ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eee:	f043 0201 	orr.w	r2, r3, #1
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00b      	beq.n	8004f1a <HAL_UART_IRQHandler+0xd2>
 8004f02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f043 0202 	orr.w	r2, r3, #2
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_UART_IRQHandler+0xf6>
 8004f26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d005      	beq.n	8004f3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f36:	f043 0204 	orr.w	r2, r3, #4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f42:	f003 0308 	and.w	r3, r3, #8
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d011      	beq.n	8004f6e <HAL_UART_IRQHandler+0x126>
 8004f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d105      	bne.n	8004f62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f66:	f043 0208 	orr.w	r2, r3, #8
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 81f2 	beq.w	800535c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d008      	beq.n	8004f96 <HAL_UART_IRQHandler+0x14e>
 8004f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f88:	f003 0320 	and.w	r3, r3, #32
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d002      	beq.n	8004f96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 fd0f 	bl	80059b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	bf14      	ite	ne
 8004fa4:	2301      	movne	r3, #1
 8004fa6:	2300      	moveq	r3, #0
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <HAL_UART_IRQHandler+0x17a>
 8004fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04f      	beq.n	8005062 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fc19 	bl	80057fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d041      	beq.n	800505a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3314      	adds	r3, #20
 8004fdc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004fe4:	e853 3f00 	ldrex	r3, [r3]
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004fec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004ff0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ff4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	3314      	adds	r3, #20
 8004ffe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005002:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005006:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800500e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800501a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1d9      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d013      	beq.n	8005052 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800502e:	4a7e      	ldr	r2, [pc, #504]	@ (8005228 <HAL_UART_IRQHandler+0x3e0>)
 8005030:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005036:	4618      	mov	r0, r3
 8005038:	f7fd fa02 	bl	8002440 <HAL_DMA_Abort_IT>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d016      	beq.n	8005070 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800504c:	4610      	mov	r0, r2
 800504e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005050:	e00e      	b.n	8005070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f9a5 	bl	80053a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005058:	e00a      	b.n	8005070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f9a1 	bl	80053a2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005060:	e006      	b.n	8005070 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f000 f99d 	bl	80053a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800506e:	e175      	b.n	800535c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005070:	bf00      	nop
    return;
 8005072:	e173      	b.n	800535c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	f040 814f 	bne.w	800531c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800507e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005082:	f003 0310 	and.w	r3, r3, #16
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 8148 	beq.w	800531c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005090:	f003 0310 	and.w	r3, r3, #16
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8141 	beq.w	800531c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60bb      	str	r3, [r7, #8]
 80050ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	f000 80b6 	beq.w	800522c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8145 	beq.w	8005360 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80050da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050de:	429a      	cmp	r2, r3
 80050e0:	f080 813e 	bcs.w	8005360 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80050ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	f000 8088 	beq.w	8005208 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005102:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005106:	e853 3f00 	ldrex	r3, [r3]
 800510a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800510e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005112:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005116:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	330c      	adds	r3, #12
 8005120:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005124:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005130:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800513c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1d9      	bne.n	80050f8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	3314      	adds	r3, #20
 800514a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005154:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005168:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800516c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005170:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800517a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e1      	bne.n	8005144 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	3314      	adds	r3, #20
 8005186:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005188:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800518a:	e853 3f00 	ldrex	r3, [r3]
 800518e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005190:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3314      	adds	r3, #20
 80051a0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80051a4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80051a6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80051aa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80051ac:	e841 2300 	strex	r3, r2, [r1]
 80051b0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80051b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d1e3      	bne.n	8005180 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d0:	e853 3f00 	ldrex	r3, [r3]
 80051d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80051d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80051d8:	f023 0310 	bic.w	r3, r3, #16
 80051dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	330c      	adds	r3, #12
 80051e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80051ea:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051ec:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051f2:	e841 2300 	strex	r3, r2, [r1]
 80051f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e3      	bne.n	80051c6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005202:	4618      	mov	r0, r3
 8005204:	f7fd f8e0 	bl	80023c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005216:	b29b      	uxth	r3, r3
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	b29b      	uxth	r3, r3
 800521c:	4619      	mov	r1, r3
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f8c8 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005224:	e09c      	b.n	8005360 <HAL_UART_IRQHandler+0x518>
 8005226:	bf00      	nop
 8005228:	080058bf 	.word	0x080058bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005234:	b29b      	uxth	r3, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 808e 	beq.w	8005364 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8089 	beq.w	8005364 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800525a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525c:	e853 3f00 	ldrex	r3, [r3]
 8005260:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005264:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005268:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	330c      	adds	r3, #12
 8005272:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005276:	647a      	str	r2, [r7, #68]	@ 0x44
 8005278:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800527c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800527e:	e841 2300 	strex	r3, r2, [r1]
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1e3      	bne.n	8005252 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	3314      	adds	r3, #20
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	e853 3f00 	ldrex	r3, [r3]
 8005298:	623b      	str	r3, [r7, #32]
   return(result);
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	f023 0301 	bic.w	r3, r3, #1
 80052a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3314      	adds	r3, #20
 80052aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80052ae:	633a      	str	r2, [r7, #48]	@ 0x30
 80052b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80052b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b6:	e841 2300 	strex	r3, r2, [r1]
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80052bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1e3      	bne.n	800528a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2200      	movs	r2, #0
 80052ce:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	e853 3f00 	ldrex	r3, [r3]
 80052de:	60fb      	str	r3, [r7, #12]
   return(result);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0310 	bic.w	r3, r3, #16
 80052e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80052f4:	61fa      	str	r2, [r7, #28]
 80052f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	69b9      	ldr	r1, [r7, #24]
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	617b      	str	r3, [r7, #20]
   return(result);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e3      	bne.n	80052d0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800530e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f84d 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800531a:	e023      	b.n	8005364 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800531c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005324:	2b00      	cmp	r3, #0
 8005326:	d009      	beq.n	800533c <HAL_UART_IRQHandler+0x4f4>
 8005328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800532c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fad6 	bl	80058e6 <UART_Transmit_IT>
    return;
 800533a:	e014      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800533c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00e      	beq.n	8005366 <HAL_UART_IRQHandler+0x51e>
 8005348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800534c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fb15 	bl	8005984 <UART_EndTransmit_IT>
    return;
 800535a:	e004      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
    return;
 800535c:	bf00      	nop
 800535e:	e002      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
      return;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <HAL_UART_IRQHandler+0x51e>
      return;
 8005364:	bf00      	nop
  }
}
 8005366:	37e8      	adds	r7, #232	@ 0xe8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	460b      	mov	r3, r1
 80053be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr

080053ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b09c      	sub	sp, #112	@ 0x70
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 0320 	and.w	r3, r3, #32
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d172      	bne.n	80054cc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80053e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053e8:	2200      	movs	r2, #0
 80053ea:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80053fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005402:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005404:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	330c      	adds	r3, #12
 800540a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800540c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800540e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005412:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800541a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e5      	bne.n	80053ec <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	667b      	str	r3, [r7, #100]	@ 0x64
 8005438:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3314      	adds	r3, #20
 800543e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005440:	647a      	str	r2, [r7, #68]	@ 0x44
 8005442:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005454:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3314      	adds	r3, #20
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800545e:	e853 3f00 	ldrex	r3, [r3]
 8005462:	623b      	str	r3, [r7, #32]
   return(result);
 8005464:	6a3b      	ldr	r3, [r7, #32]
 8005466:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800546a:	663b      	str	r3, [r7, #96]	@ 0x60
 800546c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3314      	adds	r3, #20
 8005472:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005474:	633a      	str	r2, [r7, #48]	@ 0x30
 8005476:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005478:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800547a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800547c:	e841 2300 	strex	r3, r2, [r1]
 8005480:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	d1e5      	bne.n	8005454 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005488:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005490:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005494:	2b01      	cmp	r3, #1
 8005496:	d119      	bne.n	80054cc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	330c      	adds	r3, #12
 800549e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	e853 3f00 	ldrex	r3, [r3]
 80054a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0310 	bic.w	r3, r3, #16
 80054ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80054b8:	61fa      	str	r2, [r7, #28]
 80054ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	69b9      	ldr	r1, [r7, #24]
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	617b      	str	r3, [r7, #20]
   return(result);
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e5      	bne.n	8005498 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ce:	2200      	movs	r2, #0
 80054d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d106      	bne.n	80054e8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054de:	4619      	mov	r1, r3
 80054e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80054e2:	f7ff ff67 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80054e6:	e002      	b.n	80054ee <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80054e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80054ea:	f7ff ff48 	bl	800537e <HAL_UART_RxCpltCallback>
}
 80054ee:	bf00      	nop
 80054f0:	3770      	adds	r7, #112	@ 0x70
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b084      	sub	sp, #16
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2201      	movs	r2, #1
 8005508:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	2b01      	cmp	r3, #1
 8005510:	d108      	bne.n	8005524 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005516:	085b      	lsrs	r3, r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	4619      	mov	r1, r3
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff ff49 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005522:	e002      	b.n	800552a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f7ff ff33 	bl	8005390 <HAL_UART_RxHalfCpltCallback>
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005542:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800554e:	2b00      	cmp	r3, #0
 8005550:	bf14      	ite	ne
 8005552:	2301      	movne	r3, #1
 8005554:	2300      	moveq	r3, #0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b21      	cmp	r3, #33	@ 0x21
 8005564:	d108      	bne.n	8005578 <UART_DMAError+0x46>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d005      	beq.n	8005578 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2200      	movs	r2, #0
 8005570:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005572:	68b8      	ldr	r0, [r7, #8]
 8005574:	f000 f91a 	bl	80057ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b22      	cmp	r3, #34	@ 0x22
 8005598:	d108      	bne.n	80055ac <UART_DMAError+0x7a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	2200      	movs	r2, #0
 80055a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f000 f927 	bl	80057fa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b0:	f043 0210 	orr.w	r2, r3, #16
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055b8:	68b8      	ldr	r0, [r7, #8]
 80055ba:	f7ff fef2 	bl	80053a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b086      	sub	sp, #24
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	4613      	mov	r3, r2
 80055d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	e03b      	b.n	8005650 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055d8:	6a3b      	ldr	r3, [r7, #32]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d037      	beq.n	8005650 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055e0:	f7fc fd2a 	bl	8002038 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	6a3a      	ldr	r2, [r7, #32]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d302      	bcc.n	80055f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e03a      	b.n	8005670 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	d023      	beq.n	8005650 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	2b80      	cmp	r3, #128	@ 0x80
 800560c:	d020      	beq.n	8005650 <UART_WaitOnFlagUntilTimeout+0x8a>
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	2b40      	cmp	r3, #64	@ 0x40
 8005612:	d01d      	beq.n	8005650 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b08      	cmp	r3, #8
 8005620:	d116      	bne.n	8005650 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f8de 	bl	80057fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2208      	movs	r2, #8
 8005642:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e00f      	b.n	8005670 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	4013      	ands	r3, r2
 800565a:	68ba      	ldr	r2, [r7, #8]
 800565c:	429a      	cmp	r2, r3
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	461a      	mov	r2, r3
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	429a      	cmp	r2, r3
 800566c:	d0b4      	beq.n	80055d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3718      	adds	r7, #24
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b098      	sub	sp, #96	@ 0x60
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	88fa      	ldrh	r2, [r7, #6]
 8005690:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2200      	movs	r2, #0
 8005696:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2222      	movs	r2, #34	@ 0x22
 800569c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056a4:	4a3e      	ldr	r2, [pc, #248]	@ (80057a0 <UART_Start_Receive_DMA+0x128>)
 80056a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ac:	4a3d      	ldr	r2, [pc, #244]	@ (80057a4 <UART_Start_Receive_DMA+0x12c>)
 80056ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b4:	4a3c      	ldr	r2, [pc, #240]	@ (80057a8 <UART_Start_Receive_DMA+0x130>)
 80056b6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	2200      	movs	r2, #0
 80056be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80056c0:	f107 0308 	add.w	r3, r7, #8
 80056c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3304      	adds	r3, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	88fb      	ldrh	r3, [r7, #6]
 80056d8:	f7fc fe16 	bl	8002308 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80056dc:	2300      	movs	r3, #0
 80056de:	613b      	str	r3, [r7, #16]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	613b      	str	r3, [r7, #16]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d019      	beq.n	800572e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	330c      	adds	r3, #12
 8005700:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005702:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800570a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800570c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005710:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	330c      	adds	r3, #12
 8005718:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800571a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800571c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e5      	bne.n	80056fa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3314      	adds	r3, #20
 8005734:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005738:	e853 3f00 	ldrex	r3, [r3]
 800573c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005740:	f043 0301 	orr.w	r3, r3, #1
 8005744:	657b      	str	r3, [r7, #84]	@ 0x54
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	3314      	adds	r3, #20
 800574c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800574e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005750:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005754:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800575c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e5      	bne.n	800572e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	617b      	str	r3, [r7, #20]
   return(result);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005778:	653b      	str	r3, [r7, #80]	@ 0x50
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005782:	627a      	str	r2, [r7, #36]	@ 0x24
 8005784:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6a39      	ldr	r1, [r7, #32]
 8005788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e5      	bne.n	8005762 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3760      	adds	r7, #96	@ 0x60
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}
 80057a0:	080053cb 	.word	0x080053cb
 80057a4:	080054f7 	.word	0x080054f7
 80057a8:	08005533 	.word	0x08005533

080057ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b089      	sub	sp, #36	@ 0x24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	330c      	adds	r3, #12
 80057ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	330c      	adds	r3, #12
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	61ba      	str	r2, [r7, #24]
 80057d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d8:	6979      	ldr	r1, [r7, #20]
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	e841 2300 	strex	r3, r2, [r1]
 80057e0:	613b      	str	r3, [r7, #16]
   return(result);
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1e5      	bne.n	80057b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80057f0:	bf00      	nop
 80057f2:	3724      	adds	r7, #36	@ 0x24
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b095      	sub	sp, #84	@ 0x54
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	330c      	adds	r3, #12
 8005808:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005818:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	330c      	adds	r3, #12
 8005820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005822:	643a      	str	r2, [r7, #64]	@ 0x40
 8005824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005826:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005828:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800582a:	e841 2300 	strex	r3, r2, [r1]
 800582e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e5      	bne.n	8005802 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	3314      	adds	r3, #20
 800583c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6a3b      	ldr	r3, [r7, #32]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	61fb      	str	r3, [r7, #28]
   return(result);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	3314      	adds	r3, #20
 8005854:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005858:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800585c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e5      	bne.n	8005836 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800586e:	2b01      	cmp	r3, #1
 8005870:	d119      	bne.n	80058a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	330c      	adds	r3, #12
 8005878:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	e853 3f00 	ldrex	r3, [r3]
 8005880:	60bb      	str	r3, [r7, #8]
   return(result);
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	f023 0310 	bic.w	r3, r3, #16
 8005888:	647b      	str	r3, [r7, #68]	@ 0x44
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	330c      	adds	r3, #12
 8005890:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005892:	61ba      	str	r2, [r7, #24]
 8005894:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6979      	ldr	r1, [r7, #20]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	613b      	str	r3, [r7, #16]
   return(result);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e5      	bne.n	8005872 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058b4:	bf00      	nop
 80058b6:	3754      	adds	r7, #84	@ 0x54
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bc80      	pop	{r7}
 80058bc:	4770      	bx	lr

080058be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b084      	sub	sp, #16
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f7ff fd62 	bl	80053a2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b085      	sub	sp, #20
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b21      	cmp	r3, #33	@ 0x21
 80058f8:	d13e      	bne.n	8005978 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005902:	d114      	bne.n	800592e <UART_Transmit_IT+0x48>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d110      	bne.n	800592e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a1b      	ldr	r3, [r3, #32]
 8005910:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005920:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a1b      	ldr	r3, [r3, #32]
 8005926:	1c9a      	adds	r2, r3, #2
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]
 800592c:	e008      	b.n	8005940 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a1b      	ldr	r3, [r3, #32]
 8005932:	1c59      	adds	r1, r3, #1
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	6211      	str	r1, [r2, #32]
 8005938:	781a      	ldrb	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005944:	b29b      	uxth	r3, r3
 8005946:	3b01      	subs	r3, #1
 8005948:	b29b      	uxth	r3, r3
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4619      	mov	r1, r3
 800594e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10f      	bne.n	8005974 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68da      	ldr	r2, [r3, #12]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005962:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005972:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	e000      	b.n	800597a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005978:	2302      	movs	r3, #2
  }
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff fce1 	bl	800536c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3708      	adds	r7, #8
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b22      	cmp	r3, #34	@ 0x22
 80059c6:	f040 80ae 	bne.w	8005b26 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059d2:	d117      	bne.n	8005a04 <UART_Receive_IT+0x50>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d113      	bne.n	8005a04 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059dc:	2300      	movs	r3, #0
 80059de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fc:	1c9a      	adds	r2, r3, #2
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a02:	e026      	b.n	8005a52 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a16:	d007      	beq.n	8005a28 <UART_Receive_IT+0x74>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <UART_Receive_IT+0x82>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a32:	701a      	strb	r2, [r3, #0]
 8005a34:	e008      	b.n	8005a48 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a46:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4619      	mov	r1, r3
 8005a60:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d15d      	bne.n	8005b22 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68da      	ldr	r2, [r3, #12]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0220 	bic.w	r2, r2, #32
 8005a74:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	68da      	ldr	r2, [r3, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a84:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0201 	bic.w	r2, r2, #1
 8005a94:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d135      	bne.n	8005b18 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	330c      	adds	r3, #12
 8005ab8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f023 0310 	bic.w	r3, r3, #16
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	330c      	adds	r3, #12
 8005ad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ad2:	623a      	str	r2, [r7, #32]
 8005ad4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	69f9      	ldr	r1, [r7, #28]
 8005ad8:	6a3a      	ldr	r2, [r7, #32]
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	2b10      	cmp	r3, #16
 8005af2:	d10a      	bne.n	8005b0a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005af4:	2300      	movs	r3, #0
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b0e:	4619      	mov	r1, r3
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f7ff fc4f 	bl	80053b4 <HAL_UARTEx_RxEventCallback>
 8005b16:	e002      	b.n	8005b1e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f7ff fc30 	bl	800537e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	e002      	b.n	8005b28 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e000      	b.n	8005b28 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b26:	2302      	movs	r3, #2
  }
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3730      	adds	r7, #48	@ 0x30
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68da      	ldr	r2, [r3, #12]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689a      	ldr	r2, [r3, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005b6a:	f023 030c 	bic.w	r3, r3, #12
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	6812      	ldr	r2, [r2, #0]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	430b      	orrs	r3, r1
 8005b76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	699a      	ldr	r2, [r3, #24]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a2c      	ldr	r2, [pc, #176]	@ (8005c44 <UART_SetConfig+0x114>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d103      	bne.n	8005ba0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b98:	f7fe f994 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	e002      	b.n	8005ba6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ba0:	f7fe f97c 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8005ba4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	4413      	add	r3, r2
 8005bae:	009a      	lsls	r2, r3, #2
 8005bb0:	441a      	add	r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	4a22      	ldr	r2, [pc, #136]	@ (8005c48 <UART_SetConfig+0x118>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	0119      	lsls	r1, r3, #4
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8005c48 <UART_SetConfig+0x118>)
 8005bde:	fba3 0302 	umull	r0, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2064      	movs	r0, #100	@ 0x64
 8005be6:	fb00 f303 	mul.w	r3, r0, r3
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	3332      	adds	r3, #50	@ 0x32
 8005bf0:	4a15      	ldr	r2, [pc, #84]	@ (8005c48 <UART_SetConfig+0x118>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005bfc:	4419      	add	r1, r3
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4613      	mov	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	4413      	add	r3, r2
 8005c06:	009a      	lsls	r2, r3, #2
 8005c08:	441a      	add	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c14:	4b0c      	ldr	r3, [pc, #48]	@ (8005c48 <UART_SetConfig+0x118>)
 8005c16:	fba3 0302 	umull	r0, r3, r3, r2
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2064      	movs	r0, #100	@ 0x64
 8005c1e:	fb00 f303 	mul.w	r3, r0, r3
 8005c22:	1ad3      	subs	r3, r2, r3
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	3332      	adds	r3, #50	@ 0x32
 8005c28:	4a07      	ldr	r2, [pc, #28]	@ (8005c48 <UART_SetConfig+0x118>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	f003 020f 	and.w	r2, r3, #15
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	440a      	add	r2, r1
 8005c3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005c3c:	bf00      	nop
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40013800 	.word	0x40013800
 8005c48:	51eb851f 	.word	0x51eb851f

08005c4c <__NVIC_SetPriority>:
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	6039      	str	r1, [r7, #0]
 8005c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	db0a      	blt.n	8005c76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	490c      	ldr	r1, [pc, #48]	@ (8005c98 <__NVIC_SetPriority+0x4c>)
 8005c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6a:	0112      	lsls	r2, r2, #4
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	440b      	add	r3, r1
 8005c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005c74:	e00a      	b.n	8005c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	4908      	ldr	r1, [pc, #32]	@ (8005c9c <__NVIC_SetPriority+0x50>)
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	3b04      	subs	r3, #4
 8005c84:	0112      	lsls	r2, r2, #4
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	440b      	add	r3, r1
 8005c8a:	761a      	strb	r2, [r3, #24]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bc80      	pop	{r7}
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	e000e100 	.word	0xe000e100
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005ca4:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <SysTick_Handler+0x1c>)
 8005ca6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ca8:	f002 f870 	bl	8007d8c <xTaskGetSchedulerState>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d001      	beq.n	8005cb6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005cb2:	f002 ff11 	bl	8008ad8 <xPortSysTickHandler>
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	e000e010 	.word	0xe000e010

08005cc0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	f06f 0004 	mvn.w	r0, #4
 8005cca:	f7ff ffbf 	bl	8005c4c <__NVIC_SetPriority>
#endif
}
 8005cce:	bf00      	nop
 8005cd0:	bd80      	pop	{r7, pc}
	...

08005cd4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cda:	f3ef 8305 	mrs	r3, IPSR
 8005cde:	603b      	str	r3, [r7, #0]
  return(result);
 8005ce0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d003      	beq.n	8005cee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ce6:	f06f 0305 	mvn.w	r3, #5
 8005cea:	607b      	str	r3, [r7, #4]
 8005cec:	e00c      	b.n	8005d08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005cee:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <osKernelInitialize+0x40>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d105      	bne.n	8005d02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005cf6:	4b07      	ldr	r3, [pc, #28]	@ (8005d14 <osKernelInitialize+0x40>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	607b      	str	r3, [r7, #4]
 8005d00:	e002      	b.n	8005d08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005d02:	f04f 33ff 	mov.w	r3, #4294967295
 8005d06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d08:	687b      	ldr	r3, [r7, #4]
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr
 8005d14:	20000770 	.word	0x20000770

08005d18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d1e:	f3ef 8305 	mrs	r3, IPSR
 8005d22:	603b      	str	r3, [r7, #0]
  return(result);
 8005d24:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005d2a:	f06f 0305 	mvn.w	r3, #5
 8005d2e:	607b      	str	r3, [r7, #4]
 8005d30:	e010      	b.n	8005d54 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005d32:	4b0b      	ldr	r3, [pc, #44]	@ (8005d60 <osKernelStart+0x48>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d109      	bne.n	8005d4e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005d3a:	f7ff ffc1 	bl	8005cc0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005d3e:	4b08      	ldr	r3, [pc, #32]	@ (8005d60 <osKernelStart+0x48>)
 8005d40:	2202      	movs	r2, #2
 8005d42:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005d44:	f001 fbb4 	bl	80074b0 <vTaskStartScheduler>
      stat = osOK;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	607b      	str	r3, [r7, #4]
 8005d4c:	e002      	b.n	8005d54 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005d54:	687b      	ldr	r3, [r7, #4]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3708      	adds	r7, #8
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	20000770 	.word	0x20000770

08005d64 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	@ 0x38
 8005d68:	af04      	add	r7, sp, #16
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005d70:	2300      	movs	r3, #0
 8005d72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d74:	f3ef 8305 	mrs	r3, IPSR
 8005d78:	617b      	str	r3, [r7, #20]
  return(result);
 8005d7a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d17e      	bne.n	8005e7e <osThreadNew+0x11a>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d07b      	beq.n	8005e7e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005d86:	2380      	movs	r3, #128	@ 0x80
 8005d88:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005d8a:	2318      	movs	r3, #24
 8005d8c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d045      	beq.n	8005e2a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <osThreadNew+0x48>
        name = attr->name;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d002      	beq.n	8005dba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d008      	beq.n	8005dd2 <osThreadNew+0x6e>
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b38      	cmp	r3, #56	@ 0x38
 8005dc4:	d805      	bhi.n	8005dd2 <osThreadNew+0x6e>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <osThreadNew+0x72>
        return (NULL);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e054      	b.n	8005e80 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	089b      	lsrs	r3, r3, #2
 8005de4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00e      	beq.n	8005e0c <osThreadNew+0xa8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	2ba7      	cmp	r3, #167	@ 0xa7
 8005df4:	d90a      	bls.n	8005e0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d006      	beq.n	8005e0c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <osThreadNew+0xa8>
        mem = 1;
 8005e06:	2301      	movs	r3, #1
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	e010      	b.n	8005e2e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10c      	bne.n	8005e2e <osThreadNew+0xca>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d108      	bne.n	8005e2e <osThreadNew+0xca>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <osThreadNew+0xca>
          mem = 0;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
 8005e28:	e001      	b.n	8005e2e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d110      	bne.n	8005e56 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005e3c:	9202      	str	r2, [sp, #8]
 8005e3e:	9301      	str	r3, [sp, #4]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	9300      	str	r3, [sp, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6a3a      	ldr	r2, [r7, #32]
 8005e48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f001 f93c 	bl	80070c8 <xTaskCreateStatic>
 8005e50:	4603      	mov	r3, r0
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	e013      	b.n	8005e7e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d110      	bne.n	8005e7e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	b29a      	uxth	r2, r3
 8005e60:	f107 0310 	add.w	r3, r7, #16
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f001 f98a 	bl	8007188 <xTaskCreate>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d001      	beq.n	8005e7e <osThreadNew+0x11a>
            hTask = NULL;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005e7e:	693b      	ldr	r3, [r7, #16]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3728      	adds	r7, #40	@ 0x28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e90:	f3ef 8305 	mrs	r3, IPSR
 8005e94:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e96:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d003      	beq.n	8005ea4 <osDelay+0x1c>
    stat = osErrorISR;
 8005e9c:	f06f 0305 	mvn.w	r3, #5
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	e007      	b.n	8005eb4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f001 fac8 	bl	8007444 <vTaskDelay>
    }
  }

  return (stat);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b088      	sub	sp, #32
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eca:	f3ef 8305 	mrs	r3, IPSR
 8005ece:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ed0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d174      	bne.n	8005fc0 <osMutexNew+0x102>
    if (attr != NULL) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e001      	b.n	8005ee8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <osMutexNew+0x3a>
      rmtx = 1U;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e001      	b.n	8005efc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005efc:	69bb      	ldr	r3, [r7, #24]
 8005efe:	f003 0308 	and.w	r3, r3, #8
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d15c      	bne.n	8005fc0 <osMutexNew+0x102>
      mem = -1;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d015      	beq.n	8005f3e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d006      	beq.n	8005f28 <osMutexNew+0x6a>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005f20:	d902      	bls.n	8005f28 <osMutexNew+0x6a>
          mem = 1;
 8005f22:	2301      	movs	r3, #1
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	e00c      	b.n	8005f42 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d108      	bne.n	8005f42 <osMutexNew+0x84>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d104      	bne.n	8005f42 <osMutexNew+0x84>
            mem = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	e001      	b.n	8005f42 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d112      	bne.n	8005f6e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4619      	mov	r1, r3
 8005f54:	2004      	movs	r0, #4
 8005f56:	f000 fb1a 	bl	800658e <xQueueCreateMutexStatic>
 8005f5a:	61f8      	str	r0, [r7, #28]
 8005f5c:	e016      	b.n	8005f8c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	4619      	mov	r1, r3
 8005f64:	2001      	movs	r0, #1
 8005f66:	f000 fb12 	bl	800658e <xQueueCreateMutexStatic>
 8005f6a:	61f8      	str	r0, [r7, #28]
 8005f6c:	e00e      	b.n	8005f8c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10b      	bne.n	8005f8c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d004      	beq.n	8005f84 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005f7a:	2004      	movs	r0, #4
 8005f7c:	f000 faef 	bl	800655e <xQueueCreateMutex>
 8005f80:	61f8      	str	r0, [r7, #28]
 8005f82:	e003      	b.n	8005f8c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005f84:	2001      	movs	r0, #1
 8005f86:	f000 faea 	bl	800655e <xQueueCreateMutex>
 8005f8a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <osMutexNew+0xee>
        if (attr != NULL) {
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d003      	beq.n	8005fa0 <osMutexNew+0xe2>
          name = attr->name;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	e001      	b.n	8005fa4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005fa4:	68f9      	ldr	r1, [r7, #12]
 8005fa6:	69f8      	ldr	r0, [r7, #28]
 8005fa8:	f001 f832 	bl	8007010 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d006      	beq.n	8005fc0 <osMutexNew+0x102>
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d003      	beq.n	8005fc0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b086      	sub	sp, #24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fe8:	f3ef 8305 	mrs	r3, IPSR
 8005fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005ff4:	f06f 0305 	mvn.w	r3, #5
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e02c      	b.n	8006056 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d103      	bne.n	800600a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006002:	f06f 0303 	mvn.w	r3, #3
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e025      	b.n	8006056 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d011      	beq.n	8006034 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006010:	6839      	ldr	r1, [r7, #0]
 8006012:	6938      	ldr	r0, [r7, #16]
 8006014:	f000 fb0b 	bl	800662e <xQueueTakeMutexRecursive>
 8006018:	4603      	mov	r3, r0
 800601a:	2b01      	cmp	r3, #1
 800601c:	d01b      	beq.n	8006056 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d003      	beq.n	800602c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006024:	f06f 0301 	mvn.w	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	e014      	b.n	8006056 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800602c:	f06f 0302 	mvn.w	r3, #2
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e010      	b.n	8006056 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006034:	6839      	ldr	r1, [r7, #0]
 8006036:	6938      	ldr	r0, [r7, #16]
 8006038:	f000 fdb2 	bl	8006ba0 <xQueueSemaphoreTake>
 800603c:	4603      	mov	r3, r0
 800603e:	2b01      	cmp	r3, #1
 8006040:	d009      	beq.n	8006056 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006048:	f06f 0301 	mvn.w	r3, #1
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e002      	b.n	8006056 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006050:	f06f 0302 	mvn.w	r3, #2
 8006054:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006056:	697b      	ldr	r3, [r7, #20]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f023 0301 	bic.w	r3, r3, #1
 800606e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006078:	2300      	movs	r3, #0
 800607a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800607c:	f3ef 8305 	mrs	r3, IPSR
 8006080:	60bb      	str	r3, [r7, #8]
  return(result);
 8006082:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006084:	2b00      	cmp	r3, #0
 8006086:	d003      	beq.n	8006090 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006088:	f06f 0305 	mvn.w	r3, #5
 800608c:	617b      	str	r3, [r7, #20]
 800608e:	e01f      	b.n	80060d0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d103      	bne.n	800609e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006096:	f06f 0303 	mvn.w	r3, #3
 800609a:	617b      	str	r3, [r7, #20]
 800609c:	e018      	b.n	80060d0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80060a4:	6938      	ldr	r0, [r7, #16]
 80060a6:	f000 fa8d 	bl	80065c4 <xQueueGiveMutexRecursive>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d00f      	beq.n	80060d0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80060b0:	f06f 0302 	mvn.w	r3, #2
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	e00b      	b.n	80060d0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80060b8:	2300      	movs	r3, #0
 80060ba:	2200      	movs	r2, #0
 80060bc:	2100      	movs	r1, #0
 80060be:	6938      	ldr	r0, [r7, #16]
 80060c0:	f000 faec 	bl	800669c <xQueueGenericSend>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d002      	beq.n	80060d0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80060ca:	f06f 0302 	mvn.w	r3, #2
 80060ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80060d0:	697b      	ldr	r3, [r7, #20]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4a06      	ldr	r2, [pc, #24]	@ (8006104 <vApplicationGetIdleTaskMemory+0x28>)
 80060ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	4a05      	ldr	r2, [pc, #20]	@ (8006108 <vApplicationGetIdleTaskMemory+0x2c>)
 80060f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2280      	movs	r2, #128	@ 0x80
 80060f8:	601a      	str	r2, [r3, #0]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr
 8006104:	20000774 	.word	0x20000774
 8006108:	2000081c 	.word	0x2000081c

0800610c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4a07      	ldr	r2, [pc, #28]	@ (8006138 <vApplicationGetTimerTaskMemory+0x2c>)
 800611c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	4a06      	ldr	r2, [pc, #24]	@ (800613c <vApplicationGetTimerTaskMemory+0x30>)
 8006122:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800612a:	601a      	str	r2, [r3, #0]
}
 800612c:	bf00      	nop
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	bc80      	pop	{r7}
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	20000a1c 	.word	0x20000a1c
 800613c:	20000ac4 	.word	0x20000ac4

08006140 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f103 0208 	add.w	r2, r3, #8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f04f 32ff 	mov.w	r2, #4294967295
 8006158:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f103 0208 	add.w	r2, r3, #8
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f103 0208 	add.w	r2, r3, #8
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	bc80      	pop	{r7}
 800617c:	4770      	bx	lr

0800617e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bc80      	pop	{r7}
 8006194:	4770      	bx	lr

08006196 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006196:	b480      	push	{r7}
 8006198:	b085      	sub	sp, #20
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
 800619e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	683a      	ldr	r2, [r7, #0]
 80061ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	601a      	str	r2, [r3, #0]
}
 80061d2:	bf00      	nop
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d103      	bne.n	80061fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e00c      	b.n	8006216 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3308      	adds	r3, #8
 8006200:	60fb      	str	r3, [r7, #12]
 8006202:	e002      	b.n	800620a <vListInsert+0x2e>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	60fb      	str	r3, [r7, #12]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68ba      	ldr	r2, [r7, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d2f6      	bcs.n	8006204 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	601a      	str	r2, [r3, #0]
}
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6892      	ldr	r2, [r2, #8]
 8006262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6852      	ldr	r2, [r2, #4]
 800626c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	429a      	cmp	r2, r3
 8006276:	d103      	bne.n	8006280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689a      	ldr	r2, [r3, #8]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1e5a      	subs	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	bc80      	pop	{r7}
 800629c:	4770      	bx	lr
	...

080062a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b8:	f383 8811 	msr	BASEPRI, r3
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80062c6:	bf00      	nop
 80062c8:	bf00      	nop
 80062ca:	e7fd      	b.n	80062c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80062cc:	f002 fb86 	bl	80089dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d8:	68f9      	ldr	r1, [r7, #12]
 80062da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80062dc:	fb01 f303 	mul.w	r3, r1, r3
 80062e0:	441a      	add	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2200      	movs	r2, #0
 80062ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062fc:	3b01      	subs	r3, #1
 80062fe:	68f9      	ldr	r1, [r7, #12]
 8006300:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006302:	fb01 f303 	mul.w	r3, r1, r3
 8006306:	441a      	add	r2, r3
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	22ff      	movs	r2, #255	@ 0xff
 8006310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	22ff      	movs	r2, #255	@ 0xff
 8006318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d114      	bne.n	800634c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d01a      	beq.n	8006360 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	3310      	adds	r3, #16
 800632e:	4618      	mov	r0, r3
 8006330:	f001 fb58 	bl	80079e4 <xTaskRemoveFromEventList>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d012      	beq.n	8006360 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <xQueueGenericReset+0xd0>)
 800633c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006340:	601a      	str	r2, [r3, #0]
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	e009      	b.n	8006360 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	3310      	adds	r3, #16
 8006350:	4618      	mov	r0, r3
 8006352:	f7ff fef5 	bl	8006140 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3324      	adds	r3, #36	@ 0x24
 800635a:	4618      	mov	r0, r3
 800635c:	f7ff fef0 	bl	8006140 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006360:	f002 fb6c 	bl	8008a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006364:	2301      	movs	r3, #1
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	e000ed04 	.word	0xe000ed04

08006374 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006374:	b580      	push	{r7, lr}
 8006376:	b08e      	sub	sp, #56	@ 0x38
 8006378:	af02      	add	r7, sp, #8
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
 8006380:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10b      	bne.n	80063a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638c:	f383 8811 	msr	BASEPRI, r3
 8006390:	f3bf 8f6f 	isb	sy
 8006394:	f3bf 8f4f 	dsb	sy
 8006398:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800639a:	bf00      	nop
 800639c:	bf00      	nop
 800639e:	e7fd      	b.n	800639c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	e7fd      	b.n	80063ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <xQueueGenericCreateStatic+0x56>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <xQueueGenericCreateStatic+0x5a>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <xQueueGenericCreateStatic+0x5c>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	623b      	str	r3, [r7, #32]
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d102      	bne.n	80063f8 <xQueueGenericCreateStatic+0x84>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <xQueueGenericCreateStatic+0x88>
 80063f8:	2301      	movs	r3, #1
 80063fa:	e000      	b.n	80063fe <xQueueGenericCreateStatic+0x8a>
 80063fc:	2300      	movs	r3, #0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d10b      	bne.n	800641a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006406:	f383 8811 	msr	BASEPRI, r3
 800640a:	f3bf 8f6f 	isb	sy
 800640e:	f3bf 8f4f 	dsb	sy
 8006412:	61fb      	str	r3, [r7, #28]
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop
 8006418:	e7fd      	b.n	8006416 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800641a:	2350      	movs	r3, #80	@ 0x50
 800641c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b50      	cmp	r3, #80	@ 0x50
 8006422:	d00b      	beq.n	800643c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	61bb      	str	r3, [r7, #24]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800643c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00d      	beq.n	8006464 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	2201      	movs	r2, #1
 800644c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006450:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 f840 	bl	80064e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006466:	4618      	mov	r0, r3
 8006468:	3730      	adds	r7, #48	@ 0x30
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800646e:	b580      	push	{r7, lr}
 8006470:	b08a      	sub	sp, #40	@ 0x28
 8006472:	af02      	add	r7, sp, #8
 8006474:	60f8      	str	r0, [r7, #12]
 8006476:	60b9      	str	r1, [r7, #8]
 8006478:	4613      	mov	r3, r2
 800647a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10b      	bne.n	800649a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006486:	f383 8811 	msr	BASEPRI, r3
 800648a:	f3bf 8f6f 	isb	sy
 800648e:	f3bf 8f4f 	dsb	sy
 8006492:	613b      	str	r3, [r7, #16]
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	e7fd      	b.n	8006496 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	68ba      	ldr	r2, [r7, #8]
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	3350      	adds	r3, #80	@ 0x50
 80064a8:	4618      	mov	r0, r3
 80064aa:	f002 fb99 	bl	8008be0 <pvPortMalloc>
 80064ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064b0:	69bb      	ldr	r3, [r7, #24]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d011      	beq.n	80064da <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	3350      	adds	r3, #80	@ 0x50
 80064be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80064c8:	79fa      	ldrb	r2, [r7, #7]
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	4613      	mov	r3, r2
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f805 	bl	80064e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80064da:	69bb      	ldr	r3, [r7, #24]
	}
 80064dc:	4618      	mov	r0, r3
 80064de:	3720      	adds	r7, #32
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
 80064f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d103      	bne.n	8006500 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e002      	b.n	8006506 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006506:	69bb      	ldr	r3, [r7, #24]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006512:	2101      	movs	r1, #1
 8006514:	69b8      	ldr	r0, [r7, #24]
 8006516:	f7ff fec3 	bl	80062a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800651a:	69bb      	ldr	r3, [r7, #24]
 800651c:	78fa      	ldrb	r2, [r7, #3]
 800651e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006522:	bf00      	nop
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00e      	beq.n	8006556 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800654a:	2300      	movs	r3, #0
 800654c:	2200      	movs	r2, #0
 800654e:	2100      	movs	r1, #0
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f8a3 	bl	800669c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800655e:	b580      	push	{r7, lr}
 8006560:	b086      	sub	sp, #24
 8006562:	af00      	add	r7, sp, #0
 8006564:	4603      	mov	r3, r0
 8006566:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006568:	2301      	movs	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	2300      	movs	r3, #0
 800656e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	461a      	mov	r2, r3
 8006574:	6939      	ldr	r1, [r7, #16]
 8006576:	6978      	ldr	r0, [r7, #20]
 8006578:	f7ff ff79 	bl	800646e <xQueueGenericCreate>
 800657c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff ffd3 	bl	800652a <prvInitialiseMutex>

		return xNewQueue;
 8006584:	68fb      	ldr	r3, [r7, #12]
	}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800658e:	b580      	push	{r7, lr}
 8006590:	b088      	sub	sp, #32
 8006592:	af02      	add	r7, sp, #8
 8006594:	4603      	mov	r3, r0
 8006596:	6039      	str	r1, [r7, #0]
 8006598:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800659a:	2301      	movs	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80065a2:	79fb      	ldrb	r3, [r7, #7]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2200      	movs	r2, #0
 80065aa:	6939      	ldr	r1, [r7, #16]
 80065ac:	6978      	ldr	r0, [r7, #20]
 80065ae:	f7ff fee1 	bl	8006374 <xQueueGenericCreateStatic>
 80065b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f7ff ffb8 	bl	800652a <prvInitialiseMutex>

		return xNewQueue;
 80065ba:	68fb      	ldr	r3, [r7, #12]
	}
 80065bc:	4618      	mov	r0, r3
 80065be:	3718      	adds	r7, #24
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80065c4:	b590      	push	{r4, r7, lr}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10b      	bne.n	80065ee <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	60fb      	str	r3, [r7, #12]
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	e7fd      	b.n	80065ea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	689c      	ldr	r4, [r3, #8]
 80065f2:	f001 fbbd 	bl	8007d70 <xTaskGetCurrentTaskHandle>
 80065f6:	4603      	mov	r3, r0
 80065f8:	429c      	cmp	r4, r3
 80065fa:	d111      	bne.n	8006620 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	1e5a      	subs	r2, r3, #1
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d105      	bne.n	800661a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800660e:	2300      	movs	r3, #0
 8006610:	2200      	movs	r2, #0
 8006612:	2100      	movs	r1, #0
 8006614:	6938      	ldr	r0, [r7, #16]
 8006616:	f000 f841 	bl	800669c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800661a:	2301      	movs	r3, #1
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	e001      	b.n	8006624 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006624:	697b      	ldr	r3, [r7, #20]
	}
 8006626:	4618      	mov	r0, r3
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	bd90      	pop	{r4, r7, pc}

0800662e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800662e:	b590      	push	{r4, r7, lr}
 8006630:	b087      	sub	sp, #28
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10b      	bne.n	800665a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	60fb      	str	r3, [r7, #12]
}
 8006654:	bf00      	nop
 8006656:	bf00      	nop
 8006658:	e7fd      	b.n	8006656 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	689c      	ldr	r4, [r3, #8]
 800665e:	f001 fb87 	bl	8007d70 <xTaskGetCurrentTaskHandle>
 8006662:	4603      	mov	r3, r0
 8006664:	429c      	cmp	r4, r3
 8006666:	d107      	bne.n	8006678 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	1c5a      	adds	r2, r3, #1
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006672:	2301      	movs	r3, #1
 8006674:	617b      	str	r3, [r7, #20]
 8006676:	e00c      	b.n	8006692 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6938      	ldr	r0, [r7, #16]
 800667c:	f000 fa90 	bl	8006ba0 <xQueueSemaphoreTake>
 8006680:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006692:	697b      	ldr	r3, [r7, #20]
	}
 8006694:	4618      	mov	r0, r3
 8006696:	371c      	adds	r7, #28
 8006698:	46bd      	mov	sp, r7
 800669a:	bd90      	pop	{r4, r7, pc}

0800669c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08e      	sub	sp, #56	@ 0x38
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066aa:	2300      	movs	r3, #0
 80066ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <xQueueGenericSend+0x34>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <xQueueGenericSend+0x42>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <xQueueGenericSend+0x46>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <xQueueGenericSend+0x48>
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <xQueueGenericSend+0x64>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	e7fd      	b.n	80066fc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b02      	cmp	r3, #2
 8006704:	d103      	bne.n	800670e <xQueueGenericSend+0x72>
 8006706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <xQueueGenericSend+0x76>
 800670e:	2301      	movs	r3, #1
 8006710:	e000      	b.n	8006714 <xQueueGenericSend+0x78>
 8006712:	2300      	movs	r3, #0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d10b      	bne.n	8006730 <xQueueGenericSend+0x94>
	__asm volatile
 8006718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671c:	f383 8811 	msr	BASEPRI, r3
 8006720:	f3bf 8f6f 	isb	sy
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	623b      	str	r3, [r7, #32]
}
 800672a:	bf00      	nop
 800672c:	bf00      	nop
 800672e:	e7fd      	b.n	800672c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006730:	f001 fb2c 	bl	8007d8c <xTaskGetSchedulerState>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d102      	bne.n	8006740 <xQueueGenericSend+0xa4>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d101      	bne.n	8006744 <xQueueGenericSend+0xa8>
 8006740:	2301      	movs	r3, #1
 8006742:	e000      	b.n	8006746 <xQueueGenericSend+0xaa>
 8006744:	2300      	movs	r3, #0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <xQueueGenericSend+0xc6>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	61fb      	str	r3, [r7, #28]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006762:	f002 f93b 	bl	80089dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006768:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800676a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800676c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676e:	429a      	cmp	r2, r3
 8006770:	d302      	bcc.n	8006778 <xQueueGenericSend+0xdc>
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	2b02      	cmp	r3, #2
 8006776:	d129      	bne.n	80067cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	68b9      	ldr	r1, [r7, #8]
 800677c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800677e:	f000 fb36 	bl	8006dee <prvCopyDataToQueue>
 8006782:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	d010      	beq.n	80067ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800678c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678e:	3324      	adds	r3, #36	@ 0x24
 8006790:	4618      	mov	r0, r3
 8006792:	f001 f927 	bl	80079e4 <xTaskRemoveFromEventList>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d013      	beq.n	80067c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800679c:	4b3f      	ldr	r3, [pc, #252]	@ (800689c <xQueueGenericSend+0x200>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	e00a      	b.n	80067c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d007      	beq.n	80067c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067b4:	4b39      	ldr	r3, [pc, #228]	@ (800689c <xQueueGenericSend+0x200>)
 80067b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067c4:	f002 f93a 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e063      	b.n	8006894 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d103      	bne.n	80067da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067d2:	f002 f933 	bl	8008a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067d6:	2300      	movs	r3, #0
 80067d8:	e05c      	b.n	8006894 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067e0:	f107 0314 	add.w	r3, r7, #20
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f961 	bl	8007aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067ea:	2301      	movs	r3, #1
 80067ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067ee:	f002 f925 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067f2:	f000 fecd 	bl	8007590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067f6:	f002 f8f1 	bl	80089dc <vPortEnterCritical>
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006800:	b25b      	sxtb	r3, r3
 8006802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006806:	d103      	bne.n	8006810 <xQueueGenericSend+0x174>
 8006808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680a:	2200      	movs	r2, #0
 800680c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006812:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006816:	b25b      	sxtb	r3, r3
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d103      	bne.n	8006826 <xQueueGenericSend+0x18a>
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2200      	movs	r2, #0
 8006822:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006826:	f002 f909 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800682a:	1d3a      	adds	r2, r7, #4
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f001 f950 	bl	8007ad8 <xTaskCheckForTimeOut>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d124      	bne.n	8006888 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800683e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006840:	f000 fbcd 	bl	8006fde <prvIsQueueFull>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d018      	beq.n	800687c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800684a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684c:	3310      	adds	r3, #16
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f001 f874 	bl	8007940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800685a:	f000 fb58 	bl	8006f0e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800685e:	f000 fea5 	bl	80075ac <xTaskResumeAll>
 8006862:	4603      	mov	r3, r0
 8006864:	2b00      	cmp	r3, #0
 8006866:	f47f af7c 	bne.w	8006762 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800686a:	4b0c      	ldr	r3, [pc, #48]	@ (800689c <xQueueGenericSend+0x200>)
 800686c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006870:	601a      	str	r2, [r3, #0]
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	e772      	b.n	8006762 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800687c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800687e:	f000 fb46 	bl	8006f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006882:	f000 fe93 	bl	80075ac <xTaskResumeAll>
 8006886:	e76c      	b.n	8006762 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800688a:	f000 fb40 	bl	8006f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800688e:	f000 fe8d 	bl	80075ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006892:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006894:	4618      	mov	r0, r3
 8006896:	3738      	adds	r7, #56	@ 0x38
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	e000ed04 	.word	0xe000ed04

080068a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b090      	sub	sp, #64	@ 0x40
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d10b      	bne.n	80068d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80068b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068bc:	f383 8811 	msr	BASEPRI, r3
 80068c0:	f3bf 8f6f 	isb	sy
 80068c4:	f3bf 8f4f 	dsb	sy
 80068c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ca:	bf00      	nop
 80068cc:	bf00      	nop
 80068ce:	e7fd      	b.n	80068cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d103      	bne.n	80068de <xQueueGenericSendFromISR+0x3e>
 80068d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <xQueueGenericSendFromISR+0x42>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <xQueueGenericSendFromISR+0x44>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10b      	bne.n	8006900 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80068fa:	bf00      	nop
 80068fc:	bf00      	nop
 80068fe:	e7fd      	b.n	80068fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d103      	bne.n	800690e <xQueueGenericSendFromISR+0x6e>
 8006906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d101      	bne.n	8006912 <xQueueGenericSendFromISR+0x72>
 800690e:	2301      	movs	r3, #1
 8006910:	e000      	b.n	8006914 <xQueueGenericSendFromISR+0x74>
 8006912:	2300      	movs	r3, #0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d10b      	bne.n	8006930 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800691c:	f383 8811 	msr	BASEPRI, r3
 8006920:	f3bf 8f6f 	isb	sy
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	623b      	str	r3, [r7, #32]
}
 800692a:	bf00      	nop
 800692c:	bf00      	nop
 800692e:	e7fd      	b.n	800692c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006930:	f002 f916 	bl	8008b60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006934:	f3ef 8211 	mrs	r2, BASEPRI
 8006938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693c:	f383 8811 	msr	BASEPRI, r3
 8006940:	f3bf 8f6f 	isb	sy
 8006944:	f3bf 8f4f 	dsb	sy
 8006948:	61fa      	str	r2, [r7, #28]
 800694a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800694c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800694e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006958:	429a      	cmp	r2, r3
 800695a:	d302      	bcc.n	8006962 <xQueueGenericSendFromISR+0xc2>
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d12f      	bne.n	80069c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006968:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006970:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006978:	f000 fa39 	bl	8006dee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800697c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d112      	bne.n	80069ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800698a:	2b00      	cmp	r3, #0
 800698c:	d016      	beq.n	80069bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	3324      	adds	r3, #36	@ 0x24
 8006992:	4618      	mov	r0, r3
 8006994:	f001 f826 	bl	80079e4 <xTaskRemoveFromEventList>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d00e      	beq.n	80069bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e007      	b.n	80069bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80069ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80069b0:	3301      	adds	r3, #1
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	b25a      	sxtb	r2, r3
 80069b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80069bc:	2301      	movs	r3, #1
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80069c0:	e001      	b.n	80069c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80069d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3740      	adds	r7, #64	@ 0x40
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b08c      	sub	sp, #48	@ 0x30
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069e8:	2300      	movs	r3, #0
 80069ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10b      	bne.n	8006a0e <xQueueReceive+0x32>
	__asm volatile
 80069f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069fa:	f383 8811 	msr	BASEPRI, r3
 80069fe:	f3bf 8f6f 	isb	sy
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	623b      	str	r3, [r7, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	bf00      	nop
 8006a0c:	e7fd      	b.n	8006a0a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d103      	bne.n	8006a1c <xQueueReceive+0x40>
 8006a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d101      	bne.n	8006a20 <xQueueReceive+0x44>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <xQueueReceive+0x46>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10b      	bne.n	8006a3e <xQueueReceive+0x62>
	__asm volatile
 8006a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2a:	f383 8811 	msr	BASEPRI, r3
 8006a2e:	f3bf 8f6f 	isb	sy
 8006a32:	f3bf 8f4f 	dsb	sy
 8006a36:	61fb      	str	r3, [r7, #28]
}
 8006a38:	bf00      	nop
 8006a3a:	bf00      	nop
 8006a3c:	e7fd      	b.n	8006a3a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a3e:	f001 f9a5 	bl	8007d8c <xTaskGetSchedulerState>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <xQueueReceive+0x72>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <xQueueReceive+0x76>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e000      	b.n	8006a54 <xQueueReceive+0x78>
 8006a52:	2300      	movs	r3, #0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d10b      	bne.n	8006a70 <xQueueReceive+0x94>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	61bb      	str	r3, [r7, #24]
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a70:	f001 ffb4 	bl	80089dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a78:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d01f      	beq.n	8006ac0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a84:	f000 fa1d 	bl	8006ec2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	1e5a      	subs	r2, r3, #1
 8006a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00f      	beq.n	8006ab8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9a:	3310      	adds	r3, #16
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 ffa1 	bl	80079e4 <xTaskRemoveFromEventList>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8006b9c <xQueueReceive+0x1c0>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ab8:	f001 ffc0 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e069      	b.n	8006b94 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d103      	bne.n	8006ace <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ac6:	f001 ffb9 	bl	8008a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e062      	b.n	8006b94 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d106      	bne.n	8006ae2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ad4:	f107 0310 	add.w	r3, r7, #16
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ffe7 	bl	8007aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ae2:	f001 ffab 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ae6:	f000 fd53 	bl	8007590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006aea:	f001 ff77 	bl	80089dc <vPortEnterCritical>
 8006aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006af4:	b25b      	sxtb	r3, r3
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d103      	bne.n	8006b04 <xQueueReceive+0x128>
 8006afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b0a:	b25b      	sxtb	r3, r3
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d103      	bne.n	8006b1a <xQueueReceive+0x13e>
 8006b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b1a:	f001 ff8f 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b1e:	1d3a      	adds	r2, r7, #4
 8006b20:	f107 0310 	add.w	r3, r7, #16
 8006b24:	4611      	mov	r1, r2
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 ffd6 	bl	8007ad8 <xTaskCheckForTimeOut>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d123      	bne.n	8006b7a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b34:	f000 fa3d 	bl	8006fb2 <prvIsQueueEmpty>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d017      	beq.n	8006b6e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b40:	3324      	adds	r3, #36	@ 0x24
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	4611      	mov	r1, r2
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 fefa 	bl	8007940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b4e:	f000 f9de 	bl	8006f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b52:	f000 fd2b 	bl	80075ac <xTaskResumeAll>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d189      	bne.n	8006a70 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8006b9c <xQueueReceive+0x1c0>)
 8006b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b62:	601a      	str	r2, [r3, #0]
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	f3bf 8f6f 	isb	sy
 8006b6c:	e780      	b.n	8006a70 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006b6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b70:	f000 f9cd 	bl	8006f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b74:	f000 fd1a 	bl	80075ac <xTaskResumeAll>
 8006b78:	e77a      	b.n	8006a70 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b7c:	f000 f9c7 	bl	8006f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b80:	f000 fd14 	bl	80075ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006b86:	f000 fa14 	bl	8006fb2 <prvIsQueueEmpty>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	f43f af6f 	beq.w	8006a70 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b92:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3730      	adds	r7, #48	@ 0x30
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	e000ed04 	.word	0xe000ed04

08006ba0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08e      	sub	sp, #56	@ 0x38
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006baa:	2300      	movs	r3, #0
 8006bac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10b      	bne.n	8006bd4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	623b      	str	r3, [r7, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006bd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be0:	f383 8811 	msr	BASEPRI, r3
 8006be4:	f3bf 8f6f 	isb	sy
 8006be8:	f3bf 8f4f 	dsb	sy
 8006bec:	61fb      	str	r3, [r7, #28]
}
 8006bee:	bf00      	nop
 8006bf0:	bf00      	nop
 8006bf2:	e7fd      	b.n	8006bf0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bf4:	f001 f8ca 	bl	8007d8c <xTaskGetSchedulerState>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <xQueueSemaphoreTake+0x64>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <xQueueSemaphoreTake+0x68>
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <xQueueSemaphoreTake+0x6a>
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10b      	bne.n	8006c26 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c12:	f383 8811 	msr	BASEPRI, r3
 8006c16:	f3bf 8f6f 	isb	sy
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	61bb      	str	r3, [r7, #24]
}
 8006c20:	bf00      	nop
 8006c22:	bf00      	nop
 8006c24:	e7fd      	b.n	8006c22 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c26:	f001 fed9 	bl	80089dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d024      	beq.n	8006c80 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	1e5a      	subs	r2, r3, #1
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006c46:	f001 fa1b 	bl	8008080 <pvTaskIncrementMutexHeldCount>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00f      	beq.n	8006c78 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	3310      	adds	r3, #16
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 fec1 	bl	80079e4 <xTaskRemoveFromEventList>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d007      	beq.n	8006c78 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c68:	4b54      	ldr	r3, [pc, #336]	@ (8006dbc <xQueueSemaphoreTake+0x21c>)
 8006c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c6e:	601a      	str	r2, [r3, #0]
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c78:	f001 fee0 	bl	8008a3c <vPortExitCritical>
				return pdPASS;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e098      	b.n	8006db2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d112      	bne.n	8006cac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00b      	beq.n	8006ca4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c90:	f383 8811 	msr	BASEPRI, r3
 8006c94:	f3bf 8f6f 	isb	sy
 8006c98:	f3bf 8f4f 	dsb	sy
 8006c9c:	617b      	str	r3, [r7, #20]
}
 8006c9e:	bf00      	nop
 8006ca0:	bf00      	nop
 8006ca2:	e7fd      	b.n	8006ca0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006ca4:	f001 feca 	bl	8008a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	e082      	b.n	8006db2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cb2:	f107 030c 	add.w	r3, r7, #12
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fef8 	bl	8007aac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006cc0:	f001 febc 	bl	8008a3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cc4:	f000 fc64 	bl	8007590 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cc8:	f001 fe88 	bl	80089dc <vPortEnterCritical>
 8006ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cd2:	b25b      	sxtb	r3, r3
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d103      	bne.n	8006ce2 <xQueueSemaphoreTake+0x142>
 8006cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ce8:	b25b      	sxtb	r3, r3
 8006cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cee:	d103      	bne.n	8006cf8 <xQueueSemaphoreTake+0x158>
 8006cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cf8:	f001 fea0 	bl	8008a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cfc:	463a      	mov	r2, r7
 8006cfe:	f107 030c 	add.w	r3, r7, #12
 8006d02:	4611      	mov	r1, r2
 8006d04:	4618      	mov	r0, r3
 8006d06:	f000 fee7 	bl	8007ad8 <xTaskCheckForTimeOut>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d132      	bne.n	8006d76 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d12:	f000 f94e 	bl	8006fb2 <prvIsQueueEmpty>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d026      	beq.n	8006d6a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d109      	bne.n	8006d38 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006d24:	f001 fe5a 	bl	80089dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f001 f84b 	bl	8007dc8 <xTaskPriorityInherit>
 8006d32:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006d34:	f001 fe82 	bl	8008a3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3a:	3324      	adds	r3, #36	@ 0x24
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	4618      	mov	r0, r3
 8006d42:	f000 fdfd 	bl	8007940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d48:	f000 f8e1 	bl	8006f0e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d4c:	f000 fc2e 	bl	80075ac <xTaskResumeAll>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f47f af67 	bne.w	8006c26 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006d58:	4b18      	ldr	r3, [pc, #96]	@ (8006dbc <xQueueSemaphoreTake+0x21c>)
 8006d5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	e75d      	b.n	8006c26 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006d6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d6c:	f000 f8cf 	bl	8006f0e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d70:	f000 fc1c 	bl	80075ac <xTaskResumeAll>
 8006d74:	e757      	b.n	8006c26 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006d76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d78:	f000 f8c9 	bl	8006f0e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d7c:	f000 fc16 	bl	80075ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d82:	f000 f916 	bl	8006fb2 <prvIsQueueEmpty>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f43f af4c 	beq.w	8006c26 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00d      	beq.n	8006db0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006d94:	f001 fe22 	bl	80089dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006d98:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d9a:	f000 f811 	bl	8006dc0 <prvGetDisinheritPriorityAfterTimeout>
 8006d9e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006da6:	4618      	mov	r0, r3
 8006da8:	f001 f8e6 	bl	8007f78 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006dac:	f001 fe46 	bl	8008a3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006db0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3738      	adds	r7, #56	@ 0x38
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d006      	beq.n	8006dde <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006dda:	60fb      	str	r3, [r7, #12]
 8006ddc:	e001      	b.n	8006de2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006de2:	68fb      	ldr	r3, [r7, #12]
	}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr

08006dee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b086      	sub	sp, #24
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e02:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10d      	bne.n	8006e28 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d14d      	bne.n	8006eb0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	689b      	ldr	r3, [r3, #8]
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 f83d 	bl	8007e98 <xTaskPriorityDisinherit>
 8006e1e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2200      	movs	r2, #0
 8006e24:	609a      	str	r2, [r3, #8]
 8006e26:	e043      	b.n	8006eb0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d119      	bne.n	8006e62 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6858      	ldr	r0, [r3, #4]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e36:	461a      	mov	r2, r3
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	f002 f985 	bl	8009148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e46:	441a      	add	r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d32b      	bcc.n	8006eb0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	605a      	str	r2, [r3, #4]
 8006e60:	e026      	b.n	8006eb0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68d8      	ldr	r0, [r3, #12]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68b9      	ldr	r1, [r7, #8]
 8006e6e:	f002 f96b 	bl	8009148 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7a:	425b      	negs	r3, r3
 8006e7c:	441a      	add	r2, r3
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	68da      	ldr	r2, [r3, #12]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d207      	bcs.n	8006e9e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	689a      	ldr	r2, [r3, #8]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e96:	425b      	negs	r3, r3
 8006e98:	441a      	add	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d105      	bne.n	8006eb0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	1c5a      	adds	r2, r3, #1
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006eb8:	697b      	ldr	r3, [r7, #20]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3718      	adds	r7, #24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b082      	sub	sp, #8
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d018      	beq.n	8006f06 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	68da      	ldr	r2, [r3, #12]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	441a      	add	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68da      	ldr	r2, [r3, #12]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d303      	bcc.n	8006ef6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68d9      	ldr	r1, [r3, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	461a      	mov	r2, r3
 8006f00:	6838      	ldr	r0, [r7, #0]
 8006f02:	f002 f921 	bl	8009148 <memcpy>
	}
}
 8006f06:	bf00      	nop
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006f16:	f001 fd61 	bl	80089dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f20:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f22:	e011      	b.n	8006f48 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d012      	beq.n	8006f52 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	3324      	adds	r3, #36	@ 0x24
 8006f30:	4618      	mov	r0, r3
 8006f32:	f000 fd57 	bl	80079e4 <xTaskRemoveFromEventList>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d001      	beq.n	8006f40 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f3c:	f000 fe30 	bl	8007ba0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dce9      	bgt.n	8006f24 <prvUnlockQueue+0x16>
 8006f50:	e000      	b.n	8006f54 <prvUnlockQueue+0x46>
					break;
 8006f52:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	22ff      	movs	r2, #255	@ 0xff
 8006f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f5c:	f001 fd6e 	bl	8008a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f60:	f001 fd3c 	bl	80089dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f6a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f6c:	e011      	b.n	8006f92 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d012      	beq.n	8006f9c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3310      	adds	r3, #16
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	f000 fd32 	bl	80079e4 <xTaskRemoveFromEventList>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f86:	f000 fe0b 	bl	8007ba0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	dce9      	bgt.n	8006f6e <prvUnlockQueue+0x60>
 8006f9a:	e000      	b.n	8006f9e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f9c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	22ff      	movs	r2, #255	@ 0xff
 8006fa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006fa6:	f001 fd49 	bl	8008a3c <vPortExitCritical>
}
 8006faa:	bf00      	nop
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fba:	f001 fd0f 	bl	80089dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e001      	b.n	8006fd0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fd0:	f001 fd34 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fe6:	f001 fcf9 	bl	80089dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d102      	bne.n	8006ffc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	e001      	b.n	8007000 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007000:	f001 fd1c 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8007004:	68fb      	ldr	r3, [r7, #12]
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800701a:	2300      	movs	r3, #0
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e014      	b.n	800704a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007020:	4a0e      	ldr	r2, [pc, #56]	@ (800705c <vQueueAddToRegistry+0x4c>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10b      	bne.n	8007044 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800702c:	490b      	ldr	r1, [pc, #44]	@ (800705c <vQueueAddToRegistry+0x4c>)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007036:	4a09      	ldr	r2, [pc, #36]	@ (800705c <vQueueAddToRegistry+0x4c>)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	4413      	add	r3, r2
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007042:	e006      	b.n	8007052 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3301      	adds	r3, #1
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b07      	cmp	r3, #7
 800704e:	d9e7      	bls.n	8007020 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr
 800705c:	20000ec4 	.word	0x20000ec4

08007060 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007070:	f001 fcb4 	bl	80089dc <vPortEnterCritical>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800707a:	b25b      	sxtb	r3, r3
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007080:	d103      	bne.n	800708a <vQueueWaitForMessageRestricted+0x2a>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007090:	b25b      	sxtb	r3, r3
 8007092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007096:	d103      	bne.n	80070a0 <vQueueWaitForMessageRestricted+0x40>
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070a0:	f001 fccc 	bl	8008a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d106      	bne.n	80070ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	3324      	adds	r3, #36	@ 0x24
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	68b9      	ldr	r1, [r7, #8]
 80070b4:	4618      	mov	r0, r3
 80070b6:	f000 fc69 	bl	800798c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80070ba:	6978      	ldr	r0, [r7, #20]
 80070bc:	f7ff ff27 	bl	8006f0e <prvUnlockQueue>
	}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08e      	sub	sp, #56	@ 0x38
 80070cc:	af04      	add	r7, sp, #16
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	607a      	str	r2, [r7, #4]
 80070d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d10b      	bne.n	80070f4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80070dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e0:	f383 8811 	msr	BASEPRI, r3
 80070e4:	f3bf 8f6f 	isb	sy
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	623b      	str	r3, [r7, #32]
}
 80070ee:	bf00      	nop
 80070f0:	bf00      	nop
 80070f2:	e7fd      	b.n	80070f0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <xTaskCreateStatic+0x4a>
	__asm volatile
 80070fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070fe:	f383 8811 	msr	BASEPRI, r3
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	f3bf 8f4f 	dsb	sy
 800710a:	61fb      	str	r3, [r7, #28]
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	e7fd      	b.n	800710e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007112:	23a8      	movs	r3, #168	@ 0xa8
 8007114:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	2ba8      	cmp	r3, #168	@ 0xa8
 800711a:	d00b      	beq.n	8007134 <xTaskCreateStatic+0x6c>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	61bb      	str	r3, [r7, #24]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007134:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01e      	beq.n	800717a <xTaskCreateStatic+0xb2>
 800713c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800713e:	2b00      	cmp	r3, #0
 8007140:	d01b      	beq.n	800717a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007144:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007148:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800714a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800714c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714e:	2202      	movs	r2, #2
 8007150:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007154:	2300      	movs	r3, #0
 8007156:	9303      	str	r3, [sp, #12]
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	9302      	str	r3, [sp, #8]
 800715c:	f107 0314 	add.w	r3, r7, #20
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f851 	bl	8007214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007172:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007174:	f000 f8f6 	bl	8007364 <prvAddNewTaskToReadyList>
 8007178:	e001      	b.n	800717e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800717e:	697b      	ldr	r3, [r7, #20]
	}
 8007180:	4618      	mov	r0, r3
 8007182:	3728      	adds	r7, #40	@ 0x28
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08c      	sub	sp, #48	@ 0x30
 800718c:	af04      	add	r7, sp, #16
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	603b      	str	r3, [r7, #0]
 8007194:	4613      	mov	r3, r2
 8007196:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007198:	88fb      	ldrh	r3, [r7, #6]
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4618      	mov	r0, r3
 800719e:	f001 fd1f 	bl	8008be0 <pvPortMalloc>
 80071a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00e      	beq.n	80071c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80071aa:	20a8      	movs	r0, #168	@ 0xa8
 80071ac:	f001 fd18 	bl	8008be0 <pvPortMalloc>
 80071b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80071be:	e005      	b.n	80071cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80071c0:	6978      	ldr	r0, [r7, #20]
 80071c2:	f001 fddb 	bl	8008d7c <vPortFree>
 80071c6:	e001      	b.n	80071cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071c8:	2300      	movs	r3, #0
 80071ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071cc:	69fb      	ldr	r3, [r7, #28]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d017      	beq.n	8007202 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071da:	88fa      	ldrh	r2, [r7, #6]
 80071dc:	2300      	movs	r3, #0
 80071de:	9303      	str	r3, [sp, #12]
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	9302      	str	r3, [sp, #8]
 80071e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f80f 	bl	8007214 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071f6:	69f8      	ldr	r0, [r7, #28]
 80071f8:	f000 f8b4 	bl	8007364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071fc:	2301      	movs	r3, #1
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e002      	b.n	8007208 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007202:	f04f 33ff 	mov.w	r3, #4294967295
 8007206:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007208:	69bb      	ldr	r3, [r7, #24]
	}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
	...

08007214 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
 8007220:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	461a      	mov	r2, r3
 800722c:	21a5      	movs	r1, #165	@ 0xa5
 800722e:	f001 fef9 	bl	8009024 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007234:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800723c:	3b01      	subs	r3, #1
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0307 	and.w	r3, r3, #7
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	617b      	str	r3, [r7, #20]
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	e7fd      	b.n	800726a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d01f      	beq.n	80072b4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007274:	2300      	movs	r3, #0
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	e012      	b.n	80072a0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	4413      	add	r3, r2
 8007280:	7819      	ldrb	r1, [r3, #0]
 8007282:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	4413      	add	r3, r2
 8007288:	3334      	adds	r3, #52	@ 0x34
 800728a:	460a      	mov	r2, r1
 800728c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	4413      	add	r3, r2
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d006      	beq.n	80072a8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	3301      	adds	r3, #1
 800729e:	61fb      	str	r3, [r7, #28]
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	2b0f      	cmp	r3, #15
 80072a4:	d9e9      	bls.n	800727a <prvInitialiseNewTask+0x66>
 80072a6:	e000      	b.n	80072aa <prvInitialiseNewTask+0x96>
			{
				break;
 80072a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80072b2:	e003      	b.n	80072bc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80072b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80072bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072be:	2b37      	cmp	r3, #55	@ 0x37
 80072c0:	d901      	bls.n	80072c6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80072c2:	2337      	movs	r3, #55	@ 0x37
 80072c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d4:	2200      	movs	r2, #0
 80072d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072da:	3304      	adds	r3, #4
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe ff4e 	bl	800617e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	3318      	adds	r3, #24
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7fe ff49 	bl	800617e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007300:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007304:	2200      	movs	r2, #0
 8007306:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800730a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730c:	2200      	movs	r2, #0
 800730e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007314:	3354      	adds	r3, #84	@ 0x54
 8007316:	224c      	movs	r2, #76	@ 0x4c
 8007318:	2100      	movs	r1, #0
 800731a:	4618      	mov	r0, r3
 800731c:	f001 fe82 	bl	8009024 <memset>
 8007320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007322:	4a0d      	ldr	r2, [pc, #52]	@ (8007358 <prvInitialiseNewTask+0x144>)
 8007324:	659a      	str	r2, [r3, #88]	@ 0x58
 8007326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007328:	4a0c      	ldr	r2, [pc, #48]	@ (800735c <prvInitialiseNewTask+0x148>)
 800732a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	4a0c      	ldr	r2, [pc, #48]	@ (8007360 <prvInitialiseNewTask+0x14c>)
 8007330:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	68f9      	ldr	r1, [r7, #12]
 8007336:	69b8      	ldr	r0, [r7, #24]
 8007338:	f001 fa62 	bl	8008800 <pxPortInitialiseStack>
 800733c:	4602      	mov	r2, r0
 800733e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007340:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007344:	2b00      	cmp	r3, #0
 8007346:	d002      	beq.n	800734e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800734c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800734e:	bf00      	nop
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	20002158 	.word	0x20002158
 800735c:	200021c0 	.word	0x200021c0
 8007360:	20002228 	.word	0x20002228

08007364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800736c:	f001 fb36 	bl	80089dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007370:	4b2d      	ldr	r3, [pc, #180]	@ (8007428 <prvAddNewTaskToReadyList+0xc4>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3301      	adds	r3, #1
 8007376:	4a2c      	ldr	r2, [pc, #176]	@ (8007428 <prvAddNewTaskToReadyList+0xc4>)
 8007378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800737a:	4b2c      	ldr	r3, [pc, #176]	@ (800742c <prvAddNewTaskToReadyList+0xc8>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007382:	4a2a      	ldr	r2, [pc, #168]	@ (800742c <prvAddNewTaskToReadyList+0xc8>)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007388:	4b27      	ldr	r3, [pc, #156]	@ (8007428 <prvAddNewTaskToReadyList+0xc4>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d110      	bne.n	80073b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007390:	f000 fc2a 	bl	8007be8 <prvInitialiseTaskLists>
 8007394:	e00d      	b.n	80073b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007396:	4b26      	ldr	r3, [pc, #152]	@ (8007430 <prvAddNewTaskToReadyList+0xcc>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d109      	bne.n	80073b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800739e:	4b23      	ldr	r3, [pc, #140]	@ (800742c <prvAddNewTaskToReadyList+0xc8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d802      	bhi.n	80073b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80073ac:	4a1f      	ldr	r2, [pc, #124]	@ (800742c <prvAddNewTaskToReadyList+0xc8>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80073b2:	4b20      	ldr	r3, [pc, #128]	@ (8007434 <prvAddNewTaskToReadyList+0xd0>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3301      	adds	r3, #1
 80073b8:	4a1e      	ldr	r2, [pc, #120]	@ (8007434 <prvAddNewTaskToReadyList+0xd0>)
 80073ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80073bc:	4b1d      	ldr	r3, [pc, #116]	@ (8007434 <prvAddNewTaskToReadyList+0xd0>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c8:	4b1b      	ldr	r3, [pc, #108]	@ (8007438 <prvAddNewTaskToReadyList+0xd4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d903      	bls.n	80073d8 <prvAddNewTaskToReadyList+0x74>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	4a18      	ldr	r2, [pc, #96]	@ (8007438 <prvAddNewTaskToReadyList+0xd4>)
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4a15      	ldr	r2, [pc, #84]	@ (800743c <prvAddNewTaskToReadyList+0xd8>)
 80073e6:	441a      	add	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	3304      	adds	r3, #4
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f7fe fed1 	bl	8006196 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073f4:	f001 fb22 	bl	8008a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007430 <prvAddNewTaskToReadyList+0xcc>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00e      	beq.n	800741e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007400:	4b0a      	ldr	r3, [pc, #40]	@ (800742c <prvAddNewTaskToReadyList+0xc8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	429a      	cmp	r2, r3
 800740c:	d207      	bcs.n	800741e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800740e:	4b0c      	ldr	r3, [pc, #48]	@ (8007440 <prvAddNewTaskToReadyList+0xdc>)
 8007410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	200013d8 	.word	0x200013d8
 800742c:	20000f04 	.word	0x20000f04
 8007430:	200013e4 	.word	0x200013e4
 8007434:	200013f4 	.word	0x200013f4
 8007438:	200013e0 	.word	0x200013e0
 800743c:	20000f08 	.word	0x20000f08
 8007440:	e000ed04 	.word	0xe000ed04

08007444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800744c:	2300      	movs	r3, #0
 800744e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d018      	beq.n	8007488 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007456:	4b14      	ldr	r3, [pc, #80]	@ (80074a8 <vTaskDelay+0x64>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00b      	beq.n	8007476 <vTaskDelay+0x32>
	__asm volatile
 800745e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007462:	f383 8811 	msr	BASEPRI, r3
 8007466:	f3bf 8f6f 	isb	sy
 800746a:	f3bf 8f4f 	dsb	sy
 800746e:	60bb      	str	r3, [r7, #8]
}
 8007470:	bf00      	nop
 8007472:	bf00      	nop
 8007474:	e7fd      	b.n	8007472 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007476:	f000 f88b 	bl	8007590 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800747a:	2100      	movs	r1, #0
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fe13 	bl	80080a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007482:	f000 f893 	bl	80075ac <xTaskResumeAll>
 8007486:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d107      	bne.n	800749e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800748e:	4b07      	ldr	r3, [pc, #28]	@ (80074ac <vTaskDelay+0x68>)
 8007490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800749e:	bf00      	nop
 80074a0:	3710      	adds	r7, #16
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	20001400 	.word	0x20001400
 80074ac:	e000ed04 	.word	0xe000ed04

080074b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08a      	sub	sp, #40	@ 0x28
 80074b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80074be:	463a      	mov	r2, r7
 80074c0:	1d39      	adds	r1, r7, #4
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fe08 	bl	80060dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	9202      	str	r2, [sp, #8]
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	2300      	movs	r3, #0
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	2300      	movs	r3, #0
 80074dc:	460a      	mov	r2, r1
 80074de:	4924      	ldr	r1, [pc, #144]	@ (8007570 <vTaskStartScheduler+0xc0>)
 80074e0:	4824      	ldr	r0, [pc, #144]	@ (8007574 <vTaskStartScheduler+0xc4>)
 80074e2:	f7ff fdf1 	bl	80070c8 <xTaskCreateStatic>
 80074e6:	4603      	mov	r3, r0
 80074e8:	4a23      	ldr	r2, [pc, #140]	@ (8007578 <vTaskStartScheduler+0xc8>)
 80074ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074ec:	4b22      	ldr	r3, [pc, #136]	@ (8007578 <vTaskStartScheduler+0xc8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074f4:	2301      	movs	r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	e001      	b.n	80074fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	2b01      	cmp	r3, #1
 8007502:	d102      	bne.n	800750a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007504:	f000 fe24 	bl	8008150 <xTimerCreateTimerTask>
 8007508:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d11b      	bne.n	8007548 <vTaskStartScheduler+0x98>
	__asm volatile
 8007510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007514:	f383 8811 	msr	BASEPRI, r3
 8007518:	f3bf 8f6f 	isb	sy
 800751c:	f3bf 8f4f 	dsb	sy
 8007520:	613b      	str	r3, [r7, #16]
}
 8007522:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007524:	4b15      	ldr	r3, [pc, #84]	@ (800757c <vTaskStartScheduler+0xcc>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3354      	adds	r3, #84	@ 0x54
 800752a:	4a15      	ldr	r2, [pc, #84]	@ (8007580 <vTaskStartScheduler+0xd0>)
 800752c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800752e:	4b15      	ldr	r3, [pc, #84]	@ (8007584 <vTaskStartScheduler+0xd4>)
 8007530:	f04f 32ff 	mov.w	r2, #4294967295
 8007534:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007536:	4b14      	ldr	r3, [pc, #80]	@ (8007588 <vTaskStartScheduler+0xd8>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800753c:	4b13      	ldr	r3, [pc, #76]	@ (800758c <vTaskStartScheduler+0xdc>)
 800753e:	2200      	movs	r2, #0
 8007540:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007542:	f001 f9d9 	bl	80088f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007546:	e00f      	b.n	8007568 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d10b      	bne.n	8007568 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60fb      	str	r3, [r7, #12]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <vTaskStartScheduler+0xb4>
}
 8007568:	bf00      	nop
 800756a:	3718      	adds	r7, #24
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	08009b78 	.word	0x08009b78
 8007574:	08007bb9 	.word	0x08007bb9
 8007578:	200013fc 	.word	0x200013fc
 800757c:	20000f04 	.word	0x20000f04
 8007580:	2000001c 	.word	0x2000001c
 8007584:	200013f8 	.word	0x200013f8
 8007588:	200013e4 	.word	0x200013e4
 800758c:	200013dc 	.word	0x200013dc

08007590 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007590:	b480      	push	{r7}
 8007592:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007594:	4b04      	ldr	r3, [pc, #16]	@ (80075a8 <vTaskSuspendAll+0x18>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3301      	adds	r3, #1
 800759a:	4a03      	ldr	r2, [pc, #12]	@ (80075a8 <vTaskSuspendAll+0x18>)
 800759c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800759e:	bf00      	nop
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bc80      	pop	{r7}
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	20001400 	.word	0x20001400

080075ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80075b2:	2300      	movs	r3, #0
 80075b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80075ba:	4b42      	ldr	r3, [pc, #264]	@ (80076c4 <xTaskResumeAll+0x118>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10b      	bne.n	80075da <xTaskResumeAll+0x2e>
	__asm volatile
 80075c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c6:	f383 8811 	msr	BASEPRI, r3
 80075ca:	f3bf 8f6f 	isb	sy
 80075ce:	f3bf 8f4f 	dsb	sy
 80075d2:	603b      	str	r3, [r7, #0]
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	e7fd      	b.n	80075d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075da:	f001 f9ff 	bl	80089dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075de:	4b39      	ldr	r3, [pc, #228]	@ (80076c4 <xTaskResumeAll+0x118>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	4a37      	ldr	r2, [pc, #220]	@ (80076c4 <xTaskResumeAll+0x118>)
 80075e6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075e8:	4b36      	ldr	r3, [pc, #216]	@ (80076c4 <xTaskResumeAll+0x118>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d162      	bne.n	80076b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075f0:	4b35      	ldr	r3, [pc, #212]	@ (80076c8 <xTaskResumeAll+0x11c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d05e      	beq.n	80076b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075f8:	e02f      	b.n	800765a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075fa:	4b34      	ldr	r3, [pc, #208]	@ (80076cc <xTaskResumeAll+0x120>)
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3318      	adds	r3, #24
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe fe20 	bl	800624c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	3304      	adds	r3, #4
 8007610:	4618      	mov	r0, r3
 8007612:	f7fe fe1b 	bl	800624c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800761a:	4b2d      	ldr	r3, [pc, #180]	@ (80076d0 <xTaskResumeAll+0x124>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d903      	bls.n	800762a <xTaskResumeAll+0x7e>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007626:	4a2a      	ldr	r2, [pc, #168]	@ (80076d0 <xTaskResumeAll+0x124>)
 8007628:	6013      	str	r3, [r2, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762e:	4613      	mov	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4a27      	ldr	r2, [pc, #156]	@ (80076d4 <xTaskResumeAll+0x128>)
 8007638:	441a      	add	r2, r3
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3304      	adds	r3, #4
 800763e:	4619      	mov	r1, r3
 8007640:	4610      	mov	r0, r2
 8007642:	f7fe fda8 	bl	8006196 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764a:	4b23      	ldr	r3, [pc, #140]	@ (80076d8 <xTaskResumeAll+0x12c>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007650:	429a      	cmp	r2, r3
 8007652:	d302      	bcc.n	800765a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007654:	4b21      	ldr	r3, [pc, #132]	@ (80076dc <xTaskResumeAll+0x130>)
 8007656:	2201      	movs	r2, #1
 8007658:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800765a:	4b1c      	ldr	r3, [pc, #112]	@ (80076cc <xTaskResumeAll+0x120>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1cb      	bne.n	80075fa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d001      	beq.n	800766c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007668:	f000 fb62 	bl	8007d30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800766c:	4b1c      	ldr	r3, [pc, #112]	@ (80076e0 <xTaskResumeAll+0x134>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d010      	beq.n	800769a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007678:	f000 f844 	bl	8007704 <xTaskIncrementTick>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d002      	beq.n	8007688 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007682:	4b16      	ldr	r3, [pc, #88]	@ (80076dc <xTaskResumeAll+0x130>)
 8007684:	2201      	movs	r2, #1
 8007686:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	3b01      	subs	r3, #1
 800768c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1f1      	bne.n	8007678 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007694:	4b12      	ldr	r3, [pc, #72]	@ (80076e0 <xTaskResumeAll+0x134>)
 8007696:	2200      	movs	r2, #0
 8007698:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800769a:	4b10      	ldr	r3, [pc, #64]	@ (80076dc <xTaskResumeAll+0x130>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d009      	beq.n	80076b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80076a6:	4b0f      	ldr	r3, [pc, #60]	@ (80076e4 <xTaskResumeAll+0x138>)
 80076a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ac:	601a      	str	r2, [r3, #0]
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076b6:	f001 f9c1 	bl	8008a3c <vPortExitCritical>

	return xAlreadyYielded;
 80076ba:	68bb      	ldr	r3, [r7, #8]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20001400 	.word	0x20001400
 80076c8:	200013d8 	.word	0x200013d8
 80076cc:	20001398 	.word	0x20001398
 80076d0:	200013e0 	.word	0x200013e0
 80076d4:	20000f08 	.word	0x20000f08
 80076d8:	20000f04 	.word	0x20000f04
 80076dc:	200013ec 	.word	0x200013ec
 80076e0:	200013e8 	.word	0x200013e8
 80076e4:	e000ed04 	.word	0xe000ed04

080076e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076ee:	4b04      	ldr	r3, [pc, #16]	@ (8007700 <xTaskGetTickCount+0x18>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076f4:	687b      	ldr	r3, [r7, #4]
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bc80      	pop	{r7}
 80076fe:	4770      	bx	lr
 8007700:	200013dc 	.word	0x200013dc

08007704 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b086      	sub	sp, #24
 8007708:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800770e:	4b4f      	ldr	r3, [pc, #316]	@ (800784c <xTaskIncrementTick+0x148>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	f040 8090 	bne.w	8007838 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007718:	4b4d      	ldr	r3, [pc, #308]	@ (8007850 <xTaskIncrementTick+0x14c>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007720:	4a4b      	ldr	r2, [pc, #300]	@ (8007850 <xTaskIncrementTick+0x14c>)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d121      	bne.n	8007770 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800772c:	4b49      	ldr	r3, [pc, #292]	@ (8007854 <xTaskIncrementTick+0x150>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00b      	beq.n	800774e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	603b      	str	r3, [r7, #0]
}
 8007748:	bf00      	nop
 800774a:	bf00      	nop
 800774c:	e7fd      	b.n	800774a <xTaskIncrementTick+0x46>
 800774e:	4b41      	ldr	r3, [pc, #260]	@ (8007854 <xTaskIncrementTick+0x150>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	4b40      	ldr	r3, [pc, #256]	@ (8007858 <xTaskIncrementTick+0x154>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a3e      	ldr	r2, [pc, #248]	@ (8007854 <xTaskIncrementTick+0x150>)
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	4a3e      	ldr	r2, [pc, #248]	@ (8007858 <xTaskIncrementTick+0x154>)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6013      	str	r3, [r2, #0]
 8007762:	4b3e      	ldr	r3, [pc, #248]	@ (800785c <xTaskIncrementTick+0x158>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	3301      	adds	r3, #1
 8007768:	4a3c      	ldr	r2, [pc, #240]	@ (800785c <xTaskIncrementTick+0x158>)
 800776a:	6013      	str	r3, [r2, #0]
 800776c:	f000 fae0 	bl	8007d30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007770:	4b3b      	ldr	r3, [pc, #236]	@ (8007860 <xTaskIncrementTick+0x15c>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	429a      	cmp	r2, r3
 8007778:	d349      	bcc.n	800780e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800777a:	4b36      	ldr	r3, [pc, #216]	@ (8007854 <xTaskIncrementTick+0x150>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007784:	4b36      	ldr	r3, [pc, #216]	@ (8007860 <xTaskIncrementTick+0x15c>)
 8007786:	f04f 32ff 	mov.w	r2, #4294967295
 800778a:	601a      	str	r2, [r3, #0]
					break;
 800778c:	e03f      	b.n	800780e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800778e:	4b31      	ldr	r3, [pc, #196]	@ (8007854 <xTaskIncrementTick+0x150>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d203      	bcs.n	80077ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80077a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007860 <xTaskIncrementTick+0x15c>)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80077ac:	e02f      	b.n	800780e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	3304      	adds	r3, #4
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fd4a 	bl	800624c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	3318      	adds	r3, #24
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fe fd41 	bl	800624c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ce:	4b25      	ldr	r3, [pc, #148]	@ (8007864 <xTaskIncrementTick+0x160>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d903      	bls.n	80077de <xTaskIncrementTick+0xda>
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077da:	4a22      	ldr	r2, [pc, #136]	@ (8007864 <xTaskIncrementTick+0x160>)
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077e2:	4613      	mov	r3, r2
 80077e4:	009b      	lsls	r3, r3, #2
 80077e6:	4413      	add	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007868 <xTaskIncrementTick+0x164>)
 80077ec:	441a      	add	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	3304      	adds	r3, #4
 80077f2:	4619      	mov	r1, r3
 80077f4:	4610      	mov	r0, r2
 80077f6:	f7fe fcce 	bl	8006196 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077fe:	4b1b      	ldr	r3, [pc, #108]	@ (800786c <xTaskIncrementTick+0x168>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007804:	429a      	cmp	r2, r3
 8007806:	d3b8      	bcc.n	800777a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007808:	2301      	movs	r3, #1
 800780a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800780c:	e7b5      	b.n	800777a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800780e:	4b17      	ldr	r3, [pc, #92]	@ (800786c <xTaskIncrementTick+0x168>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007814:	4914      	ldr	r1, [pc, #80]	@ (8007868 <xTaskIncrementTick+0x164>)
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	440b      	add	r3, r1
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d901      	bls.n	800782a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007826:	2301      	movs	r3, #1
 8007828:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800782a:	4b11      	ldr	r3, [pc, #68]	@ (8007870 <xTaskIncrementTick+0x16c>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d007      	beq.n	8007842 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007832:	2301      	movs	r3, #1
 8007834:	617b      	str	r3, [r7, #20]
 8007836:	e004      	b.n	8007842 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007838:	4b0e      	ldr	r3, [pc, #56]	@ (8007874 <xTaskIncrementTick+0x170>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3301      	adds	r3, #1
 800783e:	4a0d      	ldr	r2, [pc, #52]	@ (8007874 <xTaskIncrementTick+0x170>)
 8007840:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007842:	697b      	ldr	r3, [r7, #20]
}
 8007844:	4618      	mov	r0, r3
 8007846:	3718      	adds	r7, #24
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	20001400 	.word	0x20001400
 8007850:	200013dc 	.word	0x200013dc
 8007854:	20001390 	.word	0x20001390
 8007858:	20001394 	.word	0x20001394
 800785c:	200013f0 	.word	0x200013f0
 8007860:	200013f8 	.word	0x200013f8
 8007864:	200013e0 	.word	0x200013e0
 8007868:	20000f08 	.word	0x20000f08
 800786c:	20000f04 	.word	0x20000f04
 8007870:	200013ec 	.word	0x200013ec
 8007874:	200013e8 	.word	0x200013e8

08007878 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800787e:	4b2a      	ldr	r3, [pc, #168]	@ (8007928 <vTaskSwitchContext+0xb0>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d003      	beq.n	800788e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007886:	4b29      	ldr	r3, [pc, #164]	@ (800792c <vTaskSwitchContext+0xb4>)
 8007888:	2201      	movs	r2, #1
 800788a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800788c:	e047      	b.n	800791e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800788e:	4b27      	ldr	r3, [pc, #156]	@ (800792c <vTaskSwitchContext+0xb4>)
 8007890:	2200      	movs	r2, #0
 8007892:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007894:	4b26      	ldr	r3, [pc, #152]	@ (8007930 <vTaskSwitchContext+0xb8>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	60fb      	str	r3, [r7, #12]
 800789a:	e011      	b.n	80078c0 <vTaskSwitchContext+0x48>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10b      	bne.n	80078ba <vTaskSwitchContext+0x42>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	607b      	str	r3, [r7, #4]
}
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop
 80078b8:	e7fd      	b.n	80078b6 <vTaskSwitchContext+0x3e>
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	3b01      	subs	r3, #1
 80078be:	60fb      	str	r3, [r7, #12]
 80078c0:	491c      	ldr	r1, [pc, #112]	@ (8007934 <vTaskSwitchContext+0xbc>)
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	440b      	add	r3, r1
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0e3      	beq.n	800789c <vTaskSwitchContext+0x24>
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4613      	mov	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4413      	add	r3, r2
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	4a15      	ldr	r2, [pc, #84]	@ (8007934 <vTaskSwitchContext+0xbc>)
 80078e0:	4413      	add	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	685a      	ldr	r2, [r3, #4]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	605a      	str	r2, [r3, #4]
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	3308      	adds	r3, #8
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d104      	bne.n	8007904 <vTaskSwitchContext+0x8c>
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	685a      	ldr	r2, [r3, #4]
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	605a      	str	r2, [r3, #4]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	4a0b      	ldr	r2, [pc, #44]	@ (8007938 <vTaskSwitchContext+0xc0>)
 800790c:	6013      	str	r3, [r2, #0]
 800790e:	4a08      	ldr	r2, [pc, #32]	@ (8007930 <vTaskSwitchContext+0xb8>)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007914:	4b08      	ldr	r3, [pc, #32]	@ (8007938 <vTaskSwitchContext+0xc0>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	3354      	adds	r3, #84	@ 0x54
 800791a:	4a08      	ldr	r2, [pc, #32]	@ (800793c <vTaskSwitchContext+0xc4>)
 800791c:	6013      	str	r3, [r2, #0]
}
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	bc80      	pop	{r7}
 8007926:	4770      	bx	lr
 8007928:	20001400 	.word	0x20001400
 800792c:	200013ec 	.word	0x200013ec
 8007930:	200013e0 	.word	0x200013e0
 8007934:	20000f08 	.word	0x20000f08
 8007938:	20000f04 	.word	0x20000f04
 800793c:	2000001c 	.word	0x2000001c

08007940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	bf00      	nop
 8007966:	e7fd      	b.n	8007964 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007968:	4b07      	ldr	r3, [pc, #28]	@ (8007988 <vTaskPlaceOnEventList+0x48>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	3318      	adds	r3, #24
 800796e:	4619      	mov	r1, r3
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7fe fc33 	bl	80061dc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007976:	2101      	movs	r1, #1
 8007978:	6838      	ldr	r0, [r7, #0]
 800797a:	f000 fb95 	bl	80080a8 <prvAddCurrentTaskToDelayedList>
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	20000f04 	.word	0x20000f04

0800798c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10b      	bne.n	80079b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	617b      	str	r3, [r7, #20]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079b6:	4b0a      	ldr	r3, [pc, #40]	@ (80079e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3318      	adds	r3, #24
 80079bc:	4619      	mov	r1, r3
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f7fe fbe9 	bl	8006196 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80079ca:	f04f 33ff 	mov.w	r3, #4294967295
 80079ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079d0:	6879      	ldr	r1, [r7, #4]
 80079d2:	68b8      	ldr	r0, [r7, #8]
 80079d4:	f000 fb68 	bl	80080a8 <prvAddCurrentTaskToDelayedList>
	}
 80079d8:	bf00      	nop
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	20000f04 	.word	0x20000f04

080079e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10b      	bne.n	8007a12 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	60fb      	str	r3, [r7, #12]
}
 8007a0c:	bf00      	nop
 8007a0e:	bf00      	nop
 8007a10:	e7fd      	b.n	8007a0e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	3318      	adds	r3, #24
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fc18 	bl	800624c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a94 <xTaskRemoveFromEventList+0xb0>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d11d      	bne.n	8007a60 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	3304      	adds	r3, #4
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fc0f 	bl	800624c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a32:	4b19      	ldr	r3, [pc, #100]	@ (8007a98 <xTaskRemoveFromEventList+0xb4>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d903      	bls.n	8007a42 <xTaskRemoveFromEventList+0x5e>
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	4a16      	ldr	r2, [pc, #88]	@ (8007a98 <xTaskRemoveFromEventList+0xb4>)
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	4a13      	ldr	r2, [pc, #76]	@ (8007a9c <xTaskRemoveFromEventList+0xb8>)
 8007a50:	441a      	add	r2, r3
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f7fe fb9c 	bl	8006196 <vListInsertEnd>
 8007a5e:	e005      	b.n	8007a6c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	3318      	adds	r3, #24
 8007a64:	4619      	mov	r1, r3
 8007a66:	480e      	ldr	r0, [pc, #56]	@ (8007aa0 <xTaskRemoveFromEventList+0xbc>)
 8007a68:	f7fe fb95 	bl	8006196 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a70:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa4 <xTaskRemoveFromEventList+0xc0>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d905      	bls.n	8007a86 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8007aa8 <xTaskRemoveFromEventList+0xc4>)
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e001      	b.n	8007a8a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a8a:	697b      	ldr	r3, [r7, #20]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3718      	adds	r7, #24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	20001400 	.word	0x20001400
 8007a98:	200013e0 	.word	0x200013e0
 8007a9c:	20000f08 	.word	0x20000f08
 8007aa0:	20001398 	.word	0x20001398
 8007aa4:	20000f04 	.word	0x20000f04
 8007aa8:	200013ec 	.word	0x200013ec

08007aac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ab4:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <vTaskInternalSetTimeOutState+0x24>)
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <vTaskInternalSetTimeOutState+0x28>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	605a      	str	r2, [r3, #4]
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bc80      	pop	{r7}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	200013f0 	.word	0x200013f0
 8007ad4:	200013dc 	.word	0x200013dc

08007ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b088      	sub	sp, #32
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10b      	bne.n	8007b00 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aec:	f383 8811 	msr	BASEPRI, r3
 8007af0:	f3bf 8f6f 	isb	sy
 8007af4:	f3bf 8f4f 	dsb	sy
 8007af8:	613b      	str	r3, [r7, #16]
}
 8007afa:	bf00      	nop
 8007afc:	bf00      	nop
 8007afe:	e7fd      	b.n	8007afc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10b      	bne.n	8007b1e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	60fb      	str	r3, [r7, #12]
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	e7fd      	b.n	8007b1a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007b1e:	f000 ff5d 	bl	80089dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b22:	4b1d      	ldr	r3, [pc, #116]	@ (8007b98 <xTaskCheckForTimeOut+0xc0>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3a:	d102      	bne.n	8007b42 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	61fb      	str	r3, [r7, #28]
 8007b40:	e023      	b.n	8007b8a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	4b15      	ldr	r3, [pc, #84]	@ (8007b9c <xTaskCheckForTimeOut+0xc4>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d007      	beq.n	8007b5e <xTaskCheckForTimeOut+0x86>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	429a      	cmp	r2, r3
 8007b56:	d302      	bcc.n	8007b5e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e015      	b.n	8007b8a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d20b      	bcs.n	8007b80 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff ff99 	bl	8007aac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	61fb      	str	r3, [r7, #28]
 8007b7e:	e004      	b.n	8007b8a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2200      	movs	r2, #0
 8007b84:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b86:	2301      	movs	r3, #1
 8007b88:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b8a:	f000 ff57 	bl	8008a3c <vPortExitCritical>

	return xReturn;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3720      	adds	r7, #32
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	200013dc 	.word	0x200013dc
 8007b9c:	200013f0 	.word	0x200013f0

08007ba0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ba4:	4b03      	ldr	r3, [pc, #12]	@ (8007bb4 <vTaskMissedYield+0x14>)
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]
}
 8007baa:	bf00      	nop
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bc80      	pop	{r7}
 8007bb0:	4770      	bx	lr
 8007bb2:	bf00      	nop
 8007bb4:	200013ec 	.word	0x200013ec

08007bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bc0:	f000 f852 	bl	8007c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007bc4:	4b06      	ldr	r3, [pc, #24]	@ (8007be0 <prvIdleTask+0x28>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d9f9      	bls.n	8007bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bcc:	4b05      	ldr	r3, [pc, #20]	@ (8007be4 <prvIdleTask+0x2c>)
 8007bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bdc:	e7f0      	b.n	8007bc0 <prvIdleTask+0x8>
 8007bde:	bf00      	nop
 8007be0:	20000f08 	.word	0x20000f08
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bee:	2300      	movs	r3, #0
 8007bf0:	607b      	str	r3, [r7, #4]
 8007bf2:	e00c      	b.n	8007c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	009b      	lsls	r3, r3, #2
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4a12      	ldr	r2, [pc, #72]	@ (8007c48 <prvInitialiseTaskLists+0x60>)
 8007c00:	4413      	add	r3, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe fa9c 	bl	8006140 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3301      	adds	r3, #1
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b37      	cmp	r3, #55	@ 0x37
 8007c12:	d9ef      	bls.n	8007bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c14:	480d      	ldr	r0, [pc, #52]	@ (8007c4c <prvInitialiseTaskLists+0x64>)
 8007c16:	f7fe fa93 	bl	8006140 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c1a:	480d      	ldr	r0, [pc, #52]	@ (8007c50 <prvInitialiseTaskLists+0x68>)
 8007c1c:	f7fe fa90 	bl	8006140 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c20:	480c      	ldr	r0, [pc, #48]	@ (8007c54 <prvInitialiseTaskLists+0x6c>)
 8007c22:	f7fe fa8d 	bl	8006140 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c26:	480c      	ldr	r0, [pc, #48]	@ (8007c58 <prvInitialiseTaskLists+0x70>)
 8007c28:	f7fe fa8a 	bl	8006140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c2c:	480b      	ldr	r0, [pc, #44]	@ (8007c5c <prvInitialiseTaskLists+0x74>)
 8007c2e:	f7fe fa87 	bl	8006140 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c32:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <prvInitialiseTaskLists+0x78>)
 8007c34:	4a05      	ldr	r2, [pc, #20]	@ (8007c4c <prvInitialiseTaskLists+0x64>)
 8007c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c38:	4b0a      	ldr	r3, [pc, #40]	@ (8007c64 <prvInitialiseTaskLists+0x7c>)
 8007c3a:	4a05      	ldr	r2, [pc, #20]	@ (8007c50 <prvInitialiseTaskLists+0x68>)
 8007c3c:	601a      	str	r2, [r3, #0]
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000f08 	.word	0x20000f08
 8007c4c:	20001368 	.word	0x20001368
 8007c50:	2000137c 	.word	0x2000137c
 8007c54:	20001398 	.word	0x20001398
 8007c58:	200013ac 	.word	0x200013ac
 8007c5c:	200013c4 	.word	0x200013c4
 8007c60:	20001390 	.word	0x20001390
 8007c64:	20001394 	.word	0x20001394

08007c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c6e:	e019      	b.n	8007ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c70:	f000 feb4 	bl	80089dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c74:	4b10      	ldr	r3, [pc, #64]	@ (8007cb8 <prvCheckTasksWaitingTermination+0x50>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fae3 	bl	800624c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c86:	4b0d      	ldr	r3, [pc, #52]	@ (8007cbc <prvCheckTasksWaitingTermination+0x54>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8007cbc <prvCheckTasksWaitingTermination+0x54>)
 8007c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c90:	4b0b      	ldr	r3, [pc, #44]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	4a0a      	ldr	r2, [pc, #40]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c9a:	f000 fecf 	bl	8008a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f810 	bl	8007cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ca4:	4b06      	ldr	r3, [pc, #24]	@ (8007cc0 <prvCheckTasksWaitingTermination+0x58>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d1e1      	bne.n	8007c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cac:	bf00      	nop
 8007cae:	bf00      	nop
 8007cb0:	3708      	adds	r7, #8
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	200013ac 	.word	0x200013ac
 8007cbc:	200013d8 	.word	0x200013d8
 8007cc0:	200013c0 	.word	0x200013c0

08007cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	3354      	adds	r3, #84	@ 0x54
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f9af 	bl	8009034 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d108      	bne.n	8007cf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f001 f849 	bl	8008d7c <vPortFree>
				vPortFree( pxTCB );
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f001 f846 	bl	8008d7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cf0:	e019      	b.n	8007d26 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d103      	bne.n	8007d04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f001 f83d 	bl	8008d7c <vPortFree>
	}
 8007d02:	e010      	b.n	8007d26 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d00b      	beq.n	8007d26 <prvDeleteTCB+0x62>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	60fb      	str	r3, [r7, #12]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <prvDeleteTCB+0x5e>
	}
 8007d26:	bf00      	nop
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
	...

08007d30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d36:	4b0c      	ldr	r3, [pc, #48]	@ (8007d68 <prvResetNextTaskUnblockTime+0x38>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d40:	4b0a      	ldr	r3, [pc, #40]	@ (8007d6c <prvResetNextTaskUnblockTime+0x3c>)
 8007d42:	f04f 32ff 	mov.w	r2, #4294967295
 8007d46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d48:	e008      	b.n	8007d5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d4a:	4b07      	ldr	r3, [pc, #28]	@ (8007d68 <prvResetNextTaskUnblockTime+0x38>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	4a04      	ldr	r2, [pc, #16]	@ (8007d6c <prvResetNextTaskUnblockTime+0x3c>)
 8007d5a:	6013      	str	r3, [r2, #0]
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bc80      	pop	{r7}
 8007d64:	4770      	bx	lr
 8007d66:	bf00      	nop
 8007d68:	20001390 	.word	0x20001390
 8007d6c:	200013f8 	.word	0x200013f8

08007d70 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007d76:	4b04      	ldr	r3, [pc, #16]	@ (8007d88 <xTaskGetCurrentTaskHandle+0x18>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007d7c:	687b      	ldr	r3, [r7, #4]
	}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr
 8007d88:	20000f04 	.word	0x20000f04

08007d8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d92:	4b0b      	ldr	r3, [pc, #44]	@ (8007dc0 <xTaskGetSchedulerState+0x34>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d102      	bne.n	8007da0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	607b      	str	r3, [r7, #4]
 8007d9e:	e008      	b.n	8007db2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007da0:	4b08      	ldr	r3, [pc, #32]	@ (8007dc4 <xTaskGetSchedulerState+0x38>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007da8:	2302      	movs	r3, #2
 8007daa:	607b      	str	r3, [r7, #4]
 8007dac:	e001      	b.n	8007db2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dae:	2300      	movs	r3, #0
 8007db0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007db2:	687b      	ldr	r3, [r7, #4]
	}
 8007db4:	4618      	mov	r0, r3
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	200013e4 	.word	0x200013e4
 8007dc4:	20001400 	.word	0x20001400

08007dc8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d051      	beq.n	8007e82 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de2:	4b2a      	ldr	r3, [pc, #168]	@ (8007e8c <xTaskPriorityInherit+0xc4>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d241      	bcs.n	8007e70 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	db06      	blt.n	8007e02 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007df4:	4b25      	ldr	r3, [pc, #148]	@ (8007e8c <xTaskPriorityInherit+0xc4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	6959      	ldr	r1, [r3, #20]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	4a1f      	ldr	r2, [pc, #124]	@ (8007e90 <xTaskPriorityInherit+0xc8>)
 8007e14:	4413      	add	r3, r2
 8007e16:	4299      	cmp	r1, r3
 8007e18:	d122      	bne.n	8007e60 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	3304      	adds	r3, #4
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fa14 	bl	800624c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e24:	4b19      	ldr	r3, [pc, #100]	@ (8007e8c <xTaskPriorityInherit+0xc4>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e32:	4b18      	ldr	r3, [pc, #96]	@ (8007e94 <xTaskPriorityInherit+0xcc>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d903      	bls.n	8007e42 <xTaskPriorityInherit+0x7a>
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3e:	4a15      	ldr	r2, [pc, #84]	@ (8007e94 <xTaskPriorityInherit+0xcc>)
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	4a10      	ldr	r2, [pc, #64]	@ (8007e90 <xTaskPriorityInherit+0xc8>)
 8007e50:	441a      	add	r2, r3
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	3304      	adds	r3, #4
 8007e56:	4619      	mov	r1, r3
 8007e58:	4610      	mov	r0, r2
 8007e5a:	f7fe f99c 	bl	8006196 <vListInsertEnd>
 8007e5e:	e004      	b.n	8007e6a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e60:	4b0a      	ldr	r3, [pc, #40]	@ (8007e8c <xTaskPriorityInherit+0xc4>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
 8007e6e:	e008      	b.n	8007e82 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e74:	4b05      	ldr	r3, [pc, #20]	@ (8007e8c <xTaskPriorityInherit+0xc4>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d201      	bcs.n	8007e82 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e82:	68fb      	ldr	r3, [r7, #12]
	}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3710      	adds	r7, #16
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	20000f04 	.word	0x20000f04
 8007e90:	20000f08 	.word	0x20000f08
 8007e94:	200013e0 	.word	0x200013e0

08007e98 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b086      	sub	sp, #24
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d058      	beq.n	8007f60 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007eae:	4b2f      	ldr	r3, [pc, #188]	@ (8007f6c <xTaskPriorityDisinherit+0xd4>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d00b      	beq.n	8007ed0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ebc:	f383 8811 	msr	BASEPRI, r3
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	f3bf 8f4f 	dsb	sy
 8007ec8:	60fb      	str	r3, [r7, #12]
}
 8007eca:	bf00      	nop
 8007ecc:	bf00      	nop
 8007ece:	e7fd      	b.n	8007ecc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10b      	bne.n	8007ef0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007edc:	f383 8811 	msr	BASEPRI, r3
 8007ee0:	f3bf 8f6f 	isb	sy
 8007ee4:	f3bf 8f4f 	dsb	sy
 8007ee8:	60bb      	str	r3, [r7, #8]
}
 8007eea:	bf00      	nop
 8007eec:	bf00      	nop
 8007eee:	e7fd      	b.n	8007eec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ef4:	1e5a      	subs	r2, r3, #1
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d02c      	beq.n	8007f60 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d128      	bne.n	8007f60 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	3304      	adds	r3, #4
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fe f99a 	bl	800624c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f30:	4b0f      	ldr	r3, [pc, #60]	@ (8007f70 <xTaskPriorityDisinherit+0xd8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d903      	bls.n	8007f40 <xTaskPriorityDisinherit+0xa8>
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f3c:	4a0c      	ldr	r2, [pc, #48]	@ (8007f70 <xTaskPriorityDisinherit+0xd8>)
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f44:	4613      	mov	r3, r2
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	4413      	add	r3, r2
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	4a09      	ldr	r2, [pc, #36]	@ (8007f74 <xTaskPriorityDisinherit+0xdc>)
 8007f4e:	441a      	add	r2, r3
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f7fe f91d 	bl	8006196 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007f60:	697b      	ldr	r3, [r7, #20]
	}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3718      	adds	r7, #24
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20000f04 	.word	0x20000f04
 8007f70:	200013e0 	.word	0x200013e0
 8007f74:	20000f08 	.word	0x20000f08

08007f78 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007f86:	2301      	movs	r3, #1
 8007f88:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d06c      	beq.n	800806a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d10b      	bne.n	8007fb0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9c:	f383 8811 	msr	BASEPRI, r3
 8007fa0:	f3bf 8f6f 	isb	sy
 8007fa4:	f3bf 8f4f 	dsb	sy
 8007fa8:	60fb      	str	r3, [r7, #12]
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	e7fd      	b.n	8007fac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d902      	bls.n	8007fc0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	e002      	b.n	8007fc6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007fc4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d04c      	beq.n	800806a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d147      	bne.n	800806a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007fda:	4b26      	ldr	r3, [pc, #152]	@ (8008074 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d10b      	bne.n	8007ffc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	60bb      	str	r3, [r7, #8]
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008000:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	69fa      	ldr	r2, [r7, #28]
 8008006:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	db04      	blt.n	800801a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	6959      	ldr	r1, [r3, #20]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	4613      	mov	r3, r2
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	4413      	add	r3, r2
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	4a13      	ldr	r2, [pc, #76]	@ (8008078 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800802a:	4413      	add	r3, r2
 800802c:	4299      	cmp	r1, r3
 800802e:	d11c      	bne.n	800806a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008030:	69bb      	ldr	r3, [r7, #24]
 8008032:	3304      	adds	r3, #4
 8008034:	4618      	mov	r0, r3
 8008036:	f7fe f909 	bl	800624c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800803e:	4b0f      	ldr	r3, [pc, #60]	@ (800807c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	429a      	cmp	r2, r3
 8008044:	d903      	bls.n	800804e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804a:	4a0c      	ldr	r2, [pc, #48]	@ (800807c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800804c:	6013      	str	r3, [r2, #0]
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	4a07      	ldr	r2, [pc, #28]	@ (8008078 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800805c:	441a      	add	r2, r3
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	3304      	adds	r3, #4
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7fe f896 	bl	8006196 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800806a:	bf00      	nop
 800806c:	3720      	adds	r7, #32
 800806e:	46bd      	mov	sp, r7
 8008070:	bd80      	pop	{r7, pc}
 8008072:	bf00      	nop
 8008074:	20000f04 	.word	0x20000f04
 8008078:	20000f08 	.word	0x20000f08
 800807c:	200013e0 	.word	0x200013e0

08008080 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008084:	4b07      	ldr	r3, [pc, #28]	@ (80080a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d004      	beq.n	8008096 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800808c:	4b05      	ldr	r3, [pc, #20]	@ (80080a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008092:	3201      	adds	r2, #1
 8008094:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008096:	4b03      	ldr	r3, [pc, #12]	@ (80080a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008098:	681b      	ldr	r3, [r3, #0]
	}
 800809a:	4618      	mov	r0, r3
 800809c:	46bd      	mov	sp, r7
 800809e:	bc80      	pop	{r7}
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	20000f04 	.word	0x20000f04

080080a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b084      	sub	sp, #16
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080b2:	4b21      	ldr	r3, [pc, #132]	@ (8008138 <prvAddCurrentTaskToDelayedList+0x90>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080b8:	4b20      	ldr	r3, [pc, #128]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3304      	adds	r3, #4
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fe f8c4 	bl	800624c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d10a      	bne.n	80080e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080d2:	4b1a      	ldr	r3, [pc, #104]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3304      	adds	r3, #4
 80080d8:	4619      	mov	r1, r3
 80080da:	4819      	ldr	r0, [pc, #100]	@ (8008140 <prvAddCurrentTaskToDelayedList+0x98>)
 80080dc:	f7fe f85b 	bl	8006196 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080e0:	e026      	b.n	8008130 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080e2:	68fa      	ldr	r2, [r7, #12]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4413      	add	r3, r2
 80080e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080ea:	4b14      	ldr	r3, [pc, #80]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080f2:	68ba      	ldr	r2, [r7, #8]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d209      	bcs.n	800810e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080fa:	4b12      	ldr	r3, [pc, #72]	@ (8008144 <prvAddCurrentTaskToDelayedList+0x9c>)
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	4b0f      	ldr	r3, [pc, #60]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	3304      	adds	r3, #4
 8008104:	4619      	mov	r1, r3
 8008106:	4610      	mov	r0, r2
 8008108:	f7fe f868 	bl	80061dc <vListInsert>
}
 800810c:	e010      	b.n	8008130 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800810e:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <prvAddCurrentTaskToDelayedList+0x94>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3304      	adds	r3, #4
 8008118:	4619      	mov	r1, r3
 800811a:	4610      	mov	r0, r2
 800811c:	f7fe f85e 	bl	80061dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008120:	4b0a      	ldr	r3, [pc, #40]	@ (800814c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68ba      	ldr	r2, [r7, #8]
 8008126:	429a      	cmp	r2, r3
 8008128:	d202      	bcs.n	8008130 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800812a:	4a08      	ldr	r2, [pc, #32]	@ (800814c <prvAddCurrentTaskToDelayedList+0xa4>)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6013      	str	r3, [r2, #0]
}
 8008130:	bf00      	nop
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}
 8008138:	200013dc 	.word	0x200013dc
 800813c:	20000f04 	.word	0x20000f04
 8008140:	200013c4 	.word	0x200013c4
 8008144:	20001394 	.word	0x20001394
 8008148:	20001390 	.word	0x20001390
 800814c:	200013f8 	.word	0x200013f8

08008150 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08a      	sub	sp, #40	@ 0x28
 8008154:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008156:	2300      	movs	r3, #0
 8008158:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800815a:	f000 fb11 	bl	8008780 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800815e:	4b1d      	ldr	r3, [pc, #116]	@ (80081d4 <xTimerCreateTimerTask+0x84>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d021      	beq.n	80081aa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800816e:	1d3a      	adds	r2, r7, #4
 8008170:	f107 0108 	add.w	r1, r7, #8
 8008174:	f107 030c 	add.w	r3, r7, #12
 8008178:	4618      	mov	r0, r3
 800817a:	f7fd ffc7 	bl	800610c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800817e:	6879      	ldr	r1, [r7, #4]
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	9202      	str	r2, [sp, #8]
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	2302      	movs	r3, #2
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	2300      	movs	r3, #0
 800818e:	460a      	mov	r2, r1
 8008190:	4911      	ldr	r1, [pc, #68]	@ (80081d8 <xTimerCreateTimerTask+0x88>)
 8008192:	4812      	ldr	r0, [pc, #72]	@ (80081dc <xTimerCreateTimerTask+0x8c>)
 8008194:	f7fe ff98 	bl	80070c8 <xTaskCreateStatic>
 8008198:	4603      	mov	r3, r0
 800819a:	4a11      	ldr	r2, [pc, #68]	@ (80081e0 <xTimerCreateTimerTask+0x90>)
 800819c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800819e:	4b10      	ldr	r3, [pc, #64]	@ (80081e0 <xTimerCreateTimerTask+0x90>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081a6:	2301      	movs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10b      	bne.n	80081c8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	613b      	str	r3, [r7, #16]
}
 80081c2:	bf00      	nop
 80081c4:	bf00      	nop
 80081c6:	e7fd      	b.n	80081c4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081c8:	697b      	ldr	r3, [r7, #20]
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
 80081d2:	bf00      	nop
 80081d4:	20001434 	.word	0x20001434
 80081d8:	08009b80 	.word	0x08009b80
 80081dc:	0800831d 	.word	0x0800831d
 80081e0:	20001438 	.word	0x20001438

080081e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08a      	sub	sp, #40	@ 0x28
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
 80081f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081f2:	2300      	movs	r3, #0
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d10b      	bne.n	8008214 <xTimerGenericCommand+0x30>
	__asm volatile
 80081fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008200:	f383 8811 	msr	BASEPRI, r3
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	f3bf 8f4f 	dsb	sy
 800820c:	623b      	str	r3, [r7, #32]
}
 800820e:	bf00      	nop
 8008210:	bf00      	nop
 8008212:	e7fd      	b.n	8008210 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008214:	4b19      	ldr	r3, [pc, #100]	@ (800827c <xTimerGenericCommand+0x98>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d02a      	beq.n	8008272 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2b05      	cmp	r3, #5
 800822c:	dc18      	bgt.n	8008260 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800822e:	f7ff fdad 	bl	8007d8c <xTaskGetSchedulerState>
 8008232:	4603      	mov	r3, r0
 8008234:	2b02      	cmp	r3, #2
 8008236:	d109      	bne.n	800824c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008238:	4b10      	ldr	r3, [pc, #64]	@ (800827c <xTimerGenericCommand+0x98>)
 800823a:	6818      	ldr	r0, [r3, #0]
 800823c:	f107 0110 	add.w	r1, r7, #16
 8008240:	2300      	movs	r3, #0
 8008242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008244:	f7fe fa2a 	bl	800669c <xQueueGenericSend>
 8008248:	6278      	str	r0, [r7, #36]	@ 0x24
 800824a:	e012      	b.n	8008272 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800824c:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <xTimerGenericCommand+0x98>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	f107 0110 	add.w	r1, r7, #16
 8008254:	2300      	movs	r3, #0
 8008256:	2200      	movs	r2, #0
 8008258:	f7fe fa20 	bl	800669c <xQueueGenericSend>
 800825c:	6278      	str	r0, [r7, #36]	@ 0x24
 800825e:	e008      	b.n	8008272 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <xTimerGenericCommand+0x98>)
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	f107 0110 	add.w	r1, r7, #16
 8008268:	2300      	movs	r3, #0
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	f7fe fb18 	bl	80068a0 <xQueueGenericSendFromISR>
 8008270:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008274:	4618      	mov	r0, r3
 8008276:	3728      	adds	r7, #40	@ 0x28
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	20001434 	.word	0x20001434

08008280 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b088      	sub	sp, #32
 8008284:	af02      	add	r7, sp, #8
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828a:	4b23      	ldr	r3, [pc, #140]	@ (8008318 <prvProcessExpiredTimer+0x98>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	3304      	adds	r3, #4
 8008298:	4618      	mov	r0, r3
 800829a:	f7fd ffd7 	bl	800624c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d023      	beq.n	80082f4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	699a      	ldr	r2, [r3, #24]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	18d1      	adds	r1, r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	6978      	ldr	r0, [r7, #20]
 80082ba:	f000 f8d3 	bl	8008464 <prvInsertTimerInActiveList>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d020      	beq.n	8008306 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082c4:	2300      	movs	r3, #0
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2300      	movs	r3, #0
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	2100      	movs	r1, #0
 80082ce:	6978      	ldr	r0, [r7, #20]
 80082d0:	f7ff ff88 	bl	80081e4 <xTimerGenericCommand>
 80082d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d114      	bne.n	8008306 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	60fb      	str	r3, [r7, #12]
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	e7fd      	b.n	80082f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082fa:	f023 0301 	bic.w	r3, r3, #1
 80082fe:	b2da      	uxtb	r2, r3
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	6978      	ldr	r0, [r7, #20]
 800830c:	4798      	blx	r3
}
 800830e:	bf00      	nop
 8008310:	3718      	adds	r7, #24
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	2000142c 	.word	0x2000142c

0800831c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008324:	f107 0308 	add.w	r3, r7, #8
 8008328:	4618      	mov	r0, r3
 800832a:	f000 f859 	bl	80083e0 <prvGetNextExpireTime>
 800832e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	4619      	mov	r1, r3
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f000 f805 	bl	8008344 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800833a:	f000 f8d5 	bl	80084e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800833e:	bf00      	nop
 8008340:	e7f0      	b.n	8008324 <prvTimerTask+0x8>
	...

08008344 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800834e:	f7ff f91f 	bl	8007590 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008352:	f107 0308 	add.w	r3, r7, #8
 8008356:	4618      	mov	r0, r3
 8008358:	f000 f864 	bl	8008424 <prvSampleTimeNow>
 800835c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d130      	bne.n	80083c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d10a      	bne.n	8008380 <prvProcessTimerOrBlockTask+0x3c>
 800836a:	687a      	ldr	r2, [r7, #4]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	429a      	cmp	r2, r3
 8008370:	d806      	bhi.n	8008380 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008372:	f7ff f91b 	bl	80075ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008376:	68f9      	ldr	r1, [r7, #12]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff ff81 	bl	8008280 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800837e:	e024      	b.n	80083ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d008      	beq.n	8008398 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008386:	4b13      	ldr	r3, [pc, #76]	@ (80083d4 <prvProcessTimerOrBlockTask+0x90>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d101      	bne.n	8008394 <prvProcessTimerOrBlockTask+0x50>
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <prvProcessTimerOrBlockTask+0x52>
 8008394:	2300      	movs	r3, #0
 8008396:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008398:	4b0f      	ldr	r3, [pc, #60]	@ (80083d8 <prvProcessTimerOrBlockTask+0x94>)
 800839a:	6818      	ldr	r0, [r3, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	4619      	mov	r1, r3
 80083a6:	f7fe fe5b 	bl	8007060 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083aa:	f7ff f8ff 	bl	80075ac <xTaskResumeAll>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083b4:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <prvProcessTimerOrBlockTask+0x98>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
}
 80083c4:	e001      	b.n	80083ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083c6:	f7ff f8f1 	bl	80075ac <xTaskResumeAll>
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20001430 	.word	0x20001430
 80083d8:	20001434 	.word	0x20001434
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <prvGetNextExpireTime+0x40>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <prvGetNextExpireTime+0x16>
 80083f2:	2201      	movs	r2, #1
 80083f4:	e000      	b.n	80083f8 <prvGetNextExpireTime+0x18>
 80083f6:	2200      	movs	r2, #0
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d105      	bne.n	8008410 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008404:	4b06      	ldr	r3, [pc, #24]	@ (8008420 <prvGetNextExpireTime+0x40>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	60fb      	str	r3, [r7, #12]
 800840e:	e001      	b.n	8008414 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008414:	68fb      	ldr	r3, [r7, #12]
}
 8008416:	4618      	mov	r0, r3
 8008418:	3714      	adds	r7, #20
 800841a:	46bd      	mov	sp, r7
 800841c:	bc80      	pop	{r7}
 800841e:	4770      	bx	lr
 8008420:	2000142c 	.word	0x2000142c

08008424 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800842c:	f7ff f95c 	bl	80076e8 <xTaskGetTickCount>
 8008430:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008432:	4b0b      	ldr	r3, [pc, #44]	@ (8008460 <prvSampleTimeNow+0x3c>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d205      	bcs.n	8008448 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800843c:	f000 f93a 	bl	80086b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e002      	b.n	800844e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800844e:	4a04      	ldr	r2, [pc, #16]	@ (8008460 <prvSampleTimeNow+0x3c>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	2000143c 	.word	0x2000143c

08008464 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	429a      	cmp	r2, r3
 8008488:	d812      	bhi.n	80084b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	1ad2      	subs	r2, r2, r3
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	699b      	ldr	r3, [r3, #24]
 8008494:	429a      	cmp	r2, r3
 8008496:	d302      	bcc.n	800849e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	617b      	str	r3, [r7, #20]
 800849c:	e01b      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800849e:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <prvInsertTimerInActiveList+0x7c>)
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f7fd fe97 	bl	80061dc <vListInsert>
 80084ae:	e012      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084b0:	687a      	ldr	r2, [r7, #4]
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d206      	bcs.n	80084c6 <prvInsertTimerInActiveList+0x62>
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d302      	bcc.n	80084c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084c0:	2301      	movs	r3, #1
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	e007      	b.n	80084d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084c6:	4b07      	ldr	r3, [pc, #28]	@ (80084e4 <prvInsertTimerInActiveList+0x80>)
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fd fe83 	bl	80061dc <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084d6:	697b      	ldr	r3, [r7, #20]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	20001430 	.word	0x20001430
 80084e4:	2000142c 	.word	0x2000142c

080084e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b08e      	sub	sp, #56	@ 0x38
 80084ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ee:	e0ce      	b.n	800868e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	da19      	bge.n	800852a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084f6:	1d3b      	adds	r3, r7, #4
 80084f8:	3304      	adds	r3, #4
 80084fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10b      	bne.n	800851a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	61fb      	str	r3, [r7, #28]
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	e7fd      	b.n	8008516 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800851a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008520:	6850      	ldr	r0, [r2, #4]
 8008522:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008524:	6892      	ldr	r2, [r2, #8]
 8008526:	4611      	mov	r1, r2
 8008528:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b00      	cmp	r3, #0
 800852e:	f2c0 80ae 	blt.w	800868e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008538:	695b      	ldr	r3, [r3, #20]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d004      	beq.n	8008548 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800853e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008540:	3304      	adds	r3, #4
 8008542:	4618      	mov	r0, r3
 8008544:	f7fd fe82 	bl	800624c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008548:	463b      	mov	r3, r7
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff ff6a 	bl	8008424 <prvSampleTimeNow>
 8008550:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2b09      	cmp	r3, #9
 8008556:	f200 8097 	bhi.w	8008688 <prvProcessReceivedCommands+0x1a0>
 800855a:	a201      	add	r2, pc, #4	@ (adr r2, 8008560 <prvProcessReceivedCommands+0x78>)
 800855c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008560:	08008589 	.word	0x08008589
 8008564:	08008589 	.word	0x08008589
 8008568:	08008589 	.word	0x08008589
 800856c:	080085ff 	.word	0x080085ff
 8008570:	08008613 	.word	0x08008613
 8008574:	0800865f 	.word	0x0800865f
 8008578:	08008589 	.word	0x08008589
 800857c:	08008589 	.word	0x08008589
 8008580:	080085ff 	.word	0x080085ff
 8008584:	08008613 	.word	0x08008613
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800858e:	f043 0301 	orr.w	r3, r3, #1
 8008592:	b2da      	uxtb	r2, r3
 8008594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008596:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	18d1      	adds	r1, r2, r3
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085a8:	f7ff ff5c 	bl	8008464 <prvInsertTimerInActiveList>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d06c      	beq.n	800868c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085c0:	f003 0304 	and.w	r3, r3, #4
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d061      	beq.n	800868c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085cc:	699b      	ldr	r3, [r3, #24]
 80085ce:	441a      	add	r2, r3
 80085d0:	2300      	movs	r3, #0
 80085d2:	9300      	str	r3, [sp, #0]
 80085d4:	2300      	movs	r3, #0
 80085d6:	2100      	movs	r1, #0
 80085d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80085da:	f7ff fe03 	bl	80081e4 <xTimerGenericCommand>
 80085de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085e0:	6a3b      	ldr	r3, [r7, #32]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d152      	bne.n	800868c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80085e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ea:	f383 8811 	msr	BASEPRI, r3
 80085ee:	f3bf 8f6f 	isb	sy
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	61bb      	str	r3, [r7, #24]
}
 80085f8:	bf00      	nop
 80085fa:	bf00      	nop
 80085fc:	e7fd      	b.n	80085fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008604:	f023 0301 	bic.w	r3, r3, #1
 8008608:	b2da      	uxtb	r2, r3
 800860a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008610:	e03d      	b.n	800868e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008614:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008618:	f043 0301 	orr.w	r3, r3, #1
 800861c:	b2da      	uxtb	r2, r3
 800861e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008620:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008628:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800862a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d10b      	bne.n	800864a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	617b      	str	r3, [r7, #20]
}
 8008644:	bf00      	nop
 8008646:	bf00      	nop
 8008648:	e7fd      	b.n	8008646 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800864a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864c:	699a      	ldr	r2, [r3, #24]
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	18d1      	adds	r1, r2, r3
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008656:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008658:	f7ff ff04 	bl	8008464 <prvInsertTimerInActiveList>
					break;
 800865c:	e017      	b.n	800868e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800865e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008660:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d103      	bne.n	8008674 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800866c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800866e:	f000 fb85 	bl	8008d7c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008672:	e00c      	b.n	800868e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008676:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800867a:	f023 0301 	bic.w	r3, r3, #1
 800867e:	b2da      	uxtb	r2, r3
 8008680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008682:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008686:	e002      	b.n	800868e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008688:	bf00      	nop
 800868a:	e000      	b.n	800868e <prvProcessReceivedCommands+0x1a6>
					break;
 800868c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800868e:	4b08      	ldr	r3, [pc, #32]	@ (80086b0 <prvProcessReceivedCommands+0x1c8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	1d39      	adds	r1, r7, #4
 8008694:	2200      	movs	r2, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f7fe f9a0 	bl	80069dc <xQueueReceive>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f47f af26 	bne.w	80084f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086a4:	bf00      	nop
 80086a6:	bf00      	nop
 80086a8:	3730      	adds	r7, #48	@ 0x30
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	20001434 	.word	0x20001434

080086b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b088      	sub	sp, #32
 80086b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086ba:	e049      	b.n	8008750 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80086bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008778 <prvSwitchTimerLists+0xc4>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68db      	ldr	r3, [r3, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008778 <prvSwitchTimerLists+0xc4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68db      	ldr	r3, [r3, #12]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	3304      	adds	r3, #4
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7fd fdb9 	bl	800624c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6a1b      	ldr	r3, [r3, #32]
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086e8:	f003 0304 	and.w	r3, r3, #4
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d02f      	beq.n	8008750 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	699b      	ldr	r3, [r3, #24]
 80086f4:	693a      	ldr	r2, [r7, #16]
 80086f6:	4413      	add	r3, r2
 80086f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086fa:	68ba      	ldr	r2, [r7, #8]
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	429a      	cmp	r2, r3
 8008700:	d90e      	bls.n	8008720 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	68ba      	ldr	r2, [r7, #8]
 8008706:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800870e:	4b1a      	ldr	r3, [pc, #104]	@ (8008778 <prvSwitchTimerLists+0xc4>)
 8008710:	681a      	ldr	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3304      	adds	r3, #4
 8008716:	4619      	mov	r1, r3
 8008718:	4610      	mov	r0, r2
 800871a:	f7fd fd5f 	bl	80061dc <vListInsert>
 800871e:	e017      	b.n	8008750 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008720:	2300      	movs	r3, #0
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	2300      	movs	r3, #0
 8008726:	693a      	ldr	r2, [r7, #16]
 8008728:	2100      	movs	r1, #0
 800872a:	68f8      	ldr	r0, [r7, #12]
 800872c:	f7ff fd5a 	bl	80081e4 <xTimerGenericCommand>
 8008730:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d10b      	bne.n	8008750 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	603b      	str	r3, [r7, #0]
}
 800874a:	bf00      	nop
 800874c:	bf00      	nop
 800874e:	e7fd      	b.n	800874c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008750:	4b09      	ldr	r3, [pc, #36]	@ (8008778 <prvSwitchTimerLists+0xc4>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1b0      	bne.n	80086bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800875a:	4b07      	ldr	r3, [pc, #28]	@ (8008778 <prvSwitchTimerLists+0xc4>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008760:	4b06      	ldr	r3, [pc, #24]	@ (800877c <prvSwitchTimerLists+0xc8>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a04      	ldr	r2, [pc, #16]	@ (8008778 <prvSwitchTimerLists+0xc4>)
 8008766:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008768:	4a04      	ldr	r2, [pc, #16]	@ (800877c <prvSwitchTimerLists+0xc8>)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	6013      	str	r3, [r2, #0]
}
 800876e:	bf00      	nop
 8008770:	3718      	adds	r7, #24
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop
 8008778:	2000142c 	.word	0x2000142c
 800877c:	20001430 	.word	0x20001430

08008780 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008786:	f000 f929 	bl	80089dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800878a:	4b15      	ldr	r3, [pc, #84]	@ (80087e0 <prvCheckForValidListAndQueue+0x60>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d120      	bne.n	80087d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008792:	4814      	ldr	r0, [pc, #80]	@ (80087e4 <prvCheckForValidListAndQueue+0x64>)
 8008794:	f7fd fcd4 	bl	8006140 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008798:	4813      	ldr	r0, [pc, #76]	@ (80087e8 <prvCheckForValidListAndQueue+0x68>)
 800879a:	f7fd fcd1 	bl	8006140 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800879e:	4b13      	ldr	r3, [pc, #76]	@ (80087ec <prvCheckForValidListAndQueue+0x6c>)
 80087a0:	4a10      	ldr	r2, [pc, #64]	@ (80087e4 <prvCheckForValidListAndQueue+0x64>)
 80087a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087a4:	4b12      	ldr	r3, [pc, #72]	@ (80087f0 <prvCheckForValidListAndQueue+0x70>)
 80087a6:	4a10      	ldr	r2, [pc, #64]	@ (80087e8 <prvCheckForValidListAndQueue+0x68>)
 80087a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087aa:	2300      	movs	r3, #0
 80087ac:	9300      	str	r3, [sp, #0]
 80087ae:	4b11      	ldr	r3, [pc, #68]	@ (80087f4 <prvCheckForValidListAndQueue+0x74>)
 80087b0:	4a11      	ldr	r2, [pc, #68]	@ (80087f8 <prvCheckForValidListAndQueue+0x78>)
 80087b2:	2110      	movs	r1, #16
 80087b4:	200a      	movs	r0, #10
 80087b6:	f7fd fddd 	bl	8006374 <xQueueGenericCreateStatic>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4a08      	ldr	r2, [pc, #32]	@ (80087e0 <prvCheckForValidListAndQueue+0x60>)
 80087be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80087c0:	4b07      	ldr	r3, [pc, #28]	@ (80087e0 <prvCheckForValidListAndQueue+0x60>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d005      	beq.n	80087d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80087c8:	4b05      	ldr	r3, [pc, #20]	@ (80087e0 <prvCheckForValidListAndQueue+0x60>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	490b      	ldr	r1, [pc, #44]	@ (80087fc <prvCheckForValidListAndQueue+0x7c>)
 80087ce:	4618      	mov	r0, r3
 80087d0:	f7fe fc1e 	bl	8007010 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087d4:	f000 f932 	bl	8008a3c <vPortExitCritical>
}
 80087d8:	bf00      	nop
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20001434 	.word	0x20001434
 80087e4:	20001404 	.word	0x20001404
 80087e8:	20001418 	.word	0x20001418
 80087ec:	2000142c 	.word	0x2000142c
 80087f0:	20001430 	.word	0x20001430
 80087f4:	200014e0 	.word	0x200014e0
 80087f8:	20001440 	.word	0x20001440
 80087fc:	08009b88 	.word	0x08009b88

08008800 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	60f8      	str	r0, [r7, #12]
 8008808:	60b9      	str	r1, [r7, #8]
 800880a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3b04      	subs	r3, #4
 8008810:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008818:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3b04      	subs	r3, #4
 800881e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f023 0201 	bic.w	r2, r3, #1
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3b04      	subs	r3, #4
 800882e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008830:	4a08      	ldr	r2, [pc, #32]	@ (8008854 <pxPortInitialiseStack+0x54>)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3b14      	subs	r3, #20
 800883a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3b20      	subs	r3, #32
 8008846:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008848:	68fb      	ldr	r3, [r7, #12]
}
 800884a:	4618      	mov	r0, r3
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	bc80      	pop	{r7}
 8008852:	4770      	bx	lr
 8008854:	08008859 	.word	0x08008859

08008858 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008858:	b480      	push	{r7}
 800885a:	b085      	sub	sp, #20
 800885c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800885e:	2300      	movs	r3, #0
 8008860:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008862:	4b12      	ldr	r3, [pc, #72]	@ (80088ac <prvTaskExitError+0x54>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800886a:	d00b      	beq.n	8008884 <prvTaskExitError+0x2c>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	f3bf 8f6f 	isb	sy
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	60fb      	str	r3, [r7, #12]
}
 800887e:	bf00      	nop
 8008880:	bf00      	nop
 8008882:	e7fd      	b.n	8008880 <prvTaskExitError+0x28>
	__asm volatile
 8008884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008888:	f383 8811 	msr	BASEPRI, r3
 800888c:	f3bf 8f6f 	isb	sy
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	60bb      	str	r3, [r7, #8]
}
 8008896:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008898:	bf00      	nop
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d0fc      	beq.n	800889a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bc80      	pop	{r7}
 80088aa:	4770      	bx	lr
 80088ac:	20000018 	.word	0x20000018

080088b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088b0:	4b07      	ldr	r3, [pc, #28]	@ (80088d0 <pxCurrentTCBConst2>)
 80088b2:	6819      	ldr	r1, [r3, #0]
 80088b4:	6808      	ldr	r0, [r1, #0]
 80088b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088ba:	f380 8809 	msr	PSP, r0
 80088be:	f3bf 8f6f 	isb	sy
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f380 8811 	msr	BASEPRI, r0
 80088ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80088ce:	4770      	bx	lr

080088d0 <pxCurrentTCBConst2>:
 80088d0:	20000f04 	.word	0x20000f04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop

080088d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80088d8:	4806      	ldr	r0, [pc, #24]	@ (80088f4 <prvPortStartFirstTask+0x1c>)
 80088da:	6800      	ldr	r0, [r0, #0]
 80088dc:	6800      	ldr	r0, [r0, #0]
 80088de:	f380 8808 	msr	MSP, r0
 80088e2:	b662      	cpsie	i
 80088e4:	b661      	cpsie	f
 80088e6:	f3bf 8f4f 	dsb	sy
 80088ea:	f3bf 8f6f 	isb	sy
 80088ee:	df00      	svc	0
 80088f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088f2:	bf00      	nop
 80088f4:	e000ed08 	.word	0xe000ed08

080088f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80088fe:	4b32      	ldr	r3, [pc, #200]	@ (80089c8 <xPortStartScheduler+0xd0>)
 8008900:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	b2db      	uxtb	r3, r3
 8008908:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	22ff      	movs	r2, #255	@ 0xff
 800890e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	b2db      	uxtb	r3, r3
 8008916:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008918:	78fb      	ldrb	r3, [r7, #3]
 800891a:	b2db      	uxtb	r3, r3
 800891c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008920:	b2da      	uxtb	r2, r3
 8008922:	4b2a      	ldr	r3, [pc, #168]	@ (80089cc <xPortStartScheduler+0xd4>)
 8008924:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008926:	4b2a      	ldr	r3, [pc, #168]	@ (80089d0 <xPortStartScheduler+0xd8>)
 8008928:	2207      	movs	r2, #7
 800892a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800892c:	e009      	b.n	8008942 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800892e:	4b28      	ldr	r3, [pc, #160]	@ (80089d0 <xPortStartScheduler+0xd8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	3b01      	subs	r3, #1
 8008934:	4a26      	ldr	r2, [pc, #152]	@ (80089d0 <xPortStartScheduler+0xd8>)
 8008936:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	b2db      	uxtb	r3, r3
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	b2db      	uxtb	r3, r3
 8008940:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008942:	78fb      	ldrb	r3, [r7, #3]
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894a:	2b80      	cmp	r3, #128	@ 0x80
 800894c:	d0ef      	beq.n	800892e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800894e:	4b20      	ldr	r3, [pc, #128]	@ (80089d0 <xPortStartScheduler+0xd8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f1c3 0307 	rsb	r3, r3, #7
 8008956:	2b04      	cmp	r3, #4
 8008958:	d00b      	beq.n	8008972 <xPortStartScheduler+0x7a>
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	60bb      	str	r3, [r7, #8]
}
 800896c:	bf00      	nop
 800896e:	bf00      	nop
 8008970:	e7fd      	b.n	800896e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008972:	4b17      	ldr	r3, [pc, #92]	@ (80089d0 <xPortStartScheduler+0xd8>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	021b      	lsls	r3, r3, #8
 8008978:	4a15      	ldr	r2, [pc, #84]	@ (80089d0 <xPortStartScheduler+0xd8>)
 800897a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800897c:	4b14      	ldr	r3, [pc, #80]	@ (80089d0 <xPortStartScheduler+0xd8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008984:	4a12      	ldr	r2, [pc, #72]	@ (80089d0 <xPortStartScheduler+0xd8>)
 8008986:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	b2da      	uxtb	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008990:	4b10      	ldr	r3, [pc, #64]	@ (80089d4 <xPortStartScheduler+0xdc>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a0f      	ldr	r2, [pc, #60]	@ (80089d4 <xPortStartScheduler+0xdc>)
 8008996:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800899a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800899c:	4b0d      	ldr	r3, [pc, #52]	@ (80089d4 <xPortStartScheduler+0xdc>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0c      	ldr	r2, [pc, #48]	@ (80089d4 <xPortStartScheduler+0xdc>)
 80089a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80089a6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089a8:	f000 f8b8 	bl	8008b1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089ac:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <xPortStartScheduler+0xe0>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089b2:	f7ff ff91 	bl	80088d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089b6:	f7fe ff5f 	bl	8007878 <vTaskSwitchContext>
	prvTaskExitError();
 80089ba:	f7ff ff4d 	bl	8008858 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	e000e400 	.word	0xe000e400
 80089cc:	20001530 	.word	0x20001530
 80089d0:	20001534 	.word	0x20001534
 80089d4:	e000ed20 	.word	0xe000ed20
 80089d8:	20000018 	.word	0x20000018

080089dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	607b      	str	r3, [r7, #4]
}
 80089f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008a34 <vPortEnterCritical+0x58>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	4a0d      	ldr	r2, [pc, #52]	@ (8008a34 <vPortEnterCritical+0x58>)
 80089fe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a00:	4b0c      	ldr	r3, [pc, #48]	@ (8008a34 <vPortEnterCritical+0x58>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d110      	bne.n	8008a2a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a08:	4b0b      	ldr	r3, [pc, #44]	@ (8008a38 <vPortEnterCritical+0x5c>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00b      	beq.n	8008a2a <vPortEnterCritical+0x4e>
	__asm volatile
 8008a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a16:	f383 8811 	msr	BASEPRI, r3
 8008a1a:	f3bf 8f6f 	isb	sy
 8008a1e:	f3bf 8f4f 	dsb	sy
 8008a22:	603b      	str	r3, [r7, #0]
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop
 8008a28:	e7fd      	b.n	8008a26 <vPortEnterCritical+0x4a>
	}
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr
 8008a34:	20000018 	.word	0x20000018
 8008a38:	e000ed04 	.word	0xe000ed04

08008a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a42:	4b12      	ldr	r3, [pc, #72]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d10b      	bne.n	8008a62 <vPortExitCritical+0x26>
	__asm volatile
 8008a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a4e:	f383 8811 	msr	BASEPRI, r3
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	f3bf 8f4f 	dsb	sy
 8008a5a:	607b      	str	r3, [r7, #4]
}
 8008a5c:	bf00      	nop
 8008a5e:	bf00      	nop
 8008a60:	e7fd      	b.n	8008a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a62:	4b0a      	ldr	r3, [pc, #40]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4a08      	ldr	r2, [pc, #32]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a6c:	4b07      	ldr	r3, [pc, #28]	@ (8008a8c <vPortExitCritical+0x50>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d105      	bne.n	8008a80 <vPortExitCritical+0x44>
 8008a74:	2300      	movs	r3, #0
 8008a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	f383 8811 	msr	BASEPRI, r3
}
 8008a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	20000018 	.word	0x20000018

08008a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a90:	f3ef 8009 	mrs	r0, PSP
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4b0d      	ldr	r3, [pc, #52]	@ (8008ad0 <pxCurrentTCBConst>)
 8008a9a:	681a      	ldr	r2, [r3, #0]
 8008a9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008aa0:	6010      	str	r0, [r2, #0]
 8008aa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008aa6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008aaa:	f380 8811 	msr	BASEPRI, r0
 8008aae:	f7fe fee3 	bl	8007878 <vTaskSwitchContext>
 8008ab2:	f04f 0000 	mov.w	r0, #0
 8008ab6:	f380 8811 	msr	BASEPRI, r0
 8008aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008abe:	6819      	ldr	r1, [r3, #0]
 8008ac0:	6808      	ldr	r0, [r1, #0]
 8008ac2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008ac6:	f380 8809 	msr	PSP, r0
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	4770      	bx	lr

08008ad0 <pxCurrentTCBConst>:
 8008ad0:	20000f04 	.word	0x20000f04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop

08008ad8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	607b      	str	r3, [r7, #4]
}
 8008af0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008af2:	f7fe fe07 	bl	8007704 <xTaskIncrementTick>
 8008af6:	4603      	mov	r3, r0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d003      	beq.n	8008b04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008afc:	4b06      	ldr	r3, [pc, #24]	@ (8008b18 <xPortSysTickHandler+0x40>)
 8008afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b02:	601a      	str	r2, [r3, #0]
 8008b04:	2300      	movs	r3, #0
 8008b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f383 8811 	msr	BASEPRI, r3
}
 8008b0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b10:	bf00      	nop
 8008b12:	3708      	adds	r7, #8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b20:	4b0a      	ldr	r3, [pc, #40]	@ (8008b4c <vPortSetupTimerInterrupt+0x30>)
 8008b22:	2200      	movs	r2, #0
 8008b24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b26:	4b0a      	ldr	r3, [pc, #40]	@ (8008b50 <vPortSetupTimerInterrupt+0x34>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b2c:	4b09      	ldr	r3, [pc, #36]	@ (8008b54 <vPortSetupTimerInterrupt+0x38>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a09      	ldr	r2, [pc, #36]	@ (8008b58 <vPortSetupTimerInterrupt+0x3c>)
 8008b32:	fba2 2303 	umull	r2, r3, r2, r3
 8008b36:	099b      	lsrs	r3, r3, #6
 8008b38:	4a08      	ldr	r2, [pc, #32]	@ (8008b5c <vPortSetupTimerInterrupt+0x40>)
 8008b3a:	3b01      	subs	r3, #1
 8008b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b3e:	4b03      	ldr	r3, [pc, #12]	@ (8008b4c <vPortSetupTimerInterrupt+0x30>)
 8008b40:	2207      	movs	r2, #7
 8008b42:	601a      	str	r2, [r3, #0]
}
 8008b44:	bf00      	nop
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr
 8008b4c:	e000e010 	.word	0xe000e010
 8008b50:	e000e018 	.word	0xe000e018
 8008b54:	2000000c 	.word	0x2000000c
 8008b58:	10624dd3 	.word	0x10624dd3
 8008b5c:	e000e014 	.word	0xe000e014

08008b60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b60:	b480      	push	{r7}
 8008b62:	b085      	sub	sp, #20
 8008b64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b66:	f3ef 8305 	mrs	r3, IPSR
 8008b6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2b0f      	cmp	r3, #15
 8008b70:	d915      	bls.n	8008b9e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b72:	4a17      	ldr	r2, [pc, #92]	@ (8008bd0 <vPortValidateInterruptPriority+0x70>)
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4413      	add	r3, r2
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b7c:	4b15      	ldr	r3, [pc, #84]	@ (8008bd4 <vPortValidateInterruptPriority+0x74>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	7afa      	ldrb	r2, [r7, #11]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d20b      	bcs.n	8008b9e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	607b      	str	r3, [r7, #4]
}
 8008b98:	bf00      	nop
 8008b9a:	bf00      	nop
 8008b9c:	e7fd      	b.n	8008b9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bd8 <vPortValidateInterruptPriority+0x78>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8008bdc <vPortValidateInterruptPriority+0x7c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d90b      	bls.n	8008bc6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	603b      	str	r3, [r7, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	bf00      	nop
 8008bc4:	e7fd      	b.n	8008bc2 <vPortValidateInterruptPriority+0x62>
	}
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr
 8008bd0:	e000e3f0 	.word	0xe000e3f0
 8008bd4:	20001530 	.word	0x20001530
 8008bd8:	e000ed0c 	.word	0xe000ed0c
 8008bdc:	20001534 	.word	0x20001534

08008be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b08a      	sub	sp, #40	@ 0x28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bec:	f7fe fcd0 	bl	8007590 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bf0:	4b5c      	ldr	r3, [pc, #368]	@ (8008d64 <pvPortMalloc+0x184>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008bf8:	f000 f924 	bl	8008e44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bfc:	4b5a      	ldr	r3, [pc, #360]	@ (8008d68 <pvPortMalloc+0x188>)
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f040 8095 	bne.w	8008d34 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d01e      	beq.n	8008c4e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008c10:	2208      	movs	r2, #8
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4413      	add	r3, r2
 8008c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d015      	beq.n	8008c4e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f023 0307 	bic.w	r3, r3, #7
 8008c28:	3308      	adds	r3, #8
 8008c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f003 0307 	and.w	r3, r3, #7
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <pvPortMalloc+0x6e>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	617b      	str	r3, [r7, #20]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d06f      	beq.n	8008d34 <pvPortMalloc+0x154>
 8008c54:	4b45      	ldr	r3, [pc, #276]	@ (8008d6c <pvPortMalloc+0x18c>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d86a      	bhi.n	8008d34 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c5e:	4b44      	ldr	r3, [pc, #272]	@ (8008d70 <pvPortMalloc+0x190>)
 8008c60:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c62:	4b43      	ldr	r3, [pc, #268]	@ (8008d70 <pvPortMalloc+0x190>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c68:	e004      	b.n	8008c74 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d903      	bls.n	8008c86 <pvPortMalloc+0xa6>
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f1      	bne.n	8008c6a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c86:	4b37      	ldr	r3, [pc, #220]	@ (8008d64 <pvPortMalloc+0x184>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d051      	beq.n	8008d34 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2208      	movs	r2, #8
 8008c96:	4413      	add	r3, r2
 8008c98:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	6a3b      	ldr	r3, [r7, #32]
 8008ca0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca4:	685a      	ldr	r2, [r3, #4]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	1ad2      	subs	r2, r2, r3
 8008caa:	2308      	movs	r3, #8
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d920      	bls.n	8008cf4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	f003 0307 	and.w	r3, r3, #7
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <pvPortMalloc+0xfc>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	613b      	str	r3, [r7, #16]
}
 8008cd6:	bf00      	nop
 8008cd8:	bf00      	nop
 8008cda:	e7fd      	b.n	8008cd8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	1ad2      	subs	r2, r2, r3
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cee:	69b8      	ldr	r0, [r7, #24]
 8008cf0:	f000 f90a 	bl	8008f08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8008d6c <pvPortMalloc+0x18c>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8008d6c <pvPortMalloc+0x18c>)
 8008d00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d02:	4b1a      	ldr	r3, [pc, #104]	@ (8008d6c <pvPortMalloc+0x18c>)
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	4b1b      	ldr	r3, [pc, #108]	@ (8008d74 <pvPortMalloc+0x194>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d203      	bcs.n	8008d16 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008d0e:	4b17      	ldr	r3, [pc, #92]	@ (8008d6c <pvPortMalloc+0x18c>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a18      	ldr	r2, [pc, #96]	@ (8008d74 <pvPortMalloc+0x194>)
 8008d14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	685a      	ldr	r2, [r3, #4]
 8008d1a:	4b13      	ldr	r3, [pc, #76]	@ (8008d68 <pvPortMalloc+0x188>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	2200      	movs	r2, #0
 8008d28:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d2a:	4b13      	ldr	r3, [pc, #76]	@ (8008d78 <pvPortMalloc+0x198>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	4a11      	ldr	r2, [pc, #68]	@ (8008d78 <pvPortMalloc+0x198>)
 8008d32:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d34:	f7fe fc3a 	bl	80075ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	f003 0307 	and.w	r3, r3, #7
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <pvPortMalloc+0x17a>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	60fb      	str	r3, [r7, #12]
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	e7fd      	b.n	8008d56 <pvPortMalloc+0x176>
	return pvReturn;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3728      	adds	r7, #40	@ 0x28
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	20002140 	.word	0x20002140
 8008d68:	20002154 	.word	0x20002154
 8008d6c:	20002144 	.word	0x20002144
 8008d70:	20002138 	.word	0x20002138
 8008d74:	20002148 	.word	0x20002148
 8008d78:	2000214c 	.word	0x2000214c

08008d7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d04f      	beq.n	8008e2e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d8e:	2308      	movs	r3, #8
 8008d90:	425b      	negs	r3, r3
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4413      	add	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	4b25      	ldr	r3, [pc, #148]	@ (8008e38 <vPortFree+0xbc>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4013      	ands	r3, r2
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10b      	bne.n	8008dc2 <vPortFree+0x46>
	__asm volatile
 8008daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dae:	f383 8811 	msr	BASEPRI, r3
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	f3bf 8f4f 	dsb	sy
 8008dba:	60fb      	str	r3, [r7, #12]
}
 8008dbc:	bf00      	nop
 8008dbe:	bf00      	nop
 8008dc0:	e7fd      	b.n	8008dbe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00b      	beq.n	8008de2 <vPortFree+0x66>
	__asm volatile
 8008dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dce:	f383 8811 	msr	BASEPRI, r3
 8008dd2:	f3bf 8f6f 	isb	sy
 8008dd6:	f3bf 8f4f 	dsb	sy
 8008dda:	60bb      	str	r3, [r7, #8]
}
 8008ddc:	bf00      	nop
 8008dde:	bf00      	nop
 8008de0:	e7fd      	b.n	8008dde <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	4b14      	ldr	r3, [pc, #80]	@ (8008e38 <vPortFree+0xbc>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4013      	ands	r3, r2
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01e      	beq.n	8008e2e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d11a      	bne.n	8008e2e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	4b0e      	ldr	r3, [pc, #56]	@ (8008e38 <vPortFree+0xbc>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	43db      	mvns	r3, r3
 8008e02:	401a      	ands	r2, r3
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e08:	f7fe fbc2 	bl	8007590 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	685a      	ldr	r2, [r3, #4]
 8008e10:	4b0a      	ldr	r3, [pc, #40]	@ (8008e3c <vPortFree+0xc0>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4413      	add	r3, r2
 8008e16:	4a09      	ldr	r2, [pc, #36]	@ (8008e3c <vPortFree+0xc0>)
 8008e18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e1a:	6938      	ldr	r0, [r7, #16]
 8008e1c:	f000 f874 	bl	8008f08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e20:	4b07      	ldr	r3, [pc, #28]	@ (8008e40 <vPortFree+0xc4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	3301      	adds	r3, #1
 8008e26:	4a06      	ldr	r2, [pc, #24]	@ (8008e40 <vPortFree+0xc4>)
 8008e28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e2a:	f7fe fbbf 	bl	80075ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e2e:	bf00      	nop
 8008e30:	3718      	adds	r7, #24
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20002154 	.word	0x20002154
 8008e3c:	20002144 	.word	0x20002144
 8008e40:	20002150 	.word	0x20002150

08008e44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e4a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8008e4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e50:	4b27      	ldr	r3, [pc, #156]	@ (8008ef0 <prvHeapInit+0xac>)
 8008e52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00c      	beq.n	8008e78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	3307      	adds	r3, #7
 8008e62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	f023 0307 	bic.w	r3, r3, #7
 8008e6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	4a1f      	ldr	r2, [pc, #124]	@ (8008ef0 <prvHeapInit+0xac>)
 8008e74:	4413      	add	r3, r2
 8008e76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef4 <prvHeapInit+0xb0>)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e82:	4b1c      	ldr	r3, [pc, #112]	@ (8008ef4 <prvHeapInit+0xb0>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e90:	2208      	movs	r2, #8
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0307 	bic.w	r3, r3, #7
 8008e9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4a15      	ldr	r2, [pc, #84]	@ (8008ef8 <prvHeapInit+0xb4>)
 8008ea4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008ea6:	4b14      	ldr	r3, [pc, #80]	@ (8008ef8 <prvHeapInit+0xb4>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008eae:	4b12      	ldr	r3, [pc, #72]	@ (8008ef8 <prvHeapInit+0xb4>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68fa      	ldr	r2, [r7, #12]
 8008ebe:	1ad2      	subs	r2, r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef8 <prvHeapInit+0xb4>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8008efc <prvHeapInit+0xb8>)
 8008ed2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4a09      	ldr	r2, [pc, #36]	@ (8008f00 <prvHeapInit+0xbc>)
 8008eda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008edc:	4b09      	ldr	r3, [pc, #36]	@ (8008f04 <prvHeapInit+0xc0>)
 8008ede:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ee2:	601a      	str	r2, [r3, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	bc80      	pop	{r7}
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20001538 	.word	0x20001538
 8008ef4:	20002138 	.word	0x20002138
 8008ef8:	20002140 	.word	0x20002140
 8008efc:	20002148 	.word	0x20002148
 8008f00:	20002144 	.word	0x20002144
 8008f04:	20002154 	.word	0x20002154

08008f08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008f10:	4b27      	ldr	r3, [pc, #156]	@ (8008fb0 <prvInsertBlockIntoFreeList+0xa8>)
 8008f12:	60fb      	str	r3, [r7, #12]
 8008f14:	e002      	b.n	8008f1c <prvInsertBlockIntoFreeList+0x14>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d8f7      	bhi.n	8008f16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	4413      	add	r3, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d108      	bne.n	8008f4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	441a      	add	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	441a      	add	r2, r3
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	d118      	bne.n	8008f90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	4b14      	ldr	r3, [pc, #80]	@ (8008fb4 <prvInsertBlockIntoFreeList+0xac>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	429a      	cmp	r2, r3
 8008f68:	d00d      	beq.n	8008f86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	441a      	add	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e008      	b.n	8008f98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f86:	4b0b      	ldr	r3, [pc, #44]	@ (8008fb4 <prvInsertBlockIntoFreeList+0xac>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	601a      	str	r2, [r3, #0]
 8008f8e:	e003      	b.n	8008f98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	d002      	beq.n	8008fa6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bc80      	pop	{r7}
 8008fae:	4770      	bx	lr
 8008fb0:	20002138 	.word	0x20002138
 8008fb4:	20002140 	.word	0x20002140

08008fb8 <sniprintf>:
 8008fb8:	b40c      	push	{r2, r3}
 8008fba:	b530      	push	{r4, r5, lr}
 8008fbc:	4b18      	ldr	r3, [pc, #96]	@ (8009020 <sniprintf+0x68>)
 8008fbe:	1e0c      	subs	r4, r1, #0
 8008fc0:	681d      	ldr	r5, [r3, #0]
 8008fc2:	b09d      	sub	sp, #116	@ 0x74
 8008fc4:	da08      	bge.n	8008fd8 <sniprintf+0x20>
 8008fc6:	238b      	movs	r3, #139	@ 0x8b
 8008fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fcc:	602b      	str	r3, [r5, #0]
 8008fce:	b01d      	add	sp, #116	@ 0x74
 8008fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fd4:	b002      	add	sp, #8
 8008fd6:	4770      	bx	lr
 8008fd8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008fdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8008fe6:	bf0c      	ite	eq
 8008fe8:	4623      	moveq	r3, r4
 8008fea:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008fee:	9304      	str	r3, [sp, #16]
 8008ff0:	9307      	str	r3, [sp, #28]
 8008ff2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008ff6:	9002      	str	r0, [sp, #8]
 8008ff8:	9006      	str	r0, [sp, #24]
 8008ffa:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ffe:	4628      	mov	r0, r5
 8009000:	ab21      	add	r3, sp, #132	@ 0x84
 8009002:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009004:	a902      	add	r1, sp, #8
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	f000 f9fe 	bl	8009408 <_svfiprintf_r>
 800900c:	1c43      	adds	r3, r0, #1
 800900e:	bfbc      	itt	lt
 8009010:	238b      	movlt	r3, #139	@ 0x8b
 8009012:	602b      	strlt	r3, [r5, #0]
 8009014:	2c00      	cmp	r4, #0
 8009016:	d0da      	beq.n	8008fce <sniprintf+0x16>
 8009018:	2200      	movs	r2, #0
 800901a:	9b02      	ldr	r3, [sp, #8]
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	e7d6      	b.n	8008fce <sniprintf+0x16>
 8009020:	2000001c 	.word	0x2000001c

08009024 <memset>:
 8009024:	4603      	mov	r3, r0
 8009026:	4402      	add	r2, r0
 8009028:	4293      	cmp	r3, r2
 800902a:	d100      	bne.n	800902e <memset+0xa>
 800902c:	4770      	bx	lr
 800902e:	f803 1b01 	strb.w	r1, [r3], #1
 8009032:	e7f9      	b.n	8009028 <memset+0x4>

08009034 <_reclaim_reent>:
 8009034:	4b2d      	ldr	r3, [pc, #180]	@ (80090ec <_reclaim_reent+0xb8>)
 8009036:	b570      	push	{r4, r5, r6, lr}
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4604      	mov	r4, r0
 800903c:	4283      	cmp	r3, r0
 800903e:	d053      	beq.n	80090e8 <_reclaim_reent+0xb4>
 8009040:	69c3      	ldr	r3, [r0, #28]
 8009042:	b31b      	cbz	r3, 800908c <_reclaim_reent+0x58>
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	b163      	cbz	r3, 8009062 <_reclaim_reent+0x2e>
 8009048:	2500      	movs	r5, #0
 800904a:	69e3      	ldr	r3, [r4, #28]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	5959      	ldr	r1, [r3, r5]
 8009050:	b9b1      	cbnz	r1, 8009080 <_reclaim_reent+0x4c>
 8009052:	3504      	adds	r5, #4
 8009054:	2d80      	cmp	r5, #128	@ 0x80
 8009056:	d1f8      	bne.n	800904a <_reclaim_reent+0x16>
 8009058:	69e3      	ldr	r3, [r4, #28]
 800905a:	4620      	mov	r0, r4
 800905c:	68d9      	ldr	r1, [r3, #12]
 800905e:	f000 f881 	bl	8009164 <_free_r>
 8009062:	69e3      	ldr	r3, [r4, #28]
 8009064:	6819      	ldr	r1, [r3, #0]
 8009066:	b111      	cbz	r1, 800906e <_reclaim_reent+0x3a>
 8009068:	4620      	mov	r0, r4
 800906a:	f000 f87b 	bl	8009164 <_free_r>
 800906e:	69e3      	ldr	r3, [r4, #28]
 8009070:	689d      	ldr	r5, [r3, #8]
 8009072:	b15d      	cbz	r5, 800908c <_reclaim_reent+0x58>
 8009074:	4629      	mov	r1, r5
 8009076:	4620      	mov	r0, r4
 8009078:	682d      	ldr	r5, [r5, #0]
 800907a:	f000 f873 	bl	8009164 <_free_r>
 800907e:	e7f8      	b.n	8009072 <_reclaim_reent+0x3e>
 8009080:	680e      	ldr	r6, [r1, #0]
 8009082:	4620      	mov	r0, r4
 8009084:	f000 f86e 	bl	8009164 <_free_r>
 8009088:	4631      	mov	r1, r6
 800908a:	e7e1      	b.n	8009050 <_reclaim_reent+0x1c>
 800908c:	6961      	ldr	r1, [r4, #20]
 800908e:	b111      	cbz	r1, 8009096 <_reclaim_reent+0x62>
 8009090:	4620      	mov	r0, r4
 8009092:	f000 f867 	bl	8009164 <_free_r>
 8009096:	69e1      	ldr	r1, [r4, #28]
 8009098:	b111      	cbz	r1, 80090a0 <_reclaim_reent+0x6c>
 800909a:	4620      	mov	r0, r4
 800909c:	f000 f862 	bl	8009164 <_free_r>
 80090a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090a2:	b111      	cbz	r1, 80090aa <_reclaim_reent+0x76>
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 f85d 	bl	8009164 <_free_r>
 80090aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090ac:	b111      	cbz	r1, 80090b4 <_reclaim_reent+0x80>
 80090ae:	4620      	mov	r0, r4
 80090b0:	f000 f858 	bl	8009164 <_free_r>
 80090b4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80090b6:	b111      	cbz	r1, 80090be <_reclaim_reent+0x8a>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 f853 	bl	8009164 <_free_r>
 80090be:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80090c0:	b111      	cbz	r1, 80090c8 <_reclaim_reent+0x94>
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 f84e 	bl	8009164 <_free_r>
 80090c8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80090ca:	b111      	cbz	r1, 80090d2 <_reclaim_reent+0x9e>
 80090cc:	4620      	mov	r0, r4
 80090ce:	f000 f849 	bl	8009164 <_free_r>
 80090d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80090d4:	b111      	cbz	r1, 80090dc <_reclaim_reent+0xa8>
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 f844 	bl	8009164 <_free_r>
 80090dc:	6a23      	ldr	r3, [r4, #32]
 80090de:	b11b      	cbz	r3, 80090e8 <_reclaim_reent+0xb4>
 80090e0:	4620      	mov	r0, r4
 80090e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090e6:	4718      	bx	r3
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	bf00      	nop
 80090ec:	2000001c 	.word	0x2000001c

080090f0 <__errno>:
 80090f0:	4b01      	ldr	r3, [pc, #4]	@ (80090f8 <__errno+0x8>)
 80090f2:	6818      	ldr	r0, [r3, #0]
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	2000001c 	.word	0x2000001c

080090fc <__libc_init_array>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	2600      	movs	r6, #0
 8009100:	4d0c      	ldr	r5, [pc, #48]	@ (8009134 <__libc_init_array+0x38>)
 8009102:	4c0d      	ldr	r4, [pc, #52]	@ (8009138 <__libc_init_array+0x3c>)
 8009104:	1b64      	subs	r4, r4, r5
 8009106:	10a4      	asrs	r4, r4, #2
 8009108:	42a6      	cmp	r6, r4
 800910a:	d109      	bne.n	8009120 <__libc_init_array+0x24>
 800910c:	f000 fcba 	bl	8009a84 <_init>
 8009110:	2600      	movs	r6, #0
 8009112:	4d0a      	ldr	r5, [pc, #40]	@ (800913c <__libc_init_array+0x40>)
 8009114:	4c0a      	ldr	r4, [pc, #40]	@ (8009140 <__libc_init_array+0x44>)
 8009116:	1b64      	subs	r4, r4, r5
 8009118:	10a4      	asrs	r4, r4, #2
 800911a:	42a6      	cmp	r6, r4
 800911c:	d105      	bne.n	800912a <__libc_init_array+0x2e>
 800911e:	bd70      	pop	{r4, r5, r6, pc}
 8009120:	f855 3b04 	ldr.w	r3, [r5], #4
 8009124:	4798      	blx	r3
 8009126:	3601      	adds	r6, #1
 8009128:	e7ee      	b.n	8009108 <__libc_init_array+0xc>
 800912a:	f855 3b04 	ldr.w	r3, [r5], #4
 800912e:	4798      	blx	r3
 8009130:	3601      	adds	r6, #1
 8009132:	e7f2      	b.n	800911a <__libc_init_array+0x1e>
 8009134:	08009e74 	.word	0x08009e74
 8009138:	08009e74 	.word	0x08009e74
 800913c:	08009e74 	.word	0x08009e74
 8009140:	08009e78 	.word	0x08009e78

08009144 <__retarget_lock_acquire_recursive>:
 8009144:	4770      	bx	lr

08009146 <__retarget_lock_release_recursive>:
 8009146:	4770      	bx	lr

08009148 <memcpy>:
 8009148:	440a      	add	r2, r1
 800914a:	4291      	cmp	r1, r2
 800914c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009150:	d100      	bne.n	8009154 <memcpy+0xc>
 8009152:	4770      	bx	lr
 8009154:	b510      	push	{r4, lr}
 8009156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800915a:	4291      	cmp	r1, r2
 800915c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009160:	d1f9      	bne.n	8009156 <memcpy+0xe>
 8009162:	bd10      	pop	{r4, pc}

08009164 <_free_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4605      	mov	r5, r0
 8009168:	2900      	cmp	r1, #0
 800916a:	d040      	beq.n	80091ee <_free_r+0x8a>
 800916c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009170:	1f0c      	subs	r4, r1, #4
 8009172:	2b00      	cmp	r3, #0
 8009174:	bfb8      	it	lt
 8009176:	18e4      	addlt	r4, r4, r3
 8009178:	f000 f8de 	bl	8009338 <__malloc_lock>
 800917c:	4a1c      	ldr	r2, [pc, #112]	@ (80091f0 <_free_r+0x8c>)
 800917e:	6813      	ldr	r3, [r2, #0]
 8009180:	b933      	cbnz	r3, 8009190 <_free_r+0x2c>
 8009182:	6063      	str	r3, [r4, #4]
 8009184:	6014      	str	r4, [r2, #0]
 8009186:	4628      	mov	r0, r5
 8009188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800918c:	f000 b8da 	b.w	8009344 <__malloc_unlock>
 8009190:	42a3      	cmp	r3, r4
 8009192:	d908      	bls.n	80091a6 <_free_r+0x42>
 8009194:	6820      	ldr	r0, [r4, #0]
 8009196:	1821      	adds	r1, r4, r0
 8009198:	428b      	cmp	r3, r1
 800919a:	bf01      	itttt	eq
 800919c:	6819      	ldreq	r1, [r3, #0]
 800919e:	685b      	ldreq	r3, [r3, #4]
 80091a0:	1809      	addeq	r1, r1, r0
 80091a2:	6021      	streq	r1, [r4, #0]
 80091a4:	e7ed      	b.n	8009182 <_free_r+0x1e>
 80091a6:	461a      	mov	r2, r3
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	b10b      	cbz	r3, 80091b0 <_free_r+0x4c>
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	d9fa      	bls.n	80091a6 <_free_r+0x42>
 80091b0:	6811      	ldr	r1, [r2, #0]
 80091b2:	1850      	adds	r0, r2, r1
 80091b4:	42a0      	cmp	r0, r4
 80091b6:	d10b      	bne.n	80091d0 <_free_r+0x6c>
 80091b8:	6820      	ldr	r0, [r4, #0]
 80091ba:	4401      	add	r1, r0
 80091bc:	1850      	adds	r0, r2, r1
 80091be:	4283      	cmp	r3, r0
 80091c0:	6011      	str	r1, [r2, #0]
 80091c2:	d1e0      	bne.n	8009186 <_free_r+0x22>
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	685b      	ldr	r3, [r3, #4]
 80091c8:	4408      	add	r0, r1
 80091ca:	6010      	str	r0, [r2, #0]
 80091cc:	6053      	str	r3, [r2, #4]
 80091ce:	e7da      	b.n	8009186 <_free_r+0x22>
 80091d0:	d902      	bls.n	80091d8 <_free_r+0x74>
 80091d2:	230c      	movs	r3, #12
 80091d4:	602b      	str	r3, [r5, #0]
 80091d6:	e7d6      	b.n	8009186 <_free_r+0x22>
 80091d8:	6820      	ldr	r0, [r4, #0]
 80091da:	1821      	adds	r1, r4, r0
 80091dc:	428b      	cmp	r3, r1
 80091de:	bf01      	itttt	eq
 80091e0:	6819      	ldreq	r1, [r3, #0]
 80091e2:	685b      	ldreq	r3, [r3, #4]
 80091e4:	1809      	addeq	r1, r1, r0
 80091e6:	6021      	streq	r1, [r4, #0]
 80091e8:	6063      	str	r3, [r4, #4]
 80091ea:	6054      	str	r4, [r2, #4]
 80091ec:	e7cb      	b.n	8009186 <_free_r+0x22>
 80091ee:	bd38      	pop	{r3, r4, r5, pc}
 80091f0:	2000229c 	.word	0x2000229c

080091f4 <sbrk_aligned>:
 80091f4:	b570      	push	{r4, r5, r6, lr}
 80091f6:	4e0f      	ldr	r6, [pc, #60]	@ (8009234 <sbrk_aligned+0x40>)
 80091f8:	460c      	mov	r4, r1
 80091fa:	6831      	ldr	r1, [r6, #0]
 80091fc:	4605      	mov	r5, r0
 80091fe:	b911      	cbnz	r1, 8009206 <sbrk_aligned+0x12>
 8009200:	f000 fba8 	bl	8009954 <_sbrk_r>
 8009204:	6030      	str	r0, [r6, #0]
 8009206:	4621      	mov	r1, r4
 8009208:	4628      	mov	r0, r5
 800920a:	f000 fba3 	bl	8009954 <_sbrk_r>
 800920e:	1c43      	adds	r3, r0, #1
 8009210:	d103      	bne.n	800921a <sbrk_aligned+0x26>
 8009212:	f04f 34ff 	mov.w	r4, #4294967295
 8009216:	4620      	mov	r0, r4
 8009218:	bd70      	pop	{r4, r5, r6, pc}
 800921a:	1cc4      	adds	r4, r0, #3
 800921c:	f024 0403 	bic.w	r4, r4, #3
 8009220:	42a0      	cmp	r0, r4
 8009222:	d0f8      	beq.n	8009216 <sbrk_aligned+0x22>
 8009224:	1a21      	subs	r1, r4, r0
 8009226:	4628      	mov	r0, r5
 8009228:	f000 fb94 	bl	8009954 <_sbrk_r>
 800922c:	3001      	adds	r0, #1
 800922e:	d1f2      	bne.n	8009216 <sbrk_aligned+0x22>
 8009230:	e7ef      	b.n	8009212 <sbrk_aligned+0x1e>
 8009232:	bf00      	nop
 8009234:	20002298 	.word	0x20002298

08009238 <_malloc_r>:
 8009238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800923c:	1ccd      	adds	r5, r1, #3
 800923e:	f025 0503 	bic.w	r5, r5, #3
 8009242:	3508      	adds	r5, #8
 8009244:	2d0c      	cmp	r5, #12
 8009246:	bf38      	it	cc
 8009248:	250c      	movcc	r5, #12
 800924a:	2d00      	cmp	r5, #0
 800924c:	4606      	mov	r6, r0
 800924e:	db01      	blt.n	8009254 <_malloc_r+0x1c>
 8009250:	42a9      	cmp	r1, r5
 8009252:	d904      	bls.n	800925e <_malloc_r+0x26>
 8009254:	230c      	movs	r3, #12
 8009256:	6033      	str	r3, [r6, #0]
 8009258:	2000      	movs	r0, #0
 800925a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800925e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009334 <_malloc_r+0xfc>
 8009262:	f000 f869 	bl	8009338 <__malloc_lock>
 8009266:	f8d8 3000 	ldr.w	r3, [r8]
 800926a:	461c      	mov	r4, r3
 800926c:	bb44      	cbnz	r4, 80092c0 <_malloc_r+0x88>
 800926e:	4629      	mov	r1, r5
 8009270:	4630      	mov	r0, r6
 8009272:	f7ff ffbf 	bl	80091f4 <sbrk_aligned>
 8009276:	1c43      	adds	r3, r0, #1
 8009278:	4604      	mov	r4, r0
 800927a:	d158      	bne.n	800932e <_malloc_r+0xf6>
 800927c:	f8d8 4000 	ldr.w	r4, [r8]
 8009280:	4627      	mov	r7, r4
 8009282:	2f00      	cmp	r7, #0
 8009284:	d143      	bne.n	800930e <_malloc_r+0xd6>
 8009286:	2c00      	cmp	r4, #0
 8009288:	d04b      	beq.n	8009322 <_malloc_r+0xea>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	4639      	mov	r1, r7
 800928e:	4630      	mov	r0, r6
 8009290:	eb04 0903 	add.w	r9, r4, r3
 8009294:	f000 fb5e 	bl	8009954 <_sbrk_r>
 8009298:	4581      	cmp	r9, r0
 800929a:	d142      	bne.n	8009322 <_malloc_r+0xea>
 800929c:	6821      	ldr	r1, [r4, #0]
 800929e:	4630      	mov	r0, r6
 80092a0:	1a6d      	subs	r5, r5, r1
 80092a2:	4629      	mov	r1, r5
 80092a4:	f7ff ffa6 	bl	80091f4 <sbrk_aligned>
 80092a8:	3001      	adds	r0, #1
 80092aa:	d03a      	beq.n	8009322 <_malloc_r+0xea>
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	442b      	add	r3, r5
 80092b0:	6023      	str	r3, [r4, #0]
 80092b2:	f8d8 3000 	ldr.w	r3, [r8]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	bb62      	cbnz	r2, 8009314 <_malloc_r+0xdc>
 80092ba:	f8c8 7000 	str.w	r7, [r8]
 80092be:	e00f      	b.n	80092e0 <_malloc_r+0xa8>
 80092c0:	6822      	ldr	r2, [r4, #0]
 80092c2:	1b52      	subs	r2, r2, r5
 80092c4:	d420      	bmi.n	8009308 <_malloc_r+0xd0>
 80092c6:	2a0b      	cmp	r2, #11
 80092c8:	d917      	bls.n	80092fa <_malloc_r+0xc2>
 80092ca:	1961      	adds	r1, r4, r5
 80092cc:	42a3      	cmp	r3, r4
 80092ce:	6025      	str	r5, [r4, #0]
 80092d0:	bf18      	it	ne
 80092d2:	6059      	strne	r1, [r3, #4]
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	bf08      	it	eq
 80092d8:	f8c8 1000 	streq.w	r1, [r8]
 80092dc:	5162      	str	r2, [r4, r5]
 80092de:	604b      	str	r3, [r1, #4]
 80092e0:	4630      	mov	r0, r6
 80092e2:	f000 f82f 	bl	8009344 <__malloc_unlock>
 80092e6:	f104 000b 	add.w	r0, r4, #11
 80092ea:	1d23      	adds	r3, r4, #4
 80092ec:	f020 0007 	bic.w	r0, r0, #7
 80092f0:	1ac2      	subs	r2, r0, r3
 80092f2:	bf1c      	itt	ne
 80092f4:	1a1b      	subne	r3, r3, r0
 80092f6:	50a3      	strne	r3, [r4, r2]
 80092f8:	e7af      	b.n	800925a <_malloc_r+0x22>
 80092fa:	6862      	ldr	r2, [r4, #4]
 80092fc:	42a3      	cmp	r3, r4
 80092fe:	bf0c      	ite	eq
 8009300:	f8c8 2000 	streq.w	r2, [r8]
 8009304:	605a      	strne	r2, [r3, #4]
 8009306:	e7eb      	b.n	80092e0 <_malloc_r+0xa8>
 8009308:	4623      	mov	r3, r4
 800930a:	6864      	ldr	r4, [r4, #4]
 800930c:	e7ae      	b.n	800926c <_malloc_r+0x34>
 800930e:	463c      	mov	r4, r7
 8009310:	687f      	ldr	r7, [r7, #4]
 8009312:	e7b6      	b.n	8009282 <_malloc_r+0x4a>
 8009314:	461a      	mov	r2, r3
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	42a3      	cmp	r3, r4
 800931a:	d1fb      	bne.n	8009314 <_malloc_r+0xdc>
 800931c:	2300      	movs	r3, #0
 800931e:	6053      	str	r3, [r2, #4]
 8009320:	e7de      	b.n	80092e0 <_malloc_r+0xa8>
 8009322:	230c      	movs	r3, #12
 8009324:	4630      	mov	r0, r6
 8009326:	6033      	str	r3, [r6, #0]
 8009328:	f000 f80c 	bl	8009344 <__malloc_unlock>
 800932c:	e794      	b.n	8009258 <_malloc_r+0x20>
 800932e:	6005      	str	r5, [r0, #0]
 8009330:	e7d6      	b.n	80092e0 <_malloc_r+0xa8>
 8009332:	bf00      	nop
 8009334:	2000229c 	.word	0x2000229c

08009338 <__malloc_lock>:
 8009338:	4801      	ldr	r0, [pc, #4]	@ (8009340 <__malloc_lock+0x8>)
 800933a:	f7ff bf03 	b.w	8009144 <__retarget_lock_acquire_recursive>
 800933e:	bf00      	nop
 8009340:	20002294 	.word	0x20002294

08009344 <__malloc_unlock>:
 8009344:	4801      	ldr	r0, [pc, #4]	@ (800934c <__malloc_unlock+0x8>)
 8009346:	f7ff befe 	b.w	8009146 <__retarget_lock_release_recursive>
 800934a:	bf00      	nop
 800934c:	20002294 	.word	0x20002294

08009350 <__ssputs_r>:
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	461f      	mov	r7, r3
 8009356:	688e      	ldr	r6, [r1, #8]
 8009358:	4682      	mov	sl, r0
 800935a:	42be      	cmp	r6, r7
 800935c:	460c      	mov	r4, r1
 800935e:	4690      	mov	r8, r2
 8009360:	680b      	ldr	r3, [r1, #0]
 8009362:	d82d      	bhi.n	80093c0 <__ssputs_r+0x70>
 8009364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009368:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800936c:	d026      	beq.n	80093bc <__ssputs_r+0x6c>
 800936e:	6965      	ldr	r5, [r4, #20]
 8009370:	6909      	ldr	r1, [r1, #16]
 8009372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009376:	eba3 0901 	sub.w	r9, r3, r1
 800937a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800937e:	1c7b      	adds	r3, r7, #1
 8009380:	444b      	add	r3, r9
 8009382:	106d      	asrs	r5, r5, #1
 8009384:	429d      	cmp	r5, r3
 8009386:	bf38      	it	cc
 8009388:	461d      	movcc	r5, r3
 800938a:	0553      	lsls	r3, r2, #21
 800938c:	d527      	bpl.n	80093de <__ssputs_r+0x8e>
 800938e:	4629      	mov	r1, r5
 8009390:	f7ff ff52 	bl	8009238 <_malloc_r>
 8009394:	4606      	mov	r6, r0
 8009396:	b360      	cbz	r0, 80093f2 <__ssputs_r+0xa2>
 8009398:	464a      	mov	r2, r9
 800939a:	6921      	ldr	r1, [r4, #16]
 800939c:	f7ff fed4 	bl	8009148 <memcpy>
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093aa:	81a3      	strh	r3, [r4, #12]
 80093ac:	6126      	str	r6, [r4, #16]
 80093ae:	444e      	add	r6, r9
 80093b0:	6026      	str	r6, [r4, #0]
 80093b2:	463e      	mov	r6, r7
 80093b4:	6165      	str	r5, [r4, #20]
 80093b6:	eba5 0509 	sub.w	r5, r5, r9
 80093ba:	60a5      	str	r5, [r4, #8]
 80093bc:	42be      	cmp	r6, r7
 80093be:	d900      	bls.n	80093c2 <__ssputs_r+0x72>
 80093c0:	463e      	mov	r6, r7
 80093c2:	4632      	mov	r2, r6
 80093c4:	4641      	mov	r1, r8
 80093c6:	6820      	ldr	r0, [r4, #0]
 80093c8:	f000 faaa 	bl	8009920 <memmove>
 80093cc:	2000      	movs	r0, #0
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	1b9b      	subs	r3, r3, r6
 80093d2:	60a3      	str	r3, [r4, #8]
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	4433      	add	r3, r6
 80093d8:	6023      	str	r3, [r4, #0]
 80093da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093de:	462a      	mov	r2, r5
 80093e0:	f000 fad6 	bl	8009990 <_realloc_r>
 80093e4:	4606      	mov	r6, r0
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d1e0      	bne.n	80093ac <__ssputs_r+0x5c>
 80093ea:	4650      	mov	r0, sl
 80093ec:	6921      	ldr	r1, [r4, #16]
 80093ee:	f7ff feb9 	bl	8009164 <_free_r>
 80093f2:	230c      	movs	r3, #12
 80093f4:	f8ca 3000 	str.w	r3, [sl]
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	f04f 30ff 	mov.w	r0, #4294967295
 80093fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009402:	81a3      	strh	r3, [r4, #12]
 8009404:	e7e9      	b.n	80093da <__ssputs_r+0x8a>
	...

08009408 <_svfiprintf_r>:
 8009408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	4698      	mov	r8, r3
 800940e:	898b      	ldrh	r3, [r1, #12]
 8009410:	4607      	mov	r7, r0
 8009412:	061b      	lsls	r3, r3, #24
 8009414:	460d      	mov	r5, r1
 8009416:	4614      	mov	r4, r2
 8009418:	b09d      	sub	sp, #116	@ 0x74
 800941a:	d510      	bpl.n	800943e <_svfiprintf_r+0x36>
 800941c:	690b      	ldr	r3, [r1, #16]
 800941e:	b973      	cbnz	r3, 800943e <_svfiprintf_r+0x36>
 8009420:	2140      	movs	r1, #64	@ 0x40
 8009422:	f7ff ff09 	bl	8009238 <_malloc_r>
 8009426:	6028      	str	r0, [r5, #0]
 8009428:	6128      	str	r0, [r5, #16]
 800942a:	b930      	cbnz	r0, 800943a <_svfiprintf_r+0x32>
 800942c:	230c      	movs	r3, #12
 800942e:	603b      	str	r3, [r7, #0]
 8009430:	f04f 30ff 	mov.w	r0, #4294967295
 8009434:	b01d      	add	sp, #116	@ 0x74
 8009436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943a:	2340      	movs	r3, #64	@ 0x40
 800943c:	616b      	str	r3, [r5, #20]
 800943e:	2300      	movs	r3, #0
 8009440:	9309      	str	r3, [sp, #36]	@ 0x24
 8009442:	2320      	movs	r3, #32
 8009444:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009448:	2330      	movs	r3, #48	@ 0x30
 800944a:	f04f 0901 	mov.w	r9, #1
 800944e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009452:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80095ec <_svfiprintf_r+0x1e4>
 8009456:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800945a:	4623      	mov	r3, r4
 800945c:	469a      	mov	sl, r3
 800945e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009462:	b10a      	cbz	r2, 8009468 <_svfiprintf_r+0x60>
 8009464:	2a25      	cmp	r2, #37	@ 0x25
 8009466:	d1f9      	bne.n	800945c <_svfiprintf_r+0x54>
 8009468:	ebba 0b04 	subs.w	fp, sl, r4
 800946c:	d00b      	beq.n	8009486 <_svfiprintf_r+0x7e>
 800946e:	465b      	mov	r3, fp
 8009470:	4622      	mov	r2, r4
 8009472:	4629      	mov	r1, r5
 8009474:	4638      	mov	r0, r7
 8009476:	f7ff ff6b 	bl	8009350 <__ssputs_r>
 800947a:	3001      	adds	r0, #1
 800947c:	f000 80a7 	beq.w	80095ce <_svfiprintf_r+0x1c6>
 8009480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009482:	445a      	add	r2, fp
 8009484:	9209      	str	r2, [sp, #36]	@ 0x24
 8009486:	f89a 3000 	ldrb.w	r3, [sl]
 800948a:	2b00      	cmp	r3, #0
 800948c:	f000 809f 	beq.w	80095ce <_svfiprintf_r+0x1c6>
 8009490:	2300      	movs	r3, #0
 8009492:	f04f 32ff 	mov.w	r2, #4294967295
 8009496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800949a:	f10a 0a01 	add.w	sl, sl, #1
 800949e:	9304      	str	r3, [sp, #16]
 80094a0:	9307      	str	r3, [sp, #28]
 80094a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80094a8:	4654      	mov	r4, sl
 80094aa:	2205      	movs	r2, #5
 80094ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b0:	484e      	ldr	r0, [pc, #312]	@ (80095ec <_svfiprintf_r+0x1e4>)
 80094b2:	f000 fa5f 	bl	8009974 <memchr>
 80094b6:	9a04      	ldr	r2, [sp, #16]
 80094b8:	b9d8      	cbnz	r0, 80094f2 <_svfiprintf_r+0xea>
 80094ba:	06d0      	lsls	r0, r2, #27
 80094bc:	bf44      	itt	mi
 80094be:	2320      	movmi	r3, #32
 80094c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094c4:	0711      	lsls	r1, r2, #28
 80094c6:	bf44      	itt	mi
 80094c8:	232b      	movmi	r3, #43	@ 0x2b
 80094ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094ce:	f89a 3000 	ldrb.w	r3, [sl]
 80094d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80094d4:	d015      	beq.n	8009502 <_svfiprintf_r+0xfa>
 80094d6:	4654      	mov	r4, sl
 80094d8:	2000      	movs	r0, #0
 80094da:	f04f 0c0a 	mov.w	ip, #10
 80094de:	9a07      	ldr	r2, [sp, #28]
 80094e0:	4621      	mov	r1, r4
 80094e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094e6:	3b30      	subs	r3, #48	@ 0x30
 80094e8:	2b09      	cmp	r3, #9
 80094ea:	d94b      	bls.n	8009584 <_svfiprintf_r+0x17c>
 80094ec:	b1b0      	cbz	r0, 800951c <_svfiprintf_r+0x114>
 80094ee:	9207      	str	r2, [sp, #28]
 80094f0:	e014      	b.n	800951c <_svfiprintf_r+0x114>
 80094f2:	eba0 0308 	sub.w	r3, r0, r8
 80094f6:	fa09 f303 	lsl.w	r3, r9, r3
 80094fa:	4313      	orrs	r3, r2
 80094fc:	46a2      	mov	sl, r4
 80094fe:	9304      	str	r3, [sp, #16]
 8009500:	e7d2      	b.n	80094a8 <_svfiprintf_r+0xa0>
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	1d19      	adds	r1, r3, #4
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	9103      	str	r1, [sp, #12]
 800950a:	2b00      	cmp	r3, #0
 800950c:	bfbb      	ittet	lt
 800950e:	425b      	neglt	r3, r3
 8009510:	f042 0202 	orrlt.w	r2, r2, #2
 8009514:	9307      	strge	r3, [sp, #28]
 8009516:	9307      	strlt	r3, [sp, #28]
 8009518:	bfb8      	it	lt
 800951a:	9204      	strlt	r2, [sp, #16]
 800951c:	7823      	ldrb	r3, [r4, #0]
 800951e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009520:	d10a      	bne.n	8009538 <_svfiprintf_r+0x130>
 8009522:	7863      	ldrb	r3, [r4, #1]
 8009524:	2b2a      	cmp	r3, #42	@ 0x2a
 8009526:	d132      	bne.n	800958e <_svfiprintf_r+0x186>
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	3402      	adds	r4, #2
 800952c:	1d1a      	adds	r2, r3, #4
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	9203      	str	r2, [sp, #12]
 8009532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009536:	9305      	str	r3, [sp, #20]
 8009538:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80095f0 <_svfiprintf_r+0x1e8>
 800953c:	2203      	movs	r2, #3
 800953e:	4650      	mov	r0, sl
 8009540:	7821      	ldrb	r1, [r4, #0]
 8009542:	f000 fa17 	bl	8009974 <memchr>
 8009546:	b138      	cbz	r0, 8009558 <_svfiprintf_r+0x150>
 8009548:	2240      	movs	r2, #64	@ 0x40
 800954a:	9b04      	ldr	r3, [sp, #16]
 800954c:	eba0 000a 	sub.w	r0, r0, sl
 8009550:	4082      	lsls	r2, r0
 8009552:	4313      	orrs	r3, r2
 8009554:	3401      	adds	r4, #1
 8009556:	9304      	str	r3, [sp, #16]
 8009558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800955c:	2206      	movs	r2, #6
 800955e:	4825      	ldr	r0, [pc, #148]	@ (80095f4 <_svfiprintf_r+0x1ec>)
 8009560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009564:	f000 fa06 	bl	8009974 <memchr>
 8009568:	2800      	cmp	r0, #0
 800956a:	d036      	beq.n	80095da <_svfiprintf_r+0x1d2>
 800956c:	4b22      	ldr	r3, [pc, #136]	@ (80095f8 <_svfiprintf_r+0x1f0>)
 800956e:	bb1b      	cbnz	r3, 80095b8 <_svfiprintf_r+0x1b0>
 8009570:	9b03      	ldr	r3, [sp, #12]
 8009572:	3307      	adds	r3, #7
 8009574:	f023 0307 	bic.w	r3, r3, #7
 8009578:	3308      	adds	r3, #8
 800957a:	9303      	str	r3, [sp, #12]
 800957c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957e:	4433      	add	r3, r6
 8009580:	9309      	str	r3, [sp, #36]	@ 0x24
 8009582:	e76a      	b.n	800945a <_svfiprintf_r+0x52>
 8009584:	460c      	mov	r4, r1
 8009586:	2001      	movs	r0, #1
 8009588:	fb0c 3202 	mla	r2, ip, r2, r3
 800958c:	e7a8      	b.n	80094e0 <_svfiprintf_r+0xd8>
 800958e:	2300      	movs	r3, #0
 8009590:	f04f 0c0a 	mov.w	ip, #10
 8009594:	4619      	mov	r1, r3
 8009596:	3401      	adds	r4, #1
 8009598:	9305      	str	r3, [sp, #20]
 800959a:	4620      	mov	r0, r4
 800959c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095a0:	3a30      	subs	r2, #48	@ 0x30
 80095a2:	2a09      	cmp	r2, #9
 80095a4:	d903      	bls.n	80095ae <_svfiprintf_r+0x1a6>
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d0c6      	beq.n	8009538 <_svfiprintf_r+0x130>
 80095aa:	9105      	str	r1, [sp, #20]
 80095ac:	e7c4      	b.n	8009538 <_svfiprintf_r+0x130>
 80095ae:	4604      	mov	r4, r0
 80095b0:	2301      	movs	r3, #1
 80095b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095b6:	e7f0      	b.n	800959a <_svfiprintf_r+0x192>
 80095b8:	ab03      	add	r3, sp, #12
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	462a      	mov	r2, r5
 80095be:	4638      	mov	r0, r7
 80095c0:	4b0e      	ldr	r3, [pc, #56]	@ (80095fc <_svfiprintf_r+0x1f4>)
 80095c2:	a904      	add	r1, sp, #16
 80095c4:	f3af 8000 	nop.w
 80095c8:	1c42      	adds	r2, r0, #1
 80095ca:	4606      	mov	r6, r0
 80095cc:	d1d6      	bne.n	800957c <_svfiprintf_r+0x174>
 80095ce:	89ab      	ldrh	r3, [r5, #12]
 80095d0:	065b      	lsls	r3, r3, #25
 80095d2:	f53f af2d 	bmi.w	8009430 <_svfiprintf_r+0x28>
 80095d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095d8:	e72c      	b.n	8009434 <_svfiprintf_r+0x2c>
 80095da:	ab03      	add	r3, sp, #12
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	462a      	mov	r2, r5
 80095e0:	4638      	mov	r0, r7
 80095e2:	4b06      	ldr	r3, [pc, #24]	@ (80095fc <_svfiprintf_r+0x1f4>)
 80095e4:	a904      	add	r1, sp, #16
 80095e6:	f000 f87d 	bl	80096e4 <_printf_i>
 80095ea:	e7ed      	b.n	80095c8 <_svfiprintf_r+0x1c0>
 80095ec:	08009e36 	.word	0x08009e36
 80095f0:	08009e3c 	.word	0x08009e3c
 80095f4:	08009e40 	.word	0x08009e40
 80095f8:	00000000 	.word	0x00000000
 80095fc:	08009351 	.word	0x08009351

08009600 <_printf_common>:
 8009600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009604:	4616      	mov	r6, r2
 8009606:	4698      	mov	r8, r3
 8009608:	688a      	ldr	r2, [r1, #8]
 800960a:	690b      	ldr	r3, [r1, #16]
 800960c:	4607      	mov	r7, r0
 800960e:	4293      	cmp	r3, r2
 8009610:	bfb8      	it	lt
 8009612:	4613      	movlt	r3, r2
 8009614:	6033      	str	r3, [r6, #0]
 8009616:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800961a:	460c      	mov	r4, r1
 800961c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009620:	b10a      	cbz	r2, 8009626 <_printf_common+0x26>
 8009622:	3301      	adds	r3, #1
 8009624:	6033      	str	r3, [r6, #0]
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	0699      	lsls	r1, r3, #26
 800962a:	bf42      	ittt	mi
 800962c:	6833      	ldrmi	r3, [r6, #0]
 800962e:	3302      	addmi	r3, #2
 8009630:	6033      	strmi	r3, [r6, #0]
 8009632:	6825      	ldr	r5, [r4, #0]
 8009634:	f015 0506 	ands.w	r5, r5, #6
 8009638:	d106      	bne.n	8009648 <_printf_common+0x48>
 800963a:	f104 0a19 	add.w	sl, r4, #25
 800963e:	68e3      	ldr	r3, [r4, #12]
 8009640:	6832      	ldr	r2, [r6, #0]
 8009642:	1a9b      	subs	r3, r3, r2
 8009644:	42ab      	cmp	r3, r5
 8009646:	dc2b      	bgt.n	80096a0 <_printf_common+0xa0>
 8009648:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800964c:	6822      	ldr	r2, [r4, #0]
 800964e:	3b00      	subs	r3, #0
 8009650:	bf18      	it	ne
 8009652:	2301      	movne	r3, #1
 8009654:	0692      	lsls	r2, r2, #26
 8009656:	d430      	bmi.n	80096ba <_printf_common+0xba>
 8009658:	4641      	mov	r1, r8
 800965a:	4638      	mov	r0, r7
 800965c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009660:	47c8      	blx	r9
 8009662:	3001      	adds	r0, #1
 8009664:	d023      	beq.n	80096ae <_printf_common+0xae>
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	6922      	ldr	r2, [r4, #16]
 800966a:	f003 0306 	and.w	r3, r3, #6
 800966e:	2b04      	cmp	r3, #4
 8009670:	bf14      	ite	ne
 8009672:	2500      	movne	r5, #0
 8009674:	6833      	ldreq	r3, [r6, #0]
 8009676:	f04f 0600 	mov.w	r6, #0
 800967a:	bf08      	it	eq
 800967c:	68e5      	ldreq	r5, [r4, #12]
 800967e:	f104 041a 	add.w	r4, r4, #26
 8009682:	bf08      	it	eq
 8009684:	1aed      	subeq	r5, r5, r3
 8009686:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800968a:	bf08      	it	eq
 800968c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009690:	4293      	cmp	r3, r2
 8009692:	bfc4      	itt	gt
 8009694:	1a9b      	subgt	r3, r3, r2
 8009696:	18ed      	addgt	r5, r5, r3
 8009698:	42b5      	cmp	r5, r6
 800969a:	d11a      	bne.n	80096d2 <_printf_common+0xd2>
 800969c:	2000      	movs	r0, #0
 800969e:	e008      	b.n	80096b2 <_printf_common+0xb2>
 80096a0:	2301      	movs	r3, #1
 80096a2:	4652      	mov	r2, sl
 80096a4:	4641      	mov	r1, r8
 80096a6:	4638      	mov	r0, r7
 80096a8:	47c8      	blx	r9
 80096aa:	3001      	adds	r0, #1
 80096ac:	d103      	bne.n	80096b6 <_printf_common+0xb6>
 80096ae:	f04f 30ff 	mov.w	r0, #4294967295
 80096b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b6:	3501      	adds	r5, #1
 80096b8:	e7c1      	b.n	800963e <_printf_common+0x3e>
 80096ba:	2030      	movs	r0, #48	@ 0x30
 80096bc:	18e1      	adds	r1, r4, r3
 80096be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80096c8:	4422      	add	r2, r4
 80096ca:	3302      	adds	r3, #2
 80096cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80096d0:	e7c2      	b.n	8009658 <_printf_common+0x58>
 80096d2:	2301      	movs	r3, #1
 80096d4:	4622      	mov	r2, r4
 80096d6:	4641      	mov	r1, r8
 80096d8:	4638      	mov	r0, r7
 80096da:	47c8      	blx	r9
 80096dc:	3001      	adds	r0, #1
 80096de:	d0e6      	beq.n	80096ae <_printf_common+0xae>
 80096e0:	3601      	adds	r6, #1
 80096e2:	e7d9      	b.n	8009698 <_printf_common+0x98>

080096e4 <_printf_i>:
 80096e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096e8:	7e0f      	ldrb	r7, [r1, #24]
 80096ea:	4691      	mov	r9, r2
 80096ec:	2f78      	cmp	r7, #120	@ 0x78
 80096ee:	4680      	mov	r8, r0
 80096f0:	460c      	mov	r4, r1
 80096f2:	469a      	mov	sl, r3
 80096f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096fa:	d807      	bhi.n	800970c <_printf_i+0x28>
 80096fc:	2f62      	cmp	r7, #98	@ 0x62
 80096fe:	d80a      	bhi.n	8009716 <_printf_i+0x32>
 8009700:	2f00      	cmp	r7, #0
 8009702:	f000 80d1 	beq.w	80098a8 <_printf_i+0x1c4>
 8009706:	2f58      	cmp	r7, #88	@ 0x58
 8009708:	f000 80b8 	beq.w	800987c <_printf_i+0x198>
 800970c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009714:	e03a      	b.n	800978c <_printf_i+0xa8>
 8009716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800971a:	2b15      	cmp	r3, #21
 800971c:	d8f6      	bhi.n	800970c <_printf_i+0x28>
 800971e:	a101      	add	r1, pc, #4	@ (adr r1, 8009724 <_printf_i+0x40>)
 8009720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009724:	0800977d 	.word	0x0800977d
 8009728:	08009791 	.word	0x08009791
 800972c:	0800970d 	.word	0x0800970d
 8009730:	0800970d 	.word	0x0800970d
 8009734:	0800970d 	.word	0x0800970d
 8009738:	0800970d 	.word	0x0800970d
 800973c:	08009791 	.word	0x08009791
 8009740:	0800970d 	.word	0x0800970d
 8009744:	0800970d 	.word	0x0800970d
 8009748:	0800970d 	.word	0x0800970d
 800974c:	0800970d 	.word	0x0800970d
 8009750:	0800988f 	.word	0x0800988f
 8009754:	080097bb 	.word	0x080097bb
 8009758:	08009849 	.word	0x08009849
 800975c:	0800970d 	.word	0x0800970d
 8009760:	0800970d 	.word	0x0800970d
 8009764:	080098b1 	.word	0x080098b1
 8009768:	0800970d 	.word	0x0800970d
 800976c:	080097bb 	.word	0x080097bb
 8009770:	0800970d 	.word	0x0800970d
 8009774:	0800970d 	.word	0x0800970d
 8009778:	08009851 	.word	0x08009851
 800977c:	6833      	ldr	r3, [r6, #0]
 800977e:	1d1a      	adds	r2, r3, #4
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	6032      	str	r2, [r6, #0]
 8009784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800978c:	2301      	movs	r3, #1
 800978e:	e09c      	b.n	80098ca <_printf_i+0x1e6>
 8009790:	6833      	ldr	r3, [r6, #0]
 8009792:	6820      	ldr	r0, [r4, #0]
 8009794:	1d19      	adds	r1, r3, #4
 8009796:	6031      	str	r1, [r6, #0]
 8009798:	0606      	lsls	r6, r0, #24
 800979a:	d501      	bpl.n	80097a0 <_printf_i+0xbc>
 800979c:	681d      	ldr	r5, [r3, #0]
 800979e:	e003      	b.n	80097a8 <_printf_i+0xc4>
 80097a0:	0645      	lsls	r5, r0, #25
 80097a2:	d5fb      	bpl.n	800979c <_printf_i+0xb8>
 80097a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80097a8:	2d00      	cmp	r5, #0
 80097aa:	da03      	bge.n	80097b4 <_printf_i+0xd0>
 80097ac:	232d      	movs	r3, #45	@ 0x2d
 80097ae:	426d      	negs	r5, r5
 80097b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097b4:	230a      	movs	r3, #10
 80097b6:	4858      	ldr	r0, [pc, #352]	@ (8009918 <_printf_i+0x234>)
 80097b8:	e011      	b.n	80097de <_printf_i+0xfa>
 80097ba:	6821      	ldr	r1, [r4, #0]
 80097bc:	6833      	ldr	r3, [r6, #0]
 80097be:	0608      	lsls	r0, r1, #24
 80097c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80097c4:	d402      	bmi.n	80097cc <_printf_i+0xe8>
 80097c6:	0649      	lsls	r1, r1, #25
 80097c8:	bf48      	it	mi
 80097ca:	b2ad      	uxthmi	r5, r5
 80097cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80097ce:	6033      	str	r3, [r6, #0]
 80097d0:	bf14      	ite	ne
 80097d2:	230a      	movne	r3, #10
 80097d4:	2308      	moveq	r3, #8
 80097d6:	4850      	ldr	r0, [pc, #320]	@ (8009918 <_printf_i+0x234>)
 80097d8:	2100      	movs	r1, #0
 80097da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097de:	6866      	ldr	r6, [r4, #4]
 80097e0:	2e00      	cmp	r6, #0
 80097e2:	60a6      	str	r6, [r4, #8]
 80097e4:	db05      	blt.n	80097f2 <_printf_i+0x10e>
 80097e6:	6821      	ldr	r1, [r4, #0]
 80097e8:	432e      	orrs	r6, r5
 80097ea:	f021 0104 	bic.w	r1, r1, #4
 80097ee:	6021      	str	r1, [r4, #0]
 80097f0:	d04b      	beq.n	800988a <_printf_i+0x1a6>
 80097f2:	4616      	mov	r6, r2
 80097f4:	fbb5 f1f3 	udiv	r1, r5, r3
 80097f8:	fb03 5711 	mls	r7, r3, r1, r5
 80097fc:	5dc7      	ldrb	r7, [r0, r7]
 80097fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009802:	462f      	mov	r7, r5
 8009804:	42bb      	cmp	r3, r7
 8009806:	460d      	mov	r5, r1
 8009808:	d9f4      	bls.n	80097f4 <_printf_i+0x110>
 800980a:	2b08      	cmp	r3, #8
 800980c:	d10b      	bne.n	8009826 <_printf_i+0x142>
 800980e:	6823      	ldr	r3, [r4, #0]
 8009810:	07df      	lsls	r7, r3, #31
 8009812:	d508      	bpl.n	8009826 <_printf_i+0x142>
 8009814:	6923      	ldr	r3, [r4, #16]
 8009816:	6861      	ldr	r1, [r4, #4]
 8009818:	4299      	cmp	r1, r3
 800981a:	bfde      	ittt	le
 800981c:	2330      	movle	r3, #48	@ 0x30
 800981e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009822:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009826:	1b92      	subs	r2, r2, r6
 8009828:	6122      	str	r2, [r4, #16]
 800982a:	464b      	mov	r3, r9
 800982c:	4621      	mov	r1, r4
 800982e:	4640      	mov	r0, r8
 8009830:	f8cd a000 	str.w	sl, [sp]
 8009834:	aa03      	add	r2, sp, #12
 8009836:	f7ff fee3 	bl	8009600 <_printf_common>
 800983a:	3001      	adds	r0, #1
 800983c:	d14a      	bne.n	80098d4 <_printf_i+0x1f0>
 800983e:	f04f 30ff 	mov.w	r0, #4294967295
 8009842:	b004      	add	sp, #16
 8009844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	f043 0320 	orr.w	r3, r3, #32
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	2778      	movs	r7, #120	@ 0x78
 8009852:	4832      	ldr	r0, [pc, #200]	@ (800991c <_printf_i+0x238>)
 8009854:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	6831      	ldr	r1, [r6, #0]
 800985c:	061f      	lsls	r7, r3, #24
 800985e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009862:	d402      	bmi.n	800986a <_printf_i+0x186>
 8009864:	065f      	lsls	r7, r3, #25
 8009866:	bf48      	it	mi
 8009868:	b2ad      	uxthmi	r5, r5
 800986a:	6031      	str	r1, [r6, #0]
 800986c:	07d9      	lsls	r1, r3, #31
 800986e:	bf44      	itt	mi
 8009870:	f043 0320 	orrmi.w	r3, r3, #32
 8009874:	6023      	strmi	r3, [r4, #0]
 8009876:	b11d      	cbz	r5, 8009880 <_printf_i+0x19c>
 8009878:	2310      	movs	r3, #16
 800987a:	e7ad      	b.n	80097d8 <_printf_i+0xf4>
 800987c:	4826      	ldr	r0, [pc, #152]	@ (8009918 <_printf_i+0x234>)
 800987e:	e7e9      	b.n	8009854 <_printf_i+0x170>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	f023 0320 	bic.w	r3, r3, #32
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	e7f6      	b.n	8009878 <_printf_i+0x194>
 800988a:	4616      	mov	r6, r2
 800988c:	e7bd      	b.n	800980a <_printf_i+0x126>
 800988e:	6833      	ldr	r3, [r6, #0]
 8009890:	6825      	ldr	r5, [r4, #0]
 8009892:	1d18      	adds	r0, r3, #4
 8009894:	6961      	ldr	r1, [r4, #20]
 8009896:	6030      	str	r0, [r6, #0]
 8009898:	062e      	lsls	r6, r5, #24
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	d501      	bpl.n	80098a2 <_printf_i+0x1be>
 800989e:	6019      	str	r1, [r3, #0]
 80098a0:	e002      	b.n	80098a8 <_printf_i+0x1c4>
 80098a2:	0668      	lsls	r0, r5, #25
 80098a4:	d5fb      	bpl.n	800989e <_printf_i+0x1ba>
 80098a6:	8019      	strh	r1, [r3, #0]
 80098a8:	2300      	movs	r3, #0
 80098aa:	4616      	mov	r6, r2
 80098ac:	6123      	str	r3, [r4, #16]
 80098ae:	e7bc      	b.n	800982a <_printf_i+0x146>
 80098b0:	6833      	ldr	r3, [r6, #0]
 80098b2:	2100      	movs	r1, #0
 80098b4:	1d1a      	adds	r2, r3, #4
 80098b6:	6032      	str	r2, [r6, #0]
 80098b8:	681e      	ldr	r6, [r3, #0]
 80098ba:	6862      	ldr	r2, [r4, #4]
 80098bc:	4630      	mov	r0, r6
 80098be:	f000 f859 	bl	8009974 <memchr>
 80098c2:	b108      	cbz	r0, 80098c8 <_printf_i+0x1e4>
 80098c4:	1b80      	subs	r0, r0, r6
 80098c6:	6060      	str	r0, [r4, #4]
 80098c8:	6863      	ldr	r3, [r4, #4]
 80098ca:	6123      	str	r3, [r4, #16]
 80098cc:	2300      	movs	r3, #0
 80098ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098d2:	e7aa      	b.n	800982a <_printf_i+0x146>
 80098d4:	4632      	mov	r2, r6
 80098d6:	4649      	mov	r1, r9
 80098d8:	4640      	mov	r0, r8
 80098da:	6923      	ldr	r3, [r4, #16]
 80098dc:	47d0      	blx	sl
 80098de:	3001      	adds	r0, #1
 80098e0:	d0ad      	beq.n	800983e <_printf_i+0x15a>
 80098e2:	6823      	ldr	r3, [r4, #0]
 80098e4:	079b      	lsls	r3, r3, #30
 80098e6:	d413      	bmi.n	8009910 <_printf_i+0x22c>
 80098e8:	68e0      	ldr	r0, [r4, #12]
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	4298      	cmp	r0, r3
 80098ee:	bfb8      	it	lt
 80098f0:	4618      	movlt	r0, r3
 80098f2:	e7a6      	b.n	8009842 <_printf_i+0x15e>
 80098f4:	2301      	movs	r3, #1
 80098f6:	4632      	mov	r2, r6
 80098f8:	4649      	mov	r1, r9
 80098fa:	4640      	mov	r0, r8
 80098fc:	47d0      	blx	sl
 80098fe:	3001      	adds	r0, #1
 8009900:	d09d      	beq.n	800983e <_printf_i+0x15a>
 8009902:	3501      	adds	r5, #1
 8009904:	68e3      	ldr	r3, [r4, #12]
 8009906:	9903      	ldr	r1, [sp, #12]
 8009908:	1a5b      	subs	r3, r3, r1
 800990a:	42ab      	cmp	r3, r5
 800990c:	dcf2      	bgt.n	80098f4 <_printf_i+0x210>
 800990e:	e7eb      	b.n	80098e8 <_printf_i+0x204>
 8009910:	2500      	movs	r5, #0
 8009912:	f104 0619 	add.w	r6, r4, #25
 8009916:	e7f5      	b.n	8009904 <_printf_i+0x220>
 8009918:	08009e47 	.word	0x08009e47
 800991c:	08009e58 	.word	0x08009e58

08009920 <memmove>:
 8009920:	4288      	cmp	r0, r1
 8009922:	b510      	push	{r4, lr}
 8009924:	eb01 0402 	add.w	r4, r1, r2
 8009928:	d902      	bls.n	8009930 <memmove+0x10>
 800992a:	4284      	cmp	r4, r0
 800992c:	4623      	mov	r3, r4
 800992e:	d807      	bhi.n	8009940 <memmove+0x20>
 8009930:	1e43      	subs	r3, r0, #1
 8009932:	42a1      	cmp	r1, r4
 8009934:	d008      	beq.n	8009948 <memmove+0x28>
 8009936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800993a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800993e:	e7f8      	b.n	8009932 <memmove+0x12>
 8009940:	4601      	mov	r1, r0
 8009942:	4402      	add	r2, r0
 8009944:	428a      	cmp	r2, r1
 8009946:	d100      	bne.n	800994a <memmove+0x2a>
 8009948:	bd10      	pop	{r4, pc}
 800994a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800994e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009952:	e7f7      	b.n	8009944 <memmove+0x24>

08009954 <_sbrk_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	2300      	movs	r3, #0
 8009958:	4d05      	ldr	r5, [pc, #20]	@ (8009970 <_sbrk_r+0x1c>)
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7f8 f8d8 	bl	8001b14 <_sbrk>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_sbrk_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_sbrk_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20002290 	.word	0x20002290

08009974 <memchr>:
 8009974:	4603      	mov	r3, r0
 8009976:	b510      	push	{r4, lr}
 8009978:	b2c9      	uxtb	r1, r1
 800997a:	4402      	add	r2, r0
 800997c:	4293      	cmp	r3, r2
 800997e:	4618      	mov	r0, r3
 8009980:	d101      	bne.n	8009986 <memchr+0x12>
 8009982:	2000      	movs	r0, #0
 8009984:	e003      	b.n	800998e <memchr+0x1a>
 8009986:	7804      	ldrb	r4, [r0, #0]
 8009988:	3301      	adds	r3, #1
 800998a:	428c      	cmp	r4, r1
 800998c:	d1f6      	bne.n	800997c <memchr+0x8>
 800998e:	bd10      	pop	{r4, pc}

08009990 <_realloc_r>:
 8009990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009994:	4607      	mov	r7, r0
 8009996:	4614      	mov	r4, r2
 8009998:	460d      	mov	r5, r1
 800999a:	b921      	cbnz	r1, 80099a6 <_realloc_r+0x16>
 800999c:	4611      	mov	r1, r2
 800999e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099a2:	f7ff bc49 	b.w	8009238 <_malloc_r>
 80099a6:	b92a      	cbnz	r2, 80099b4 <_realloc_r+0x24>
 80099a8:	f7ff fbdc 	bl	8009164 <_free_r>
 80099ac:	4625      	mov	r5, r4
 80099ae:	4628      	mov	r0, r5
 80099b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099b4:	f000 f81a 	bl	80099ec <_malloc_usable_size_r>
 80099b8:	4284      	cmp	r4, r0
 80099ba:	4606      	mov	r6, r0
 80099bc:	d802      	bhi.n	80099c4 <_realloc_r+0x34>
 80099be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099c2:	d8f4      	bhi.n	80099ae <_realloc_r+0x1e>
 80099c4:	4621      	mov	r1, r4
 80099c6:	4638      	mov	r0, r7
 80099c8:	f7ff fc36 	bl	8009238 <_malloc_r>
 80099cc:	4680      	mov	r8, r0
 80099ce:	b908      	cbnz	r0, 80099d4 <_realloc_r+0x44>
 80099d0:	4645      	mov	r5, r8
 80099d2:	e7ec      	b.n	80099ae <_realloc_r+0x1e>
 80099d4:	42b4      	cmp	r4, r6
 80099d6:	4622      	mov	r2, r4
 80099d8:	4629      	mov	r1, r5
 80099da:	bf28      	it	cs
 80099dc:	4632      	movcs	r2, r6
 80099de:	f7ff fbb3 	bl	8009148 <memcpy>
 80099e2:	4629      	mov	r1, r5
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7ff fbbd 	bl	8009164 <_free_r>
 80099ea:	e7f1      	b.n	80099d0 <_realloc_r+0x40>

080099ec <_malloc_usable_size_r>:
 80099ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f0:	1f18      	subs	r0, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfbc      	itt	lt
 80099f6:	580b      	ldrlt	r3, [r1, r0]
 80099f8:	18c0      	addlt	r0, r0, r3
 80099fa:	4770      	bx	lr

080099fc <fmaxf>:
 80099fc:	b538      	push	{r3, r4, r5, lr}
 80099fe:	4604      	mov	r4, r0
 8009a00:	460d      	mov	r5, r1
 8009a02:	f000 f825 	bl	8009a50 <__fpclassifyf>
 8009a06:	b910      	cbnz	r0, 8009a0e <fmaxf+0x12>
 8009a08:	462c      	mov	r4, r5
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	bd38      	pop	{r3, r4, r5, pc}
 8009a0e:	4628      	mov	r0, r5
 8009a10:	f000 f81e 	bl	8009a50 <__fpclassifyf>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	d0f8      	beq.n	8009a0a <fmaxf+0xe>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f7f6 fe6a 	bl	80006f4 <__aeabi_fcmpgt>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d0f1      	beq.n	8009a08 <fmaxf+0xc>
 8009a24:	e7f1      	b.n	8009a0a <fmaxf+0xe>

08009a26 <fminf>:
 8009a26:	b538      	push	{r3, r4, r5, lr}
 8009a28:	4604      	mov	r4, r0
 8009a2a:	460d      	mov	r5, r1
 8009a2c:	f000 f810 	bl	8009a50 <__fpclassifyf>
 8009a30:	b910      	cbnz	r0, 8009a38 <fminf+0x12>
 8009a32:	462c      	mov	r4, r5
 8009a34:	4620      	mov	r0, r4
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f000 f809 	bl	8009a50 <__fpclassifyf>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d0f8      	beq.n	8009a34 <fminf+0xe>
 8009a42:	4629      	mov	r1, r5
 8009a44:	4620      	mov	r0, r4
 8009a46:	f7f6 fe37 	bl	80006b8 <__aeabi_fcmplt>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	d0f1      	beq.n	8009a32 <fminf+0xc>
 8009a4e:	e7f1      	b.n	8009a34 <fminf+0xe>

08009a50 <__fpclassifyf>:
 8009a50:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 8009a54:	d00d      	beq.n	8009a72 <__fpclassifyf+0x22>
 8009a56:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8009a5a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8009a5e:	d30a      	bcc.n	8009a76 <__fpclassifyf+0x26>
 8009a60:	4b07      	ldr	r3, [pc, #28]	@ (8009a80 <__fpclassifyf+0x30>)
 8009a62:	1e42      	subs	r2, r0, #1
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d908      	bls.n	8009a7a <__fpclassifyf+0x2a>
 8009a68:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8009a6c:	4258      	negs	r0, r3
 8009a6e:	4158      	adcs	r0, r3
 8009a70:	4770      	bx	lr
 8009a72:	2002      	movs	r0, #2
 8009a74:	4770      	bx	lr
 8009a76:	2004      	movs	r0, #4
 8009a78:	4770      	bx	lr
 8009a7a:	2003      	movs	r0, #3
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	007ffffe 	.word	0x007ffffe

08009a84 <_init>:
 8009a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a86:	bf00      	nop
 8009a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8a:	bc08      	pop	{r3}
 8009a8c:	469e      	mov	lr, r3
 8009a8e:	4770      	bx	lr

08009a90 <_fini>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	bf00      	nop
 8009a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a96:	bc08      	pop	{r3}
 8009a98:	469e      	mov	lr, r3
 8009a9a:	4770      	bx	lr
