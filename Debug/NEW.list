
NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005acc  08005acc  00006acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b40  08005b40  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005b40  08005b40  00007060  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005b40  08005b40  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b40  08005b40  00006b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005b48  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002040  20000060  08005ba8  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200020a0  08005ba8  000070a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017628  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d2  00000000  00000000  0001e6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  00022088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000106f  00000000  00000000  000235c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000448d  00000000  00000000  00024637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019055  00000000  00000000  00028ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094cda  00000000  00000000  00041b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d67f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b2c  00000000  00000000  000d6838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000dc364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ab4 	.word	0x08005ab4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005ab4 	.word	0x08005ab4

08000150 <CH1116_WriteCommand>:
  * @brief  向CH1116写入命令
  * @param  command: 要写入的命令
  * @retval 无
  */
void CH1116_WriteCommand(uint8_t command)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b088      	sub	sp, #32
 8000154:	af04      	add	r7, sp, #16
 8000156:	4603      	mov	r3, r0
 8000158:	71fb      	strb	r3, [r7, #7]
    uint8_t control_byte = 0x00; // Control byte for command
 800015a:	2300      	movs	r3, #0
 800015c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(&hi2c2, CH1116_I2C_ADDR << 1, control_byte, 1, &command, 1, 100);
 800015e:	7bfb      	ldrb	r3, [r7, #15]
 8000160:	b29a      	uxth	r2, r3
 8000162:	2364      	movs	r3, #100	@ 0x64
 8000164:	9302      	str	r3, [sp, #8]
 8000166:	2301      	movs	r3, #1
 8000168:	9301      	str	r3, [sp, #4]
 800016a:	1dfb      	adds	r3, r7, #7
 800016c:	9300      	str	r3, [sp, #0]
 800016e:	2301      	movs	r3, #1
 8000170:	2178      	movs	r1, #120	@ 0x78
 8000172:	4803      	ldr	r0, [pc, #12]	@ (8000180 <CH1116_WriteCommand+0x30>)
 8000174:	f001 f89c 	bl	80012b0 <HAL_I2C_Mem_Write>
}
 8000178:	bf00      	nop
 800017a:	3710      	adds	r7, #16
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	20000484 	.word	0x20000484

08000184 <CH1116_WriteData>:
  * @param  data: 要写入的数据
  * @param  size: 数据大小
  * @retval 无
  */
void CH1116_WriteData(uint8_t *data, uint16_t size)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b088      	sub	sp, #32
 8000188:	af04      	add	r7, sp, #16
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
    uint8_t control_byte = 0x40; // Control byte for data
 8000190:	2340      	movs	r3, #64	@ 0x40
 8000192:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Write(&hi2c2, CH1116_I2C_ADDR << 1, control_byte, 1, data, size, 100);
 8000194:	7bfb      	ldrb	r3, [r7, #15]
 8000196:	b29a      	uxth	r2, r3
 8000198:	2364      	movs	r3, #100	@ 0x64
 800019a:	9302      	str	r3, [sp, #8]
 800019c:	887b      	ldrh	r3, [r7, #2]
 800019e:	9301      	str	r3, [sp, #4]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	9300      	str	r3, [sp, #0]
 80001a4:	2301      	movs	r3, #1
 80001a6:	2178      	movs	r1, #120	@ 0x78
 80001a8:	4803      	ldr	r0, [pc, #12]	@ (80001b8 <CH1116_WriteData+0x34>)
 80001aa:	f001 f881 	bl	80012b0 <HAL_I2C_Mem_Write>
}
 80001ae:	bf00      	nop
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000484 	.word	0x20000484

080001bc <CH1116_Init>:
/**
  * @brief  初始化CH1116 OLED显示屏
  * @retval 无
  */
void CH1116_Init(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CH1116_Init */
    // Wait for power stabilization
    HAL_Delay(100);
 80001c0:	2064      	movs	r0, #100	@ 0x64
 80001c2:	f000 fc91 	bl	8000ae8 <HAL_Delay>
    
    // Initialization sequence for CH1116
    CH1116_WriteCommand(CH1116_CMD_DISPLAY_OFF);                 // 关闭显示
 80001c6:	20ae      	movs	r0, #174	@ 0xae
 80001c8:	f7ff ffc2 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_MUX_RATIO);               // 设置多路复用比率
 80001cc:	20a8      	movs	r0, #168	@ 0xa8
 80001ce:	f7ff ffbf 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x3F);                                   // 1/64占空比
 80001d2:	203f      	movs	r0, #63	@ 0x3f
 80001d4:	f7ff ffbc 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_DISPLAY_OFFSET);          // 设置显示偏移
 80001d8:	20d3      	movs	r0, #211	@ 0xd3
 80001da:	f7ff ffb9 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x00);                                   // 无偏移
 80001de:	2000      	movs	r0, #0
 80001e0:	f7ff ffb6 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_START_LINE | 0x00);       // 设置起始行
 80001e4:	2040      	movs	r0, #64	@ 0x40
 80001e6:	f7ff ffb3 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_SEGMENT_REMAP);           // 设置段重映射
 80001ea:	20a1      	movs	r0, #161	@ 0xa1
 80001ec:	f7ff ffb0 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_COM_SCAN_DIR);            // 设置COM输出扫描方向
 80001f0:	20c8      	movs	r0, #200	@ 0xc8
 80001f2:	f7ff ffad 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_COM_PINS);                // 设置COM引脚硬件配置
 80001f6:	20da      	movs	r0, #218	@ 0xda
 80001f8:	f7ff ffaa 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x12);                                   // 替代COM引脚配置
 80001fc:	2012      	movs	r0, #18
 80001fe:	f7ff ffa7 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_CONTRAST);                // 设置对比度控制
 8000202:	2081      	movs	r0, #129	@ 0x81
 8000204:	f7ff ffa4 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(0xCF);                                   // 对比度值
 8000208:	20cf      	movs	r0, #207	@ 0xcf
 800020a:	f7ff ffa1 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_PRECHARGE);               // 设置预充电周期
 800020e:	20d9      	movs	r0, #217	@ 0xd9
 8000210:	f7ff ff9e 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(0xF1);                                   // 预充电周期
 8000214:	20f1      	movs	r0, #241	@ 0xf1
 8000216:	f7ff ff9b 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_VCOMH_DESELECT);          // 设置VCOMH去选中电压等级
 800021a:	20db      	movs	r0, #219	@ 0xdb
 800021c:	f7ff ff98 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x40);                                   // VCOMH去选中电压等级
 8000220:	2040      	movs	r0, #64	@ 0x40
 8000222:	f7ff ff95 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_CHARGE_PUMP);                 // 启用电荷泵调节器
 8000226:	208d      	movs	r0, #141	@ 0x8d
 8000228:	f7ff ff92 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(0x14);                                   // 电荷泵开启
 800022c:	2014      	movs	r0, #20
 800022e:	f7ff ff8f 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_DISPLAY_ON);                  // 开启显示
 8000232:	20af      	movs	r0, #175	@ 0xaf
 8000234:	f7ff ff8c 	bl	8000150 <CH1116_WriteCommand>
    
    // Clear display
    CH1116_Clear();
 8000238:	f000 f804 	bl	8000244 <CH1116_Clear>
    CH1116_Display();
 800023c:	f000 f81c 	bl	8000278 <CH1116_Display>
    /* USER CODE END CH1116_Init */
}
 8000240:	bf00      	nop
 8000242:	bd80      	pop	{r7, pc}

08000244 <CH1116_Clear>:
/**
  * @brief  清除CH1116显示缓冲区
  * @retval 无
  */
void CH1116_Clear(void)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CH1116_Clear */
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 800024a:	2300      	movs	r3, #0
 800024c:	80fb      	strh	r3, [r7, #6]
 800024e:	e006      	b.n	800025e <CH1116_Clear+0x1a>
    {
        CH1116_Buffer[i] = 0x00;
 8000250:	88fb      	ldrh	r3, [r7, #6]
 8000252:	4a08      	ldr	r2, [pc, #32]	@ (8000274 <CH1116_Clear+0x30>)
 8000254:	2100      	movs	r1, #0
 8000256:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 8000258:	88fb      	ldrh	r3, [r7, #6]
 800025a:	3301      	adds	r3, #1
 800025c:	80fb      	strh	r3, [r7, #6]
 800025e:	88fb      	ldrh	r3, [r7, #6]
 8000260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000264:	d3f4      	bcc.n	8000250 <CH1116_Clear+0xc>
    }
    /* USER CODE END CH1116_Clear */
}
 8000266:	bf00      	nop
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	2000007c 	.word	0x2000007c

08000278 <CH1116_Display>:
/**
  * @brief  用缓冲区数据更新CH1116显示屏
  * @retval 无
  */
void CH1116_Display(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN CH1116_Display */
    for (uint8_t page = 0; page < CH1116_PAGES; page++)
 800027e:	2300      	movs	r3, #0
 8000280:	71fb      	strb	r3, [r7, #7]
 8000282:	e00f      	b.n	80002a4 <CH1116_Display+0x2c>
    {
        CH1116_SetCursor(page, 0);
 8000284:	79fb      	ldrb	r3, [r7, #7]
 8000286:	2100      	movs	r1, #0
 8000288:	4618      	mov	r0, r3
 800028a:	f000 f815 	bl	80002b8 <CH1116_SetCursor>
        CH1116_WriteData(&CH1116_Buffer[CH1116_WIDTH * page], CH1116_WIDTH);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	01db      	lsls	r3, r3, #7
 8000292:	4a08      	ldr	r2, [pc, #32]	@ (80002b4 <CH1116_Display+0x3c>)
 8000294:	4413      	add	r3, r2
 8000296:	2180      	movs	r1, #128	@ 0x80
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ff73 	bl	8000184 <CH1116_WriteData>
    for (uint8_t page = 0; page < CH1116_PAGES; page++)
 800029e:	79fb      	ldrb	r3, [r7, #7]
 80002a0:	3301      	adds	r3, #1
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	79fb      	ldrb	r3, [r7, #7]
 80002a6:	2b07      	cmp	r3, #7
 80002a8:	d9ec      	bls.n	8000284 <CH1116_Display+0xc>
    }
    /* USER CODE END CH1116_Display */
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	2000007c 	.word	0x2000007c

080002b8 <CH1116_SetCursor>:
  * @param  page: Page address (0-7)
  * @param  column: Column address (0-127)
  * @retval None
  */
void CH1116_SetCursor(uint8_t page, uint8_t column)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b082      	sub	sp, #8
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	460a      	mov	r2, r1
 80002c2:	71fb      	strb	r3, [r7, #7]
 80002c4:	4613      	mov	r3, r2
 80002c6:	71bb      	strb	r3, [r7, #6]
    /* USER CODE BEGIN CH1116_SetCursor */
    CH1116_CurrentPage = page;
 80002c8:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <CH1116_SetCursor+0x58>)
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	7013      	strb	r3, [r2, #0]
    CH1116_CurrentColumn = column;
 80002ce:	4a11      	ldr	r2, [pc, #68]	@ (8000314 <CH1116_SetCursor+0x5c>)
 80002d0:	79bb      	ldrb	r3, [r7, #6]
 80002d2:	7013      	strb	r3, [r2, #0]
    
    // Set page and column addresses
    CH1116_WriteCommand(CH1116_CMD_SET_PAGE | page);
 80002d4:	79fb      	ldrb	r3, [r7, #7]
 80002d6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	4618      	mov	r0, r3
 80002de:	f7ff ff37 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_LOW_COLUMN | (column & 0x0F));
 80002e2:	79bb      	ldrb	r3, [r7, #6]
 80002e4:	f003 030f 	and.w	r3, r3, #15
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ff30 	bl	8000150 <CH1116_WriteCommand>
    CH1116_WriteCommand(CH1116_CMD_SET_HIGH_COLUMN | ((column >> 4) & 0x0F));
 80002f0:	79bb      	ldrb	r3, [r7, #6]
 80002f2:	091b      	lsrs	r3, r3, #4
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	f043 0310 	orr.w	r3, r3, #16
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	b2db      	uxtb	r3, r3
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff25 	bl	8000150 <CH1116_WriteCommand>
    /* USER CODE END CH1116_SetCursor */
}
 8000306:	bf00      	nop
 8000308:	3708      	adds	r7, #8
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	2000047c 	.word	0x2000047c
 8000314:	2000047d 	.word	0x2000047d

08000318 <CH1116_Fill>:
  * @brief  用指定模式填充整个显示缓冲区
  * @param  color: 填充颜色 (0 = 黑色, 1 = 白色)
  * @retval 无
  */
void CH1116_Fill(uint8_t color)
{
 8000318:	b480      	push	{r7}
 800031a:	b085      	sub	sp, #20
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN CH1116_Fill */
    uint8_t fill_byte = color ? 0xFF : 0x00;
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <CH1116_Fill+0x14>
 8000328:	23ff      	movs	r3, #255	@ 0xff
 800032a:	e000      	b.n	800032e <CH1116_Fill+0x16>
 800032c:	2300      	movs	r3, #0
 800032e:	737b      	strb	r3, [r7, #13]
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 8000330:	2300      	movs	r3, #0
 8000332:	81fb      	strh	r3, [r7, #14]
 8000334:	e006      	b.n	8000344 <CH1116_Fill+0x2c>
    {
        CH1116_Buffer[i] = fill_byte;
 8000336:	89fb      	ldrh	r3, [r7, #14]
 8000338:	4907      	ldr	r1, [pc, #28]	@ (8000358 <CH1116_Fill+0x40>)
 800033a:	7b7a      	ldrb	r2, [r7, #13]
 800033c:	54ca      	strb	r2, [r1, r3]
    for (uint16_t i = 0; i < sizeof(CH1116_Buffer); i++)
 800033e:	89fb      	ldrh	r3, [r7, #14]
 8000340:	3301      	adds	r3, #1
 8000342:	81fb      	strh	r3, [r7, #14]
 8000344:	89fb      	ldrh	r3, [r7, #14]
 8000346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800034a:	d3f4      	bcc.n	8000336 <CH1116_Fill+0x1e>
    }
    /* USER CODE END CH1116_Fill */
}
 800034c:	bf00      	nop
 800034e:	bf00      	nop
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	2000007c 	.word	0x2000007c

0800035c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000360:	4a04      	ldr	r2, [pc, #16]	@ (8000374 <MX_FREERTOS_Init+0x18>)
 8000362:	2100      	movs	r1, #0
 8000364:	4804      	ldr	r0, [pc, #16]	@ (8000378 <MX_FREERTOS_Init+0x1c>)
 8000366:	f002 fdbf 	bl	8002ee8 <osThreadNew>
 800036a:	4603      	mov	r3, r0
 800036c:	4a03      	ldr	r2, [pc, #12]	@ (800037c <MX_FREERTOS_Init+0x20>)
 800036e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	08005af0 	.word	0x08005af0
 8000378:	08000381 	.word	0x08000381
 800037c:	20000480 	.word	0x20000480

08000380 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000388:	2001      	movs	r0, #1
 800038a:	f002 fe3f 	bl	800300c <osDelay>
 800038e:	e7fb      	b.n	8000388 <StartDefaultTask+0x8>

08000390 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a4:	4b1d      	ldr	r3, [pc, #116]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a1c      	ldr	r2, [pc, #112]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b1a      	ldr	r3, [pc, #104]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0320 	and.w	r3, r3, #32
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b17      	ldr	r3, [pc, #92]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a16      	ldr	r2, [pc, #88]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b14      	ldr	r3, [pc, #80]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b11      	ldr	r3, [pc, #68]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a10      	ldr	r2, [pc, #64]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b0e      	ldr	r3, [pc, #56]	@ (800041c <MX_GPIO_Init+0x8c>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DS18B20_GPIO_Port, DS18B20_Pin, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	480b      	ldr	r0, [pc, #44]	@ (8000420 <MX_GPIO_Init+0x90>)
 80003f2:	f000 fe01 	bl	8000ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 80003f6:	2301      	movs	r3, #1
 80003f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80003fa:	2311      	movs	r3, #17
 80003fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fe:	2300      	movs	r3, #0
 8000400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000402:	2302      	movs	r3, #2
 8000404:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	4619      	mov	r1, r3
 800040c:	4804      	ldr	r0, [pc, #16]	@ (8000420 <MX_GPIO_Init+0x90>)
 800040e:	f000 fc6f 	bl	8000cf0 <HAL_GPIO_Init>

}
 8000412:	bf00      	nop
 8000414:	3720      	adds	r7, #32
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800

08000424 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_I2C2_Init+0x50>)
 800042a:	4a13      	ldr	r2, [pc, #76]	@ (8000478 <MX_I2C2_Init+0x54>)
 800042c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <MX_I2C2_Init+0x50>)
 8000430:	4a12      	ldr	r2, [pc, #72]	@ (800047c <MX_I2C2_Init+0x58>)
 8000432:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000434:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <MX_I2C2_Init+0x50>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <MX_I2C2_Init+0x50>)
 800043c:	2200      	movs	r2, #0
 800043e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000440:	4b0c      	ldr	r3, [pc, #48]	@ (8000474 <MX_I2C2_Init+0x50>)
 8000442:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000446:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000448:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <MX_I2C2_Init+0x50>)
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800044e:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <MX_I2C2_Init+0x50>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <MX_I2C2_Init+0x50>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800045a:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <MX_I2C2_Init+0x50>)
 800045c:	2200      	movs	r2, #0
 800045e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000460:	4804      	ldr	r0, [pc, #16]	@ (8000474 <MX_I2C2_Init+0x50>)
 8000462:	f000 fde1 	bl	8001028 <HAL_I2C_Init>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d001      	beq.n	8000470 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800046c:	f000 f8e0 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000484 	.word	0x20000484
 8000478:	40005800 	.word	0x40005800
 800047c:	00061a80 	.word	0x00061a80

08000480 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b088      	sub	sp, #32
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a16      	ldr	r2, [pc, #88]	@ (80004f4 <HAL_I2C_MspInit+0x74>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d124      	bne.n	80004ea <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <HAL_I2C_MspInit+0x78>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a14      	ldr	r2, [pc, #80]	@ (80004f8 <HAL_I2C_MspInit+0x78>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <HAL_I2C_MspInit+0x78>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80004b8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80004bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004be:	2312      	movs	r3, #18
 80004c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004c2:	2303      	movs	r3, #3
 80004c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4619      	mov	r1, r3
 80004cc:	480b      	ldr	r0, [pc, #44]	@ (80004fc <HAL_I2C_MspInit+0x7c>)
 80004ce:	f000 fc0f 	bl	8000cf0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	@ (80004f8 <HAL_I2C_MspInit+0x78>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a08      	ldr	r2, [pc, #32]	@ (80004f8 <HAL_I2C_MspInit+0x78>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b06      	ldr	r3, [pc, #24]	@ (80004f8 <HAL_I2C_MspInit+0x78>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80004ea:	bf00      	nop
 80004ec:	3720      	adds	r7, #32
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40005800 	.word	0x40005800
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40010c00 	.word	0x40010c00

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fabd 	bl	8000a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f839 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f7ff ff3f 	bl	8000390 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000512:	f7ff ff87 	bl	8000424 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000516:	f000 f9e5 	bl	80008e4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Initialize CH1116 OLED display
  CH1116_Init();
 800051a:	f7ff fe4f 	bl	80001bc <CH1116_Init>
  
  // Display a test pattern
  CH1116_Clear();
 800051e:	f7ff fe91 	bl	8000244 <CH1116_Clear>
  CH1116_Fill(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff fef8 	bl	8000318 <CH1116_Fill>
  CH1116_Display();
 8000528:	f7ff fea6 	bl	8000278 <CH1116_Display>
  HAL_Delay(1000);
 800052c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000530:	f000 fada 	bl	8000ae8 <HAL_Delay>
  
  CH1116_Clear();
 8000534:	f7ff fe86 	bl	8000244 <CH1116_Clear>
  CH1116_Display();
 8000538:	f7ff fe9e 	bl	8000278 <CH1116_Display>
  
  // Initialize TEC
  TEC_Init(&htim3, TIM_CHANNEL_2);
 800053c:	2104      	movs	r1, #4
 800053e:	480f      	ldr	r0, [pc, #60]	@ (800057c <main+0x7c>)
 8000540:	f000 f95c 	bl	80007fc <TEC_Init>
  TEC_Start();
 8000544:	f000 f972 	bl	800082c <TEC_Start>
  
  // Test TEC with varying power levels
  for (int i = 0; i <= 100; i += 10) {
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	e00a      	b.n	8000564 <main+0x64>
    TEC_SetPower(i);
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	4618      	mov	r0, r3
 8000554:	f000 f980 	bl	8000858 <TEC_SetPower>
    HAL_Delay(200);
 8000558:	20c8      	movs	r0, #200	@ 0xc8
 800055a:	f000 fac5 	bl	8000ae8 <HAL_Delay>
  for (int i = 0; i <= 100; i += 10) {
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	330a      	adds	r3, #10
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b64      	cmp	r3, #100	@ 0x64
 8000568:	ddf1      	ble.n	800054e <main+0x4e>
  }
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800056a:	f002 fc75 	bl	8002e58 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800056e:	f7ff fef5 	bl	800035c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000572:	f002 fc93 	bl	8002e9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000576:	bf00      	nop
 8000578:	e7fd      	b.n	8000576 <main+0x76>
 800057a:	bf00      	nop
 800057c:	2000052c 	.word	0x2000052c

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b090      	sub	sp, #64	@ 0x40
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2228      	movs	r2, #40	@ 0x28
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f005 f9a2 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b0:	2301      	movs	r3, #1
 80005b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005be:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0318 	add.w	r3, r7, #24
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 f9d9 	bl	8001980 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005d4:	f000 f82c 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fc46 	bl	8001e84 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005fe:	f000 f817 	bl	8000630 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3740      	adds	r7, #64	@ 0x40
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a04      	ldr	r2, [pc, #16]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d101      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800061e:	f000 fa47 	bl	8000ab0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40000800 	.word	0x40000800

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <Error_Handler+0x8>

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000642:	4b18      	ldr	r3, [pc, #96]	@ (80006a4 <HAL_MspInit+0x68>)
 8000644:	699b      	ldr	r3, [r3, #24]
 8000646:	4a17      	ldr	r2, [pc, #92]	@ (80006a4 <HAL_MspInit+0x68>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6193      	str	r3, [r2, #24]
 800064e:	4b15      	ldr	r3, [pc, #84]	@ (80006a4 <HAL_MspInit+0x68>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
 8000658:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065a:	4b12      	ldr	r3, [pc, #72]	@ (80006a4 <HAL_MspInit+0x68>)
 800065c:	69db      	ldr	r3, [r3, #28]
 800065e:	4a11      	ldr	r2, [pc, #68]	@ (80006a4 <HAL_MspInit+0x68>)
 8000660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000664:	61d3      	str	r3, [r2, #28]
 8000666:	4b0f      	ldr	r3, [pc, #60]	@ (80006a4 <HAL_MspInit+0x68>)
 8000668:	69db      	ldr	r3, [r3, #28]
 800066a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	210f      	movs	r1, #15
 8000676:	f06f 0001 	mvn.w	r0, #1
 800067a:	f000 fb0e 	bl	8000c9a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800067e:	4b0a      	ldr	r3, [pc, #40]	@ (80006a8 <HAL_MspInit+0x6c>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <HAL_MspInit+0x6c>)
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010000 	.word	0x40010000

080006ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	@ 0x38
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80006b4:	2300      	movs	r3, #0
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80006b8:	2300      	movs	r3, #0
 80006ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80006bc:	2300      	movs	r3, #0
 80006be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006c2:	4b34      	ldr	r3, [pc, #208]	@ (8000794 <HAL_InitTick+0xe8>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a33      	ldr	r2, [pc, #204]	@ (8000794 <HAL_InitTick+0xe8>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	4b31      	ldr	r3, [pc, #196]	@ (8000794 <HAL_InitTick+0xe8>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006da:	f107 0210 	add.w	r2, r7, #16
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4611      	mov	r1, r2
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fd29 	bl	800213c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80006ea:	6a3b      	ldr	r3, [r7, #32]
 80006ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80006ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80006f4:	f001 fd0e 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 80006f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80006fa:	e004      	b.n	8000706 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80006fc:	f001 fd0a 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8000700:	4603      	mov	r3, r0
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000708:	4a23      	ldr	r2, [pc, #140]	@ (8000798 <HAL_InitTick+0xec>)
 800070a:	fba2 2303 	umull	r2, r3, r2, r3
 800070e:	0c9b      	lsrs	r3, r3, #18
 8000710:	3b01      	subs	r3, #1
 8000712:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000714:	4b21      	ldr	r3, [pc, #132]	@ (800079c <HAL_InitTick+0xf0>)
 8000716:	4a22      	ldr	r2, [pc, #136]	@ (80007a0 <HAL_InitTick+0xf4>)
 8000718:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800071a:	4b20      	ldr	r3, [pc, #128]	@ (800079c <HAL_InitTick+0xf0>)
 800071c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000720:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000722:	4a1e      	ldr	r2, [pc, #120]	@ (800079c <HAL_InitTick+0xf0>)
 8000724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000726:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000728:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <HAL_InitTick+0xf0>)
 800072a:	2200      	movs	r2, #0
 800072c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800072e:	4b1b      	ldr	r3, [pc, #108]	@ (800079c <HAL_InitTick+0xf0>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <HAL_InitTick+0xf0>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800073a:	4818      	ldr	r0, [pc, #96]	@ (800079c <HAL_InitTick+0xf0>)
 800073c:	f001 fd4c 	bl	80021d8 <HAL_TIM_Base_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000746:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800074a:	2b00      	cmp	r3, #0
 800074c:	d11b      	bne.n	8000786 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800074e:	4813      	ldr	r0, [pc, #76]	@ (800079c <HAL_InitTick+0xf0>)
 8000750:	f001 fd9a 	bl	8002288 <HAL_TIM_Base_Start_IT>
 8000754:	4603      	mov	r3, r0
 8000756:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800075a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800075e:	2b00      	cmp	r3, #0
 8000760:	d111      	bne.n	8000786 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000762:	201e      	movs	r0, #30
 8000764:	f000 fab5 	bl	8000cd2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2b0f      	cmp	r3, #15
 800076c:	d808      	bhi.n	8000780 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800076e:	2200      	movs	r2, #0
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	201e      	movs	r0, #30
 8000774:	f000 fa91 	bl	8000c9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000778:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <HAL_InitTick+0xf8>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	6013      	str	r3, [r2, #0]
 800077e:	e002      	b.n	8000786 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000780:	2301      	movs	r3, #1
 8000782:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000786:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800078a:	4618      	mov	r0, r3
 800078c:	3738      	adds	r7, #56	@ 0x38
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000
 8000798:	431bde83 	.word	0x431bde83
 800079c:	200004d8 	.word	0x200004d8
 80007a0:	40000800 	.word	0x40000800
 80007a4:	20000004 	.word	0x20000004

080007a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007ac:	bf00      	nop
 80007ae:	e7fd      	b.n	80007ac <NMI_Handler+0x4>

080007b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <HardFault_Handler+0x4>

080007b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <MemManage_Handler+0x4>

080007c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <BusFault_Handler+0x4>

080007c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <UsageFault_Handler+0x4>

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007e0:	4802      	ldr	r0, [pc, #8]	@ (80007ec <TIM4_IRQHandler+0x10>)
 80007e2:	f001 fe95 	bl	8002510 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	200004d8 	.word	0x200004d8

080007f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr

080007fc <TEC_Init>:
  * @param  htim: PWM定时器句柄
  * @param  channel: PWM通道
  * @retval None
  */
void TEC_Init(TIM_HandleTypeDef* htim, uint32_t channel)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 2 */
    htec.timHandle = htim;
 8000806:	4a08      	ldr	r2, [pc, #32]	@ (8000828 <TEC_Init+0x2c>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6013      	str	r3, [r2, #0]
    htec.channel = channel;
 800080c:	4a06      	ldr	r2, [pc, #24]	@ (8000828 <TEC_Init+0x2c>)
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	6053      	str	r3, [r2, #4]
    htec.state = TEC_STATE_STOP;
 8000812:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <TEC_Init+0x2c>)
 8000814:	2200      	movs	r2, #0
 8000816:	721a      	strb	r2, [r3, #8]
    htec.duty = 0;
 8000818:	4b03      	ldr	r3, [pc, #12]	@ (8000828 <TEC_Init+0x2c>)
 800081a:	2200      	movs	r2, #0
 800081c:	725a      	strb	r2, [r3, #9]
    /* USER CODE END 2 */
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000520 	.word	0x20000520

0800082c <TEC_Start>:
  * @brief  启动TEC制冷
  * @param  None
  * @retval None
  */
void TEC_Start(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 3 */
    if (htec.state == TEC_STATE_STOP) {
 8000830:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <TEC_Start+0x28>)
 8000832:	7a1b      	ldrb	r3, [r3, #8]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d10a      	bne.n	800084e <TEC_Start+0x22>
        HAL_TIM_PWM_Start(htec.timHandle, htec.channel);
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <TEC_Start+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <TEC_Start+0x28>)
 800083e:	6852      	ldr	r2, [r2, #4]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f001 fdc2 	bl	80023cc <HAL_TIM_PWM_Start>
        htec.state = TEC_STATE_RUNNING;
 8000848:	4b02      	ldr	r3, [pc, #8]	@ (8000854 <TEC_Start+0x28>)
 800084a:	2201      	movs	r2, #1
 800084c:	721a      	strb	r2, [r3, #8]
    }
    /* USER CODE END 3 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000520 	.word	0x20000520

08000858 <TEC_SetPower>:
  * @brief  设置TEC制冷功率
  * @param  duty: 占空比 (0-100)
  * @retval None
  */
void TEC_SetPower(uint8_t duty)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	71fb      	strb	r3, [r7, #7]
    /* USER CODE BEGIN 5 */
    if (duty > 100) {
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b64      	cmp	r3, #100	@ 0x64
 8000866:	d901      	bls.n	800086c <TEC_SetPower+0x14>
        duty = 100;
 8000868:	2364      	movs	r3, #100	@ 0x64
 800086a:	71fb      	strb	r3, [r7, #7]
    }
    
    htec.duty = duty;
 800086c:	4a1b      	ldr	r2, [pc, #108]	@ (80008dc <TEC_SetPower+0x84>)
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	7253      	strb	r3, [r2, #9]
    
    // 计算比较值
    uint32_t pulse = (htec.timHandle->Init.Period + 1) * duty / 100;
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <TEC_SetPower+0x84>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	79fa      	ldrb	r2, [r7, #7]
 800087c:	fb02 f303 	mul.w	r3, r2, r3
 8000880:	4a17      	ldr	r2, [pc, #92]	@ (80008e0 <TEC_SetPower+0x88>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	095b      	lsrs	r3, r3, #5
 8000888:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <TEC_SetPower+0x84>)
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d105      	bne.n	800089e <TEC_SetPower+0x46>
 8000892:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <TEC_SetPower+0x84>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68fa      	ldr	r2, [r7, #12]
 800089a:	635a      	str	r2, [r3, #52]	@ 0x34
    /* USER CODE END 5 */
}
 800089c:	e018      	b.n	80008d0 <TEC_SetPower+0x78>
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <TEC_SetPower+0x84>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	d105      	bne.n	80008b2 <TEC_SetPower+0x5a>
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <TEC_SetPower+0x84>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	681a      	ldr	r2, [r3, #0]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80008b0:	e00e      	b.n	80008d0 <TEC_SetPower+0x78>
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 80008b2:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <TEC_SetPower+0x84>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b08      	cmp	r3, #8
 80008b8:	d105      	bne.n	80008c6 <TEC_SetPower+0x6e>
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <TEC_SetPower+0x84>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80008c4:	e004      	b.n	80008d0 <TEC_SetPower+0x78>
    __HAL_TIM_SET_COMPARE(htec.timHandle, htec.channel, pulse);
 80008c6:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <TEC_SetPower+0x84>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000520 	.word	0x20000520
 80008e0:	51eb851f 	.word	0x51eb851f

080008e4 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	@ 0x28
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ea:	f107 0320 	add.w	r3, r7, #32
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
 8000902:	615a      	str	r2, [r3, #20]
 8000904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000906:	4b22      	ldr	r3, [pc, #136]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000908:	4a22      	ldr	r2, [pc, #136]	@ (8000994 <MX_TIM3_Init+0xb0>)
 800090a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 800090c:	4b20      	ldr	r3, [pc, #128]	@ (8000990 <MX_TIM3_Init+0xac>)
 800090e:	2247      	movs	r2, #71	@ 0x47
 8000910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000912:	4b1f      	ldr	r3, [pc, #124]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_TIM3_Init+0xac>)
 800091a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800091e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800092c:	4818      	ldr	r0, [pc, #96]	@ (8000990 <MX_TIM3_Init+0xac>)
 800092e:	f001 fcfd 	bl	800232c <HAL_TIM_PWM_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000938:	f7ff fe7a 	bl	8000630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093c:	2300      	movs	r3, #0
 800093e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000944:	f107 0320 	add.w	r3, r7, #32
 8000948:	4619      	mov	r1, r3
 800094a:	4811      	ldr	r0, [pc, #68]	@ (8000990 <MX_TIM3_Init+0xac>)
 800094c:	f002 f9d0 	bl	8002cf0 <HAL_TIMEx_MasterConfigSynchronization>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000956:	f7ff fe6b 	bl	8000630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800095a:	2360      	movs	r3, #96	@ 0x60
 800095c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800095e:	2300      	movs	r3, #0
 8000960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2204      	movs	r2, #4
 800096e:	4619      	mov	r1, r3
 8000970:	4807      	ldr	r0, [pc, #28]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000972:	f001 febd 	bl	80026f0 <HAL_TIM_PWM_ConfigChannel>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800097c:	f7ff fe58 	bl	8000630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000980:	4803      	ldr	r0, [pc, #12]	@ (8000990 <MX_TIM3_Init+0xac>)
 8000982:	f000 f827 	bl	80009d4 <HAL_TIM_MspPostInit>

}
 8000986:	bf00      	nop
 8000988:	3728      	adds	r7, #40	@ 0x28
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000052c 	.word	0x2000052c
 8000994:	40000400 	.word	0x40000400

08000998 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a09      	ldr	r2, [pc, #36]	@ (80009cc <HAL_TIM_PWM_MspInit+0x34>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d10b      	bne.n	80009c2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009aa:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <HAL_TIM_PWM_MspInit+0x38>)
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4a08      	ldr	r2, [pc, #32]	@ (80009d0 <HAL_TIM_PWM_MspInit+0x38>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	61d3      	str	r3, [r2, #28]
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_TIM_PWM_MspInit+0x38>)
 80009b8:	69db      	ldr	r3, [r3, #28]
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80009c2:	bf00      	nop
 80009c4:	3714      	adds	r7, #20
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr
 80009cc:	40000400 	.word	0x40000400
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b088      	sub	sp, #32
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0310 	add.w	r3, r7, #16
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a0f      	ldr	r2, [pc, #60]	@ (8000a2c <HAL_TIM_MspPostInit+0x58>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d117      	bne.n	8000a24 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <HAL_TIM_MspPostInit+0x5c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <HAL_TIM_MspPostInit+0x5c>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <HAL_TIM_MspPostInit+0x5c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a0c:	2380      	movs	r3, #128	@ 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2302      	movs	r3, #2
 8000a16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <HAL_TIM_MspPostInit+0x60>)
 8000a20:	f000 f966 	bl	8000cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40000400 	.word	0x40000400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40010800 	.word	0x40010800

08000a38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a38:	f7ff feda 	bl	80007f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a3c:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000a3e:	490c      	ldr	r1, [pc, #48]	@ (8000a70 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a44:	e002      	b.n	8000a4c <LoopCopyDataInit>

08000a46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4a:	3304      	adds	r3, #4

08000a4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a50:	d3f9      	bcc.n	8000a46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a52:	4a09      	ldr	r2, [pc, #36]	@ (8000a78 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000a54:	4c09      	ldr	r4, [pc, #36]	@ (8000a7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a58:	e001      	b.n	8000a5e <LoopFillZerobss>

08000a5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a5c:	3204      	adds	r2, #4

08000a5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a60:	d3fb      	bcc.n	8000a5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a62:	f004 ff9f 	bl	80059a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a66:	f7ff fd4b 	bl	8000500 <main>
  bx lr
 8000a6a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000a74:	08005b48 	.word	0x08005b48
  ldr r2, =_sbss
 8000a78:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000a7c:	200020a0 	.word	0x200020a0

08000a80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC1_2_IRQHandler>
	...

08000a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a88:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <HAL_Init+0x28>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a07      	ldr	r2, [pc, #28]	@ (8000aac <HAL_Init+0x28>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a94:	2003      	movs	r0, #3
 8000a96:	f000 f8f5 	bl	8000c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9a:	200f      	movs	r0, #15
 8000a9c:	f7ff fe06 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa0:	f7ff fdcc 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa4:	2300      	movs	r3, #0
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40022000 	.word	0x40022000

08000ab0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab4:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <HAL_IncTick+0x1c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	4a03      	ldr	r2, [pc, #12]	@ (8000ad0 <HAL_IncTick+0x20>)
 8000ac2:	6013      	str	r3, [r2, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	20000574 	.word	0x20000574

08000ad4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad8:	4b02      	ldr	r3, [pc, #8]	@ (8000ae4 <HAL_GetTick+0x10>)
 8000ada:	681b      	ldr	r3, [r3, #0]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000574 	.word	0x20000574

08000ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000af0:	f7ff fff0 	bl	8000ad4 <HAL_GetTick>
 8000af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b00:	d005      	beq.n	8000b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b02:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <HAL_Delay+0x44>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	461a      	mov	r2, r3
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0e:	bf00      	nop
 8000b10:	f7ff ffe0 	bl	8000ad4 <HAL_GetTick>
 8000b14:	4602      	mov	r2, r0
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d8f7      	bhi.n	8000b10 <HAL_Delay+0x28>
  {
  }
}
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000008 	.word	0x20000008

08000b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b085      	sub	sp, #20
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b40:	4b0c      	ldr	r3, [pc, #48]	@ (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b62:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <__NVIC_SetPriorityGrouping+0x44>)
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	60d3      	str	r3, [r2, #12]
}
 8000b68:	bf00      	nop
 8000b6a:	3714      	adds	r7, #20
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bc80      	pop	{r7}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b7c:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <__NVIC_GetPriorityGrouping+0x18>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	0a1b      	lsrs	r3, r3, #8
 8000b82:	f003 0307 	and.w	r3, r3, #7
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4906      	ldr	r1, [pc, #24]	@ (8000bc8 <__NVIC_EnableIRQ+0x34>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	@ (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	@ 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	@ 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff ff4f 	bl	8000b30 <__NVIC_SetPriorityGrouping>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
 8000ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cac:	f7ff ff64 	bl	8000b78 <__NVIC_GetPriorityGrouping>
 8000cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	68b9      	ldr	r1, [r7, #8]
 8000cb6:	6978      	ldr	r0, [r7, #20]
 8000cb8:	f7ff ffb2 	bl	8000c20 <NVIC_EncodePriority>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ff81 	bl	8000bcc <__NVIC_SetPriority>
}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd2:	b580      	push	{r7, lr}
 8000cd4:	b082      	sub	sp, #8
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	4603      	mov	r3, r0
 8000cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff57 	bl	8000b94 <__NVIC_EnableIRQ>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b08b      	sub	sp, #44	@ 0x2c
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d02:	e169      	b.n	8000fd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d04:	2201      	movs	r2, #1
 8000d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	69fa      	ldr	r2, [r7, #28]
 8000d14:	4013      	ands	r3, r2
 8000d16:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	f040 8158 	bne.w	8000fd2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	4a9a      	ldr	r2, [pc, #616]	@ (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d05e      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d2c:	4a98      	ldr	r2, [pc, #608]	@ (8000f90 <HAL_GPIO_Init+0x2a0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d875      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d32:	4a98      	ldr	r2, [pc, #608]	@ (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d058      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d38:	4a96      	ldr	r2, [pc, #600]	@ (8000f94 <HAL_GPIO_Init+0x2a4>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d86f      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d3e:	4a96      	ldr	r2, [pc, #600]	@ (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d052      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d44:	4a94      	ldr	r2, [pc, #592]	@ (8000f98 <HAL_GPIO_Init+0x2a8>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d869      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d4a:	4a94      	ldr	r2, [pc, #592]	@ (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d04c      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d50:	4a92      	ldr	r2, [pc, #584]	@ (8000f9c <HAL_GPIO_Init+0x2ac>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d863      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d56:	4a92      	ldr	r2, [pc, #584]	@ (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d046      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
 8000d5c:	4a90      	ldr	r2, [pc, #576]	@ (8000fa0 <HAL_GPIO_Init+0x2b0>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d85d      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d62:	2b12      	cmp	r3, #18
 8000d64:	d82a      	bhi.n	8000dbc <HAL_GPIO_Init+0xcc>
 8000d66:	2b12      	cmp	r3, #18
 8000d68:	d859      	bhi.n	8000e1e <HAL_GPIO_Init+0x12e>
 8000d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d70 <HAL_GPIO_Init+0x80>)
 8000d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d70:	08000deb 	.word	0x08000deb
 8000d74:	08000dc5 	.word	0x08000dc5
 8000d78:	08000dd7 	.word	0x08000dd7
 8000d7c:	08000e19 	.word	0x08000e19
 8000d80:	08000e1f 	.word	0x08000e1f
 8000d84:	08000e1f 	.word	0x08000e1f
 8000d88:	08000e1f 	.word	0x08000e1f
 8000d8c:	08000e1f 	.word	0x08000e1f
 8000d90:	08000e1f 	.word	0x08000e1f
 8000d94:	08000e1f 	.word	0x08000e1f
 8000d98:	08000e1f 	.word	0x08000e1f
 8000d9c:	08000e1f 	.word	0x08000e1f
 8000da0:	08000e1f 	.word	0x08000e1f
 8000da4:	08000e1f 	.word	0x08000e1f
 8000da8:	08000e1f 	.word	0x08000e1f
 8000dac:	08000e1f 	.word	0x08000e1f
 8000db0:	08000e1f 	.word	0x08000e1f
 8000db4:	08000dcd 	.word	0x08000dcd
 8000db8:	08000de1 	.word	0x08000de1
 8000dbc:	4a79      	ldr	r2, [pc, #484]	@ (8000fa4 <HAL_GPIO_Init+0x2b4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d013      	beq.n	8000dea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dc2:	e02c      	b.n	8000e1e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	623b      	str	r3, [r7, #32]
          break;
 8000dca:	e029      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	623b      	str	r3, [r7, #32]
          break;
 8000dd4:	e024      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	3308      	adds	r3, #8
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e01f      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	330c      	adds	r3, #12
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e01a      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000df2:	2304      	movs	r3, #4
 8000df4:	623b      	str	r3, [r7, #32]
          break;
 8000df6:	e013      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d105      	bne.n	8000e0c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e00:	2308      	movs	r3, #8
 8000e02:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69fa      	ldr	r2, [r7, #28]
 8000e08:	611a      	str	r2, [r3, #16]
          break;
 8000e0a:	e009      	b.n	8000e20 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	615a      	str	r2, [r3, #20]
          break;
 8000e16:	e003      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	623b      	str	r3, [r7, #32]
          break;
 8000e1c:	e000      	b.n	8000e20 <HAL_GPIO_Init+0x130>
          break;
 8000e1e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	2bff      	cmp	r3, #255	@ 0xff
 8000e24:	d801      	bhi.n	8000e2a <HAL_GPIO_Init+0x13a>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	e001      	b.n	8000e2e <HAL_GPIO_Init+0x13e>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	2bff      	cmp	r3, #255	@ 0xff
 8000e34:	d802      	bhi.n	8000e3c <HAL_GPIO_Init+0x14c>
 8000e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	e002      	b.n	8000e42 <HAL_GPIO_Init+0x152>
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e3e:	3b08      	subs	r3, #8
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	210f      	movs	r1, #15
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	401a      	ands	r2, r3
 8000e54:	6a39      	ldr	r1, [r7, #32]
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	431a      	orrs	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80b1 	beq.w	8000fd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e70:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	@ (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e76:	f043 0301 	orr.w	r3, r3, #1
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fa8 <HAL_GPIO_Init+0x2b8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e88:	4a48      	ldr	r2, [pc, #288]	@ (8000fac <HAL_GPIO_Init+0x2bc>)
 8000e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	3302      	adds	r3, #2
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a40      	ldr	r2, [pc, #256]	@ (8000fb0 <HAL_GPIO_Init+0x2c0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d013      	beq.n	8000edc <HAL_GPIO_Init+0x1ec>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fb4 <HAL_GPIO_Init+0x2c4>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d00d      	beq.n	8000ed8 <HAL_GPIO_Init+0x1e8>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8000fb8 <HAL_GPIO_Init+0x2c8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x1e4>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a3d      	ldr	r2, [pc, #244]	@ (8000fbc <HAL_GPIO_Init+0x2cc>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d101      	bne.n	8000ed0 <HAL_GPIO_Init+0x1e0>
 8000ecc:	2303      	movs	r3, #3
 8000ece:	e006      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed0:	2304      	movs	r3, #4
 8000ed2:	e004      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	e002      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e000      	b.n	8000ede <HAL_GPIO_Init+0x1ee>
 8000edc:	2300      	movs	r3, #0
 8000ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	68fa      	ldr	r2, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000eee:	492f      	ldr	r1, [pc, #188]	@ (8000fac <HAL_GPIO_Init+0x2bc>)
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	089b      	lsrs	r3, r3, #2
 8000ef4:	3302      	adds	r3, #2
 8000ef6:	68fa      	ldr	r2, [r7, #12]
 8000ef8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d006      	beq.n	8000f16 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f08:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0a:	689a      	ldr	r2, [r3, #8]
 8000f0c:	492c      	ldr	r1, [pc, #176]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	608b      	str	r3, [r1, #8]
 8000f14:	e006      	b.n	8000f24 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f16:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	4928      	ldr	r1, [pc, #160]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d006      	beq.n	8000f3e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f30:	4b23      	ldr	r3, [pc, #140]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	4922      	ldr	r1, [pc, #136]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	60cb      	str	r3, [r1, #12]
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f3e:	4b20      	ldr	r3, [pc, #128]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	43db      	mvns	r3, r3
 8000f46:	491e      	ldr	r1, [pc, #120]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d006      	beq.n	8000f66 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	4918      	ldr	r1, [pc, #96]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	604b      	str	r3, [r1, #4]
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f66:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	69bb      	ldr	r3, [r7, #24]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4914      	ldr	r1, [pc, #80]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d021      	beq.n	8000fc4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f80:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	490e      	ldr	r1, [pc, #56]	@ (8000fc0 <HAL_GPIO_Init+0x2d0>)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	600b      	str	r3, [r1, #0]
 8000f8c:	e021      	b.n	8000fd2 <HAL_GPIO_Init+0x2e2>
 8000f8e:	bf00      	nop
 8000f90:	10320000 	.word	0x10320000
 8000f94:	10310000 	.word	0x10310000
 8000f98:	10220000 	.word	0x10220000
 8000f9c:	10210000 	.word	0x10210000
 8000fa0:	10120000 	.word	0x10120000
 8000fa4:	10110000 	.word	0x10110000
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40010000 	.word	0x40010000
 8000fb0:	40010800 	.word	0x40010800
 8000fb4:	40010c00 	.word	0x40010c00
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40011400 	.word	0x40011400
 8000fc0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	4909      	ldr	r1, [pc, #36]	@ (8000ff4 <HAL_GPIO_Init+0x304>)
 8000fce:	4013      	ands	r3, r2
 8000fd0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	f47f ae8e 	bne.w	8000d04 <HAL_GPIO_Init+0x14>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	372c      	adds	r7, #44	@ 0x2c
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001014:	e003      	b.n	800101e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001016:	887b      	ldrh	r3, [r7, #2]
 8001018:	041a      	lsls	r2, r3, #16
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	611a      	str	r2, [r3, #16]
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e12b      	b.n	8001292 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fa16 	bl	8000480 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2224      	movs	r2, #36	@ 0x24
 8001058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 0201 	bic.w	r2, r2, #1
 800106a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800107a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800108a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800108c:	f001 f842 	bl	8002114 <HAL_RCC_GetPCLK1Freq>
 8001090:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a81      	ldr	r2, [pc, #516]	@ (800129c <HAL_I2C_Init+0x274>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d807      	bhi.n	80010ac <HAL_I2C_Init+0x84>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4a80      	ldr	r2, [pc, #512]	@ (80012a0 <HAL_I2C_Init+0x278>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	bf94      	ite	ls
 80010a4:	2301      	movls	r3, #1
 80010a6:	2300      	movhi	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	e006      	b.n	80010ba <HAL_I2C_Init+0x92>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a7d      	ldr	r2, [pc, #500]	@ (80012a4 <HAL_I2C_Init+0x27c>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	bf94      	ite	ls
 80010b4:	2301      	movls	r3, #1
 80010b6:	2300      	movhi	r3, #0
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e0e7      	b.n	8001292 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	4a78      	ldr	r2, [pc, #480]	@ (80012a8 <HAL_I2C_Init+0x280>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	430a      	orrs	r2, r1
 80010e0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a6a      	ldr	r2, [pc, #424]	@ (800129c <HAL_I2C_Init+0x274>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d802      	bhi.n	80010fc <HAL_I2C_Init+0xd4>
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	3301      	adds	r3, #1
 80010fa:	e009      	b.n	8001110 <HAL_I2C_Init+0xe8>
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	4a69      	ldr	r2, [pc, #420]	@ (80012ac <HAL_I2C_Init+0x284>)
 8001108:	fba2 2303 	umull	r2, r3, r2, r3
 800110c:	099b      	lsrs	r3, r3, #6
 800110e:	3301      	adds	r3, #1
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6812      	ldr	r2, [r2, #0]
 8001114:	430b      	orrs	r3, r1
 8001116:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001122:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	495c      	ldr	r1, [pc, #368]	@ (800129c <HAL_I2C_Init+0x274>)
 800112c:	428b      	cmp	r3, r1
 800112e:	d819      	bhi.n	8001164 <HAL_I2C_Init+0x13c>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1e59      	subs	r1, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fbb1 f3f3 	udiv	r3, r1, r3
 800113e:	1c59      	adds	r1, r3, #1
 8001140:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001144:	400b      	ands	r3, r1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d00a      	beq.n	8001160 <HAL_I2C_Init+0x138>
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1e59      	subs	r1, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	fbb1 f3f3 	udiv	r3, r1, r3
 8001158:	3301      	adds	r3, #1
 800115a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115e:	e051      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001160:	2304      	movs	r3, #4
 8001162:	e04f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d111      	bne.n	8001190 <HAL_I2C_Init+0x168>
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	1e58      	subs	r0, r3, #1
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6859      	ldr	r1, [r3, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	440b      	add	r3, r1
 800117a:	fbb0 f3f3 	udiv	r3, r0, r3
 800117e:	3301      	adds	r3, #1
 8001180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001184:	2b00      	cmp	r3, #0
 8001186:	bf0c      	ite	eq
 8001188:	2301      	moveq	r3, #1
 800118a:	2300      	movne	r3, #0
 800118c:	b2db      	uxtb	r3, r3
 800118e:	e012      	b.n	80011b6 <HAL_I2C_Init+0x18e>
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	1e58      	subs	r0, r3, #1
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6859      	ldr	r1, [r3, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	0099      	lsls	r1, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a6:	3301      	adds	r3, #1
 80011a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	bf0c      	ite	eq
 80011b0:	2301      	moveq	r3, #1
 80011b2:	2300      	movne	r3, #0
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <HAL_I2C_Init+0x196>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e022      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10e      	bne.n	80011e4 <HAL_I2C_Init+0x1bc>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1e58      	subs	r0, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6859      	ldr	r1, [r3, #4]
 80011ce:	460b      	mov	r3, r1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	440b      	add	r3, r1
 80011d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011d8:	3301      	adds	r3, #1
 80011da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011e2:	e00f      	b.n	8001204 <HAL_I2C_Init+0x1dc>
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	1e58      	subs	r0, r3, #1
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	440b      	add	r3, r1
 80011f2:	0099      	lsls	r1, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011fa:	3301      	adds	r3, #1
 80011fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001200:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	6809      	ldr	r1, [r1, #0]
 8001208:	4313      	orrs	r3, r2
 800120a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	69da      	ldr	r2, [r3, #28]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
 800121e:	431a      	orrs	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	430a      	orrs	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001232:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	6911      	ldr	r1, [r2, #16]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	68d2      	ldr	r2, [r2, #12]
 800123e:	4311      	orrs	r1, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	430b      	orrs	r3, r1
 8001246:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	431a      	orrs	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0201 	orr.w	r2, r2, #1
 8001272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2200      	movs	r2, #0
 8001278:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2220      	movs	r2, #32
 800127e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	000186a0 	.word	0x000186a0
 80012a0:	001e847f 	.word	0x001e847f
 80012a4:	003d08ff 	.word	0x003d08ff
 80012a8:	431bde83 	.word	0x431bde83
 80012ac:	10624dd3 	.word	0x10624dd3

080012b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	4608      	mov	r0, r1
 80012ba:	4611      	mov	r1, r2
 80012bc:	461a      	mov	r2, r3
 80012be:	4603      	mov	r3, r0
 80012c0:	817b      	strh	r3, [r7, #10]
 80012c2:	460b      	mov	r3, r1
 80012c4:	813b      	strh	r3, [r7, #8]
 80012c6:	4613      	mov	r3, r2
 80012c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80012ca:	f7ff fc03 	bl	8000ad4 <HAL_GetTick>
 80012ce:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b20      	cmp	r3, #32
 80012da:	f040 80d9 	bne.w	8001490 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	2319      	movs	r3, #25
 80012e4:	2201      	movs	r2, #1
 80012e6:	496d      	ldr	r1, [pc, #436]	@ (800149c <HAL_I2C_Mem_Write+0x1ec>)
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f971 	bl	80015d0 <I2C_WaitOnFlagUntilTimeout>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80012f4:	2302      	movs	r3, #2
 80012f6:	e0cc      	b.n	8001492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d101      	bne.n	8001306 <HAL_I2C_Mem_Write+0x56>
 8001302:	2302      	movs	r3, #2
 8001304:	e0c5      	b.n	8001492 <HAL_I2C_Mem_Write+0x1e2>
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	2b01      	cmp	r3, #1
 800131a:	d007      	beq.n	800132c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800133a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2221      	movs	r2, #33	@ 0x21
 8001340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2240      	movs	r2, #64	@ 0x40
 8001348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a3a      	ldr	r2, [r7, #32]
 8001356:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800135c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001362:	b29a      	uxth	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4a4d      	ldr	r2, [pc, #308]	@ (80014a0 <HAL_I2C_Mem_Write+0x1f0>)
 800136c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800136e:	88f8      	ldrh	r0, [r7, #6]
 8001370:	893a      	ldrh	r2, [r7, #8]
 8001372:	8979      	ldrh	r1, [r7, #10]
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4603      	mov	r3, r0
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f000 f890 	bl	80014a4 <I2C_RequestMemoryWrite>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d052      	beq.n	8001430 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e081      	b.n	8001492 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 fa36 	bl	8001804 <I2C_WaitOnTXEFlagUntilTimeout>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00d      	beq.n	80013ba <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d107      	bne.n	80013b6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e06b      	b.n	8001492 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29a      	uxth	r2, r3
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f003 0304 	and.w	r3, r3, #4
 80013f4:	2b04      	cmp	r3, #4
 80013f6:	d11b      	bne.n	8001430 <HAL_I2C_Mem_Write+0x180>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d017      	beq.n	8001430 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001404:	781a      	ldrb	r2, [r3, #0]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800141a:	3b01      	subs	r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001426:	b29b      	uxth	r3, r3
 8001428:	3b01      	subs	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001434:	2b00      	cmp	r3, #0
 8001436:	d1aa      	bne.n	800138e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f000 fa29 	bl	8001894 <I2C_WaitOnBTFFlagUntilTimeout>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00d      	beq.n	8001464 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144c:	2b04      	cmp	r3, #4
 800144e:	d107      	bne.n	8001460 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800145e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e016      	b.n	8001492 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	2220      	movs	r2, #32
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	e000      	b.n	8001492 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001490:	2302      	movs	r3, #2
  }
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	00100002 	.word	0x00100002
 80014a0:	ffff0000 	.word	0xffff0000

080014a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4603      	mov	r3, r0
 80014b4:	817b      	strh	r3, [r7, #10]
 80014b6:	460b      	mov	r3, r1
 80014b8:	813b      	strh	r3, [r7, #8]
 80014ba:	4613      	mov	r3, r2
 80014bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80014cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80014ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 f878 	bl	80015d0 <I2C_WaitOnFlagUntilTimeout>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00d      	beq.n	8001502 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014f4:	d103      	bne.n	80014fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e05f      	b.n	80015c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	461a      	mov	r2, r3
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001510:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001514:	6a3a      	ldr	r2, [r7, #32]
 8001516:	492d      	ldr	r1, [pc, #180]	@ (80015cc <I2C_RequestMemoryWrite+0x128>)
 8001518:	68f8      	ldr	r0, [r7, #12]
 800151a:	f000 f8d3 	bl	80016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e04c      	b.n	80015c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800153e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001540:	6a39      	ldr	r1, [r7, #32]
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f000 f95e 	bl	8001804 <I2C_WaitOnTXEFlagUntilTimeout>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00d      	beq.n	800156a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001552:	2b04      	cmp	r3, #4
 8001554:	d107      	bne.n	8001566 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001564:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e02b      	b.n	80015c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d105      	bne.n	800157c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001570:	893b      	ldrh	r3, [r7, #8]
 8001572:	b2da      	uxtb	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	e021      	b.n	80015c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800157c:	893b      	ldrh	r3, [r7, #8]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b29b      	uxth	r3, r3
 8001582:	b2da      	uxtb	r2, r3
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800158a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800158c:	6a39      	ldr	r1, [r7, #32]
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f000 f938 	bl	8001804 <I2C_WaitOnTXEFlagUntilTimeout>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00d      	beq.n	80015b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159e:	2b04      	cmp	r3, #4
 80015a0:	d107      	bne.n	80015b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80015b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e005      	b.n	80015c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80015b6:	893b      	ldrh	r3, [r7, #8]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	00010002 	.word	0x00010002

080015d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015e0:	e048      	b.n	8001674 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e8:	d044      	beq.n	8001674 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ea:	f7ff fa73 	bl	8000ad4 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d302      	bcc.n	8001600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d139      	bne.n	8001674 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	0c1b      	lsrs	r3, r3, #16
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b01      	cmp	r3, #1
 8001608:	d10d      	bne.n	8001626 <I2C_WaitOnFlagUntilTimeout+0x56>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	43da      	mvns	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4013      	ands	r3, r2
 8001616:	b29b      	uxth	r3, r3
 8001618:	2b00      	cmp	r3, #0
 800161a:	bf0c      	ite	eq
 800161c:	2301      	moveq	r3, #1
 800161e:	2300      	movne	r3, #0
 8001620:	b2db      	uxtb	r3, r3
 8001622:	461a      	mov	r2, r3
 8001624:	e00c      	b.n	8001640 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	43da      	mvns	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	4013      	ands	r3, r2
 8001632:	b29b      	uxth	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf0c      	ite	eq
 8001638:	2301      	moveq	r3, #1
 800163a:	2300      	movne	r3, #0
 800163c:	b2db      	uxtb	r3, r3
 800163e:	461a      	mov	r2, r3
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	429a      	cmp	r2, r3
 8001644:	d116      	bne.n	8001674 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2220      	movs	r2, #32
 8001650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	f043 0220 	orr.w	r2, r3, #32
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e023      	b.n	80016bc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d10d      	bne.n	800169a <I2C_WaitOnFlagUntilTimeout+0xca>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	43da      	mvns	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	4013      	ands	r3, r2
 800168a:	b29b      	uxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	bf0c      	ite	eq
 8001690:	2301      	moveq	r3, #1
 8001692:	2300      	movne	r3, #0
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	e00c      	b.n	80016b4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	4013      	ands	r3, r2
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf0c      	ite	eq
 80016ac:	2301      	moveq	r3, #1
 80016ae:	2300      	movne	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	461a      	mov	r2, r3
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d093      	beq.n	80015e2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3710      	adds	r7, #16
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
 80016d0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80016d2:	e071      	b.n	80017b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016e2:	d123      	bne.n	800172c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80016f2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80016fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2220      	movs	r2, #32
 8001708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2200      	movs	r2, #0
 8001710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	f043 0204 	orr.w	r2, r3, #4
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e067      	b.n	80017fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001732:	d041      	beq.n	80017b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001734:	f7ff f9ce 	bl	8000ad4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	429a      	cmp	r2, r3
 8001742:	d302      	bcc.n	800174a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d136      	bne.n	80017b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	b2db      	uxtb	r3, r3
 8001750:	2b01      	cmp	r3, #1
 8001752:	d10c      	bne.n	800176e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	43da      	mvns	r2, r3
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	4013      	ands	r3, r2
 8001760:	b29b      	uxth	r3, r3
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf14      	ite	ne
 8001766:	2301      	movne	r3, #1
 8001768:	2300      	moveq	r3, #0
 800176a:	b2db      	uxtb	r3, r3
 800176c:	e00b      	b.n	8001786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	43da      	mvns	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	4013      	ands	r3, r2
 800177a:	b29b      	uxth	r3, r3
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d016      	beq.n	80017b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2220      	movs	r2, #32
 8001794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2200      	movs	r2, #0
 800179c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f043 0220 	orr.w	r2, r3, #32
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e021      	b.n	80017fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	0c1b      	lsrs	r3, r3, #16
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d10c      	bne.n	80017dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	43da      	mvns	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4013      	ands	r3, r2
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	e00b      	b.n	80017f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4013      	ands	r3, r2
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f47f af6d 	bne.w	80016d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001810:	e034      	b.n	800187c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 f886 	bl	8001924 <I2C_IsAcknowledgeFailed>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e034      	b.n	800188c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d028      	beq.n	800187c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800182a:	f7ff f953 	bl	8000ad4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	429a      	cmp	r2, r3
 8001838:	d302      	bcc.n	8001840 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d11d      	bne.n	800187c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184a:	2b80      	cmp	r3, #128	@ 0x80
 800184c:	d016      	beq.n	800187c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	2200      	movs	r2, #0
 8001852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2220      	movs	r2, #32
 8001858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	f043 0220 	orr.w	r2, r3, #32
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e007      	b.n	800188c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695b      	ldr	r3, [r3, #20]
 8001882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001886:	2b80      	cmp	r3, #128	@ 0x80
 8001888:	d1c3      	bne.n	8001812 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80018a0:	e034      	b.n	800190c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 f83e 	bl	8001924 <I2C_IsAcknowledgeFailed>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e034      	b.n	800191c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b8:	d028      	beq.n	800190c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ba:	f7ff f90b 	bl	8000ad4 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d302      	bcc.n	80018d0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11d      	bne.n	800190c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d016      	beq.n	800190c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2200      	movs	r2, #0
 80018e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2220      	movs	r2, #32
 80018e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f8:	f043 0220 	orr.w	r2, r3, #32
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e007      	b.n	800191c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b04      	cmp	r3, #4
 8001918:	d1c3      	bne.n	80018a2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	4618      	mov	r0, r3
 800191e:	3710      	adds	r7, #16
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800193a:	d11b      	bne.n	8001974 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001944:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001960:	f043 0204 	orr.w	r2, r3, #4
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e000      	b.n	8001976 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e272      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b92      	ldr	r3, [pc, #584]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ac:	4b8f      	ldr	r3, [pc, #572]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d112      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
 80019b8:	4b8c      	ldr	r3, [pc, #560]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b89      	ldr	r3, [pc, #548]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06c      	beq.n	8001aac <HAL_RCC_OscConfig+0x12c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d168      	bne.n	8001aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e24c      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x76>
 80019e8:	4b80      	ldr	r3, [pc, #512]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a7f      	ldr	r2, [pc, #508]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e02e      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b7b      	ldr	r3, [pc, #492]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7a      	ldr	r2, [pc, #488]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0xbc>
 8001a22:	4b72      	ldr	r3, [pc, #456]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a71      	ldr	r2, [pc, #452]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6e      	ldr	r2, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	4b6b      	ldr	r3, [pc, #428]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6a      	ldr	r2, [pc, #424]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b68      	ldr	r3, [pc, #416]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a67      	ldr	r2, [pc, #412]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f83a 	bl	8000ad4 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f836 	bl	8000ad4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	@ 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e200      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b5d      	ldr	r3, [pc, #372]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe4>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f826 	bl	8000ad4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f822 	bl	8000ad4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	@ 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1ec      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b53      	ldr	r3, [pc, #332]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x10c>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b4c      	ldr	r3, [pc, #304]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac6:	4b49      	ldr	r3, [pc, #292]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
 8001ad2:	4b46      	ldr	r3, [pc, #280]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b43      	ldr	r3, [pc, #268]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4939      	ldr	r1, [pc, #228]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7fe ffdb 	bl	8000ad4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7fe ffd7 	bl	8000ad4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1a1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b2d      	ldr	r3, [pc, #180]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4927      	ldr	r1, [pc, #156]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7fe ffba 	bl	8000ad4 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7fe ffb6 	bl	8000ad4 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e180      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03a      	beq.n	8001c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b17      	ldr	r3, [pc, #92]	@ (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7fe ff9a 	bl	8000ad4 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7fe ff96 	bl	8000ad4 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e160      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f000 faea 	bl	800219c <RCC_Delay>
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7fe ff80 	bl	8000ad4 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7fe ff7c 	bl	8000ad4 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d908      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e146      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	42420000 	.word	0x42420000
 8001bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b92      	ldr	r3, [pc, #584]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e9      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a6 	beq.w	8001d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b8b      	ldr	r3, [pc, #556]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b88      	ldr	r3, [pc, #544]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a87      	ldr	r2, [pc, #540]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b85      	ldr	r3, [pc, #532]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7fe ff3d 	bl	8000ad4 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7fe ff39 	bl	8000ad4 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	@ 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e103      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b75      	ldr	r3, [pc, #468]	@ (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x312>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a6e      	ldr	r2, [pc, #440]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	e02d      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a69      	ldr	r2, [pc, #420]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b67      	ldr	r3, [pc, #412]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a66      	ldr	r2, [pc, #408]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	e01c      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x356>
 8001cbc:	4b61      	ldr	r3, [pc, #388]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a60      	ldr	r2, [pc, #384]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a5a      	ldr	r2, [pc, #360]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b58      	ldr	r3, [pc, #352]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a57      	ldr	r2, [pc, #348]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7fe feed 	bl	8000ad4 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe fee9 	bl	8000ad4 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0b1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ee      	beq.n	8001cfe <HAL_RCC_OscConfig+0x37e>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7fe fed7 	bl	8000ad4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe fed3 	bl	8000ad4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e09b      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	4b40      	ldr	r3, [pc, #256]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4b3c      	ldr	r3, [pc, #240]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a3b      	ldr	r2, [pc, #236]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	4b36      	ldr	r3, [pc, #216]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d061      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d146      	bne.n	8001e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b33      	ldr	r3, [pc, #204]	@ (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe fea7 	bl	8000ad4 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe fea3 	bl	8000ad4 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e06d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	4b29      	ldr	r3, [pc, #164]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db2:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4921      	ldr	r1, [pc, #132]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a19      	ldr	r1, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	491b      	ldr	r1, [pc, #108]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7fe fe77 	bl	8000ad4 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe fe73 	bl	8000ad4 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e03d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x46a>
 8001e08:	e035      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe60 	bl	8000ad4 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7fe fe5c 	bl	8000ad4 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e026      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x498>
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e019      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <HAL_RCC_OscConfig+0x500>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fdae 	bl	8000ad4 <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fdaa 	bl	8000ad4 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	@ (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	@ (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	@ (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	@ (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fb3a 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	08005b14 	.word	0x08005b14
 8002050:	20000000 	.word	0x20000000
 8002054:	20000004 	.word	0x20000004

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b04      	cmp	r3, #4
 8002080:	d002      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x30>
 8002082:	2b08      	cmp	r3, #8
 8002084:	d003      	beq.n	800208e <HAL_RCC_GetSysClockFreq+0x36>
 8002086:	e027      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002088:	4b19      	ldr	r3, [pc, #100]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800208a:	613b      	str	r3, [r7, #16]
      break;
 800208c:	e027      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	0c9b      	lsrs	r3, r3, #18
 8002092:	f003 030f 	and.w	r3, r3, #15
 8002096:	4a17      	ldr	r2, [pc, #92]	@ (80020f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002098:	5cd3      	ldrb	r3, [r2, r3]
 800209a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_RCC_GetSysClockFreq+0x94>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	0c5b      	lsrs	r3, r3, #17
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	4a11      	ldr	r2, [pc, #68]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020b2:	5cd3      	ldrb	r3, [r2, r3]
 80020b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ba:	fb03 f202 	mul.w	r2, r3, r2
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	e004      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a0c      	ldr	r2, [pc, #48]	@ (80020fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80020cc:	fb02 f303 	mul.w	r3, r2, r3
 80020d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	613b      	str	r3, [r7, #16]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b05      	ldr	r3, [pc, #20]	@ (80020f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020da:	613b      	str	r3, [r7, #16]
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	693b      	ldr	r3, [r7, #16]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	08005b2c 	.word	0x08005b2c
 80020f8:	08005b3c 	.word	0x08005b3c
 80020fc:	003d0900 	.word	0x003d0900

08002100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002104:	4b02      	ldr	r3, [pc, #8]	@ (8002110 <HAL_RCC_GetHCLKFreq+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	20000000 	.word	0x20000000

08002114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002118:	f7ff fff2 	bl	8002100 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	0a1b      	lsrs	r3, r3, #8
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	@ (8002138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	08005b24 	.word	0x08005b24

0800213c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	220f      	movs	r2, #15
 800214a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_RCC_GetClockConfig+0x58>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002158:	4b0e      	ldr	r3, [pc, #56]	@ (8002194 <HAL_RCC_GetClockConfig+0x58>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002164:	4b0b      	ldr	r3, [pc, #44]	@ (8002194 <HAL_RCC_GetClockConfig+0x58>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_RCC_GetClockConfig+0x58>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0207 	and.w	r2, r3, #7
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	bc80      	pop	{r7}
 8002192:	4770      	bx	lr
 8002194:	40021000 	.word	0x40021000
 8002198:	40022000 	.word	0x40022000

0800219c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021a4:	4b0a      	ldr	r3, [pc, #40]	@ (80021d0 <RCC_Delay+0x34>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <RCC_Delay+0x38>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021b8:	bf00      	nop
  }
  while (Delay --);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e5a      	subs	r2, r3, #1
 80021be:	60fa      	str	r2, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f9      	bne.n	80021b8 <RCC_Delay+0x1c>
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr
 80021d0:	20000000 	.word	0x20000000
 80021d4:	10624dd3 	.word	0x10624dd3

080021d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e041      	b.n	800226e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 f839 	bl	8002276 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2202      	movs	r2, #2
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	4619      	mov	r1, r3
 8002216:	4610      	mov	r0, r2
 8002218:	f000 fb50 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b01      	cmp	r3, #1
 800229a:	d001      	beq.n	80022a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e03a      	b.n	8002316 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a18      	ldr	r2, [pc, #96]	@ (8002320 <HAL_TIM_Base_Start_IT+0x98>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00e      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x58>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022ca:	d009      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x58>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a14      	ldr	r2, [pc, #80]	@ (8002324 <HAL_TIM_Base_Start_IT+0x9c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_TIM_Base_Start_IT+0x58>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a13      	ldr	r2, [pc, #76]	@ (8002328 <HAL_TIM_Base_Start_IT+0xa0>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d111      	bne.n	8002304 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b06      	cmp	r3, #6
 80022f0:	d010      	beq.n	8002314 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f042 0201 	orr.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002302:	e007      	b.n	8002314 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800

0800232c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e041      	b.n	80023c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fb20 	bl	8000998 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4610      	mov	r0, r2
 800236c:	f000 faa6 	bl	80028bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d109      	bne.n	80023f0 <HAL_TIM_PWM_Start+0x24>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	e022      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d109      	bne.n	800240a <HAL_TIM_PWM_Start+0x3e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	e015      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	2b08      	cmp	r3, #8
 800240e:	d109      	bne.n	8002424 <HAL_TIM_PWM_Start+0x58>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002416:	b2db      	uxtb	r3, r3
 8002418:	2b01      	cmp	r3, #1
 800241a:	bf14      	ite	ne
 800241c:	2301      	movne	r3, #1
 800241e:	2300      	moveq	r3, #0
 8002420:	b2db      	uxtb	r3, r3
 8002422:	e008      	b.n	8002436 <HAL_TIM_PWM_Start+0x6a>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	bf14      	ite	ne
 8002430:	2301      	movne	r3, #1
 8002432:	2300      	moveq	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e05e      	b.n	80024fc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d104      	bne.n	800244e <HAL_TIM_PWM_Start+0x82>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800244c:	e013      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d104      	bne.n	800245e <HAL_TIM_PWM_Start+0x92>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800245c:	e00b      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b08      	cmp	r3, #8
 8002462:	d104      	bne.n	800246e <HAL_TIM_PWM_Start+0xa2>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800246c:	e003      	b.n	8002476 <HAL_TIM_PWM_Start+0xaa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2201      	movs	r2, #1
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f000 fc12 	bl	8002ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_TIM_PWM_Start+0x138>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d107      	bne.n	800249e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a18      	ldr	r2, [pc, #96]	@ (8002504 <HAL_TIM_PWM_Start+0x138>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d00e      	beq.n	80024c6 <HAL_TIM_PWM_Start+0xfa>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b0:	d009      	beq.n	80024c6 <HAL_TIM_PWM_Start+0xfa>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a14      	ldr	r2, [pc, #80]	@ (8002508 <HAL_TIM_PWM_Start+0x13c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d004      	beq.n	80024c6 <HAL_TIM_PWM_Start+0xfa>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a12      	ldr	r2, [pc, #72]	@ (800250c <HAL_TIM_PWM_Start+0x140>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d111      	bne.n	80024ea <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2b06      	cmp	r3, #6
 80024d6:	d010      	beq.n	80024fa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e8:	e007      	b.n	80024fa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40012c00 	.word	0x40012c00
 8002508:	40000400 	.word	0x40000400
 800250c:	40000800 	.word	0x40000800

08002510 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d020      	beq.n	8002574 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01b      	beq.n	8002574 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0202 	mvn.w	r2, #2
 8002544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f993 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 8002560:	e005      	b.n	800256e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f986 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f995 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	d020      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01b      	beq.n	80025c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0204 	mvn.w	r2, #4
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2202      	movs	r2, #2
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f96d 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f960 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f96f 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d020      	beq.n	800260c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d01b      	beq.n	800260c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0208 	mvn.w	r2, #8
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f947 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f93a 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f949 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	d020      	beq.n	8002658 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0310 	and.w	r3, r3, #16
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0210 	mvn.w	r2, #16
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2208      	movs	r2, #8
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f921 	bl	8002886 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f914 	bl	8002874 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f923 	bl	8002898 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00c      	beq.n	800267c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0201 	mvn.w	r2, #1
 8002674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fd ffc8 	bl	800060c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00c      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d007      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 fb8f 	bl	8002dbe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8f3 	bl	80028aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00c      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d007      	beq.n	80026e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0220 	mvn.w	r2, #32
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fb62 	bl	8002dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026fc:	2300      	movs	r3, #0
 80026fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002706:	2b01      	cmp	r3, #1
 8002708:	d101      	bne.n	800270e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800270a:	2302      	movs	r3, #2
 800270c:	e0ae      	b.n	800286c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b0c      	cmp	r3, #12
 800271a:	f200 809f 	bhi.w	800285c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800271e:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002724:	08002759 	.word	0x08002759
 8002728:	0800285d 	.word	0x0800285d
 800272c:	0800285d 	.word	0x0800285d
 8002730:	0800285d 	.word	0x0800285d
 8002734:	08002799 	.word	0x08002799
 8002738:	0800285d 	.word	0x0800285d
 800273c:	0800285d 	.word	0x0800285d
 8002740:	0800285d 	.word	0x0800285d
 8002744:	080027db 	.word	0x080027db
 8002748:	0800285d 	.word	0x0800285d
 800274c:	0800285d 	.word	0x0800285d
 8002750:	0800285d 	.word	0x0800285d
 8002754:	0800281b 	.word	0x0800281b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68b9      	ldr	r1, [r7, #8]
 800275e:	4618      	mov	r0, r3
 8002760:	f000 f91a 	bl	8002998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0208 	orr.w	r2, r2, #8
 8002772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699a      	ldr	r2, [r3, #24]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6999      	ldr	r1, [r3, #24]
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	619a      	str	r2, [r3, #24]
      break;
 8002796:	e064      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f960 	bl	8002a64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	699a      	ldr	r2, [r3, #24]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6999      	ldr	r1, [r3, #24]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	021a      	lsls	r2, r3, #8
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	619a      	str	r2, [r3, #24]
      break;
 80027d8:	e043      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68b9      	ldr	r1, [r7, #8]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 f9a9 	bl	8002b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	69da      	ldr	r2, [r3, #28]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f042 0208 	orr.w	r2, r2, #8
 80027f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0204 	bic.w	r2, r2, #4
 8002804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	69d9      	ldr	r1, [r3, #28]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	61da      	str	r2, [r3, #28]
      break;
 8002818:	e023      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f9f3 	bl	8002c0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	69da      	ldr	r2, [r3, #28]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002834:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002844:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69d9      	ldr	r1, [r3, #28]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	021a      	lsls	r2, r3, #8
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	430a      	orrs	r2, r1
 8002858:	61da      	str	r2, [r3, #28]
      break;
 800285a:	e002      	b.n	8002862 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	75fb      	strb	r3, [r7, #23]
      break;
 8002860:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800286a:	7dfb      	ldrb	r3, [r7, #23]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bc80      	pop	{r7}
 8002884:	4770      	bx	lr

08002886 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	bc80      	pop	{r7}
 8002896:	4770      	bx	lr

08002898 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr

080028aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr

080028bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	4a2f      	ldr	r2, [pc, #188]	@ (800298c <TIM_Base_SetConfig+0xd0>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d00b      	beq.n	80028ec <TIM_Base_SetConfig+0x30>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028da:	d007      	beq.n	80028ec <TIM_Base_SetConfig+0x30>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a2c      	ldr	r2, [pc, #176]	@ (8002990 <TIM_Base_SetConfig+0xd4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d003      	beq.n	80028ec <TIM_Base_SetConfig+0x30>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002994 <TIM_Base_SetConfig+0xd8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d108      	bne.n	80028fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	68fa      	ldr	r2, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a22      	ldr	r2, [pc, #136]	@ (800298c <TIM_Base_SetConfig+0xd0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <TIM_Base_SetConfig+0x62>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800290c:	d007      	beq.n	800291e <TIM_Base_SetConfig+0x62>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1f      	ldr	r2, [pc, #124]	@ (8002990 <TIM_Base_SetConfig+0xd4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_Base_SetConfig+0x62>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a1e      	ldr	r2, [pc, #120]	@ (8002994 <TIM_Base_SetConfig+0xd8>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0d      	ldr	r2, [pc, #52]	@ (800298c <TIM_Base_SetConfig+0xd0>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d103      	bne.n	8002964 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d005      	beq.n	8002982 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f023 0201 	bic.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	611a      	str	r2, [r3, #16]
  }
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800

08002998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002998:	b480      	push	{r7}
 800299a:	b087      	sub	sp, #28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f023 0201 	bic.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0303 	bic.w	r3, r3, #3
 80029ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f023 0302 	bic.w	r3, r3, #2
 80029e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <TIM_OC1_SetConfig+0xc8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d10c      	bne.n	8002a0e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f023 0308 	bic.w	r3, r3, #8
 80029fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f023 0304 	bic.w	r3, r3, #4
 8002a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a13      	ldr	r2, [pc, #76]	@ (8002a60 <TIM_OC1_SetConfig+0xc8>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d111      	bne.n	8002a3a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002a24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	621a      	str	r2, [r3, #32]
}
 8002a54:	bf00      	nop
 8002a56:	371c      	adds	r7, #28
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bc80      	pop	{r7}
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	40012c00 	.word	0x40012c00

08002a64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1b      	ldr	r3, [r3, #32]
 8002a78:	f023 0210 	bic.w	r2, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	021b      	lsls	r3, r3, #8
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f023 0320 	bic.w	r3, r3, #32
 8002aae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <TIM_OC2_SetConfig+0xd0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d10d      	bne.n	8002ae0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ade:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <TIM_OC2_SetConfig+0xd0>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d113      	bne.n	8002b10 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr
 8002b34:	40012c00 	.word	0x40012c00

08002b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
 8002b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0303 	bic.w	r3, r3, #3
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	021b      	lsls	r3, r3, #8
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <TIM_OC3_SetConfig+0xd0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d10d      	bne.n	8002bb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <TIM_OC3_SetConfig+0xd0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d113      	bne.n	8002be2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	621a      	str	r2, [r3, #32]
}
 8002bfc:	bf00      	nop
 8002bfe:	371c      	adds	r7, #28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	40012c00 	.word	0x40012c00

08002c0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b087      	sub	sp, #28
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	021b      	lsls	r3, r3, #8
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	031b      	lsls	r3, r3, #12
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a0f      	ldr	r2, [pc, #60]	@ (8002ca4 <TIM_OC4_SetConfig+0x98>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d109      	bne.n	8002c80 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002c72:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	019b      	lsls	r3, r3, #6
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	621a      	str	r2, [r3, #32]
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr
 8002ca4:	40012c00 	.word	0x40012c00

08002ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e046      	b.n	8002d96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a16      	ldr	r2, [pc, #88]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d00e      	beq.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d54:	d009      	beq.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a12      	ldr	r2, [pc, #72]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a10      	ldr	r2, [pc, #64]	@ (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d10c      	bne.n	8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400
 8002da8:	40000800 	.word	0x40000800

08002dac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <__NVIC_SetPriority>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db0a      	blt.n	8002dfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	490c      	ldr	r1, [pc, #48]	@ (8002e1c <__NVIC_SetPriority+0x4c>)
 8002dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dee:	0112      	lsls	r2, r2, #4
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	440b      	add	r3, r1
 8002df4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002df8:	e00a      	b.n	8002e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4908      	ldr	r1, [pc, #32]	@ (8002e20 <__NVIC_SetPriority+0x50>)
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	f003 030f 	and.w	r3, r3, #15
 8002e06:	3b04      	subs	r3, #4
 8002e08:	0112      	lsls	r2, r2, #4
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	761a      	strb	r2, [r3, #24]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	e000e100 	.word	0xe000e100
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e28:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <SysTick_Handler+0x1c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e2c:	f001 fd38 	bl	80048a0 <xTaskGetSchedulerState>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d001      	beq.n	8002e3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e36:	f002 fadf 	bl	80053f8 <xPortSysTickHandler>
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	e000e010 	.word	0xe000e010

08002e44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e48:	2100      	movs	r1, #0
 8002e4a:	f06f 0004 	mvn.w	r0, #4
 8002e4e:	f7ff ffbf 	bl	8002dd0 <__NVIC_SetPriority>
#endif
}
 8002e52:	bf00      	nop
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e5e:	f3ef 8305 	mrs	r3, IPSR
 8002e62:	603b      	str	r3, [r7, #0]
  return(result);
 8002e64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e6a:	f06f 0305 	mvn.w	r3, #5
 8002e6e:	607b      	str	r3, [r7, #4]
 8002e70:	e00c      	b.n	8002e8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e72:	4b09      	ldr	r3, [pc, #36]	@ (8002e98 <osKernelInitialize+0x40>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d105      	bne.n	8002e86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e7a:	4b07      	ldr	r3, [pc, #28]	@ (8002e98 <osKernelInitialize+0x40>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	607b      	str	r3, [r7, #4]
 8002e84:	e002      	b.n	8002e8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e8c:	687b      	ldr	r3, [r7, #4]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bc80      	pop	{r7}
 8002e96:	4770      	bx	lr
 8002e98:	20000578 	.word	0x20000578

08002e9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ea2:	f3ef 8305 	mrs	r3, IPSR
 8002ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ea8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002eae:	f06f 0305 	mvn.w	r3, #5
 8002eb2:	607b      	str	r3, [r7, #4]
 8002eb4:	e010      	b.n	8002ed8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee4 <osKernelStart+0x48>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d109      	bne.n	8002ed2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002ebe:	f7ff ffc1 	bl	8002e44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ec2:	4b08      	ldr	r3, [pc, #32]	@ (8002ee4 <osKernelStart+0x48>)
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ec8:	f001 f88a 	bl	8003fe0 <vTaskStartScheduler>
      stat = osOK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e002      	b.n	8002ed8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3708      	adds	r7, #8
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	20000578 	.word	0x20000578

08002ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	@ 0x38
 8002eec:	af04      	add	r7, sp, #16
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ef8:	f3ef 8305 	mrs	r3, IPSR
 8002efc:	617b      	str	r3, [r7, #20]
  return(result);
 8002efe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d17e      	bne.n	8003002 <osThreadNew+0x11a>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d07b      	beq.n	8003002 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f0e:	2318      	movs	r3, #24
 8002f10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002f16:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d045      	beq.n	8002fae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <osThreadNew+0x48>
        name = attr->name;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d002      	beq.n	8002f3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <osThreadNew+0x6e>
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	2b38      	cmp	r3, #56	@ 0x38
 8002f48:	d805      	bhi.n	8002f56 <osThreadNew+0x6e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <osThreadNew+0x72>
        return (NULL);
 8002f56:	2300      	movs	r3, #0
 8002f58:	e054      	b.n	8003004 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d003      	beq.n	8002f6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00e      	beq.n	8002f90 <osThreadNew+0xa8>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	2ba7      	cmp	r3, #167	@ 0xa7
 8002f78:	d90a      	bls.n	8002f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d006      	beq.n	8002f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <osThreadNew+0xa8>
        mem = 1;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	61bb      	str	r3, [r7, #24]
 8002f8e:	e010      	b.n	8002fb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10c      	bne.n	8002fb2 <osThreadNew+0xca>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d108      	bne.n	8002fb2 <osThreadNew+0xca>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <osThreadNew+0xca>
          mem = 0;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e001      	b.n	8002fb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d110      	bne.n	8002fda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fc0:	9202      	str	r2, [sp, #8]
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	6a3a      	ldr	r2, [r7, #32]
 8002fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fe12 	bl	8003bf8 <xTaskCreateStatic>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	e013      	b.n	8003002 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d110      	bne.n	8003002 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	f107 0310 	add.w	r3, r7, #16
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f000 fe60 	bl	8003cb8 <xTaskCreate>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <osThreadNew+0x11a>
            hTask = NULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003002:	693b      	ldr	r3, [r7, #16]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3728      	adds	r7, #40	@ 0x28
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003014:	f3ef 8305 	mrs	r3, IPSR
 8003018:	60bb      	str	r3, [r7, #8]
  return(result);
 800301a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <osDelay+0x1c>
    stat = osErrorISR;
 8003020:	f06f 0305 	mvn.w	r3, #5
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	e007      	b.n	8003038 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003028:	2300      	movs	r3, #0
 800302a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 ff9e 	bl	8003f74 <vTaskDelay>
    }
  }

  return (stat);
 8003038:	68fb      	ldr	r3, [r7, #12]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a06      	ldr	r2, [pc, #24]	@ (800306c <vApplicationGetIdleTaskMemory+0x28>)
 8003054:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <vApplicationGetIdleTaskMemory+0x2c>)
 800305a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2280      	movs	r2, #128	@ 0x80
 8003060:	601a      	str	r2, [r3, #0]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	bc80      	pop	{r7}
 800306a:	4770      	bx	lr
 800306c:	2000057c 	.word	0x2000057c
 8003070:	20000624 	.word	0x20000624

08003074 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003074:	b480      	push	{r7}
 8003076:	b085      	sub	sp, #20
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	4a07      	ldr	r2, [pc, #28]	@ (80030a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003084:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4a06      	ldr	r2, [pc, #24]	@ (80030a4 <vApplicationGetTimerTaskMemory+0x30>)
 800308a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003092:	601a      	str	r2, [r3, #0]
}
 8003094:	bf00      	nop
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000824 	.word	0x20000824
 80030a4:	200008cc 	.word	0x200008cc

080030a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f103 0208 	add.w	r2, r3, #8
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f103 0208 	add.w	r2, r3, #8
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f103 0208 	add.w	r2, r3, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr

080030fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030fe:	b480      	push	{r7}
 8003100:	b085      	sub	sp, #20
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	601a      	str	r2, [r3, #0]
}
 800313a:	bf00      	nop
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	bc80      	pop	{r7}
 8003142:	4770      	bx	lr

08003144 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315a:	d103      	bne.n	8003164 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	e00c      	b.n	800317e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3308      	adds	r3, #8
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e002      	b.n	8003172 <vListInsert+0x2e>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d2f6      	bcs.n	800316c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr

080031b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6892      	ldr	r2, [r2, #8]
 80031ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6852      	ldr	r2, [r2, #4]
 80031d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d103      	bne.n	80031e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1e5a      	subs	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
	...

08003208 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10b      	bne.n	8003234 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800321c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800322e:	bf00      	nop
 8003230:	bf00      	nop
 8003232:	e7fd      	b.n	8003230 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003234:	f002 f862 	bl	80052fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	441a      	add	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	3b01      	subs	r3, #1
 8003266:	68f9      	ldr	r1, [r7, #12]
 8003268:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	441a      	add	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	22ff      	movs	r2, #255	@ 0xff
 8003278:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	22ff      	movs	r2, #255	@ 0xff
 8003280:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d114      	bne.n	80032b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d01a      	beq.n	80032c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3310      	adds	r3, #16
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f93c 	bl	8004514 <xTaskRemoveFromEventList>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d012      	beq.n	80032c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032a2:	4b0d      	ldr	r3, [pc, #52]	@ (80032d8 <xQueueGenericReset+0xd0>)
 80032a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	f3bf 8f4f 	dsb	sy
 80032ae:	f3bf 8f6f 	isb	sy
 80032b2:	e009      	b.n	80032c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3310      	adds	r3, #16
 80032b8:	4618      	mov	r0, r3
 80032ba:	f7ff fef5 	bl	80030a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3324      	adds	r3, #36	@ 0x24
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fef0 	bl	80030a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032c8:	f002 f848 	bl	800535c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032cc:	2301      	movs	r3, #1
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	e000ed04 	.word	0xe000ed04

080032dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08e      	sub	sp, #56	@ 0x38
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80032f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f4:	f383 8811 	msr	BASEPRI, r3
 80032f8:	f3bf 8f6f 	isb	sy
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003302:	bf00      	nop
 8003304:	bf00      	nop
 8003306:	e7fd      	b.n	8003304 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10b      	bne.n	8003326 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800330e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003312:	f383 8811 	msr	BASEPRI, r3
 8003316:	f3bf 8f6f 	isb	sy
 800331a:	f3bf 8f4f 	dsb	sy
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003320:	bf00      	nop
 8003322:	bf00      	nop
 8003324:	e7fd      	b.n	8003322 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <xQueueGenericCreateStatic+0x56>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <xQueueGenericCreateStatic+0x5a>
 8003332:	2301      	movs	r3, #1
 8003334:	e000      	b.n	8003338 <xQueueGenericCreateStatic+0x5c>
 8003336:	2300      	movs	r3, #0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10b      	bne.n	8003354 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800333c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003340:	f383 8811 	msr	BASEPRI, r3
 8003344:	f3bf 8f6f 	isb	sy
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	623b      	str	r3, [r7, #32]
}
 800334e:	bf00      	nop
 8003350:	bf00      	nop
 8003352:	e7fd      	b.n	8003350 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d102      	bne.n	8003360 <xQueueGenericCreateStatic+0x84>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d101      	bne.n	8003364 <xQueueGenericCreateStatic+0x88>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <xQueueGenericCreateStatic+0x8a>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10b      	bne.n	8003382 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	61fb      	str	r3, [r7, #28]
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	e7fd      	b.n	800337e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003382:	2350      	movs	r3, #80	@ 0x50
 8003384:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2b50      	cmp	r3, #80	@ 0x50
 800338a:	d00b      	beq.n	80033a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800338c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003390:	f383 8811 	msr	BASEPRI, r3
 8003394:	f3bf 8f6f 	isb	sy
 8003398:	f3bf 8f4f 	dsb	sy
 800339c:	61bb      	str	r3, [r7, #24]
}
 800339e:	bf00      	nop
 80033a0:	bf00      	nop
 80033a2:	e7fd      	b.n	80033a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80033aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d00d      	beq.n	80033cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	4613      	mov	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f805 	bl	80033d6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3730      	adds	r7, #48	@ 0x30
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b084      	sub	sp, #16
 80033da:	af00      	add	r7, sp, #0
 80033dc:	60f8      	str	r0, [r7, #12]
 80033de:	60b9      	str	r1, [r7, #8]
 80033e0:	607a      	str	r2, [r7, #4]
 80033e2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	e002      	b.n	80033f8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003404:	2101      	movs	r1, #1
 8003406:	69b8      	ldr	r0, [r7, #24]
 8003408:	f7ff fefe 	bl	8003208 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	78fa      	ldrb	r2, [r7, #3]
 8003410:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08e      	sub	sp, #56	@ 0x38
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800342a:	2300      	movs	r3, #0
 800342c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10b      	bne.n	8003450 <xQueueGenericSend+0x34>
	__asm volatile
 8003438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343c:	f383 8811 	msr	BASEPRI, r3
 8003440:	f3bf 8f6f 	isb	sy
 8003444:	f3bf 8f4f 	dsb	sy
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800344a:	bf00      	nop
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <xQueueGenericSend+0x42>
 8003456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <xQueueGenericSend+0x46>
 800345e:	2301      	movs	r3, #1
 8003460:	e000      	b.n	8003464 <xQueueGenericSend+0x48>
 8003462:	2300      	movs	r3, #0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <xQueueGenericSend+0x64>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800347a:	bf00      	nop
 800347c:	bf00      	nop
 800347e:	e7fd      	b.n	800347c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d103      	bne.n	800348e <xQueueGenericSend+0x72>
 8003486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <xQueueGenericSend+0x76>
 800348e:	2301      	movs	r3, #1
 8003490:	e000      	b.n	8003494 <xQueueGenericSend+0x78>
 8003492:	2300      	movs	r3, #0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10b      	bne.n	80034b0 <xQueueGenericSend+0x94>
	__asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	623b      	str	r3, [r7, #32]
}
 80034aa:	bf00      	nop
 80034ac:	bf00      	nop
 80034ae:	e7fd      	b.n	80034ac <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034b0:	f001 f9f6 	bl	80048a0 <xTaskGetSchedulerState>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <xQueueGenericSend+0xa4>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <xQueueGenericSend+0xa8>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <xQueueGenericSend+0xaa>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <xQueueGenericSend+0xc6>
	__asm volatile
 80034ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	61fb      	str	r3, [r7, #28]
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	e7fd      	b.n	80034de <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034e2:	f001 ff0b 	bl	80052fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <xQueueGenericSend+0xdc>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d129      	bne.n	800354c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	68b9      	ldr	r1, [r7, #8]
 80034fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034fe:	f000 fa0f 	bl	8003920 <prvCopyDataToQueue>
 8003502:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	3324      	adds	r3, #36	@ 0x24
 8003510:	4618      	mov	r0, r3
 8003512:	f000 ffff 	bl	8004514 <xTaskRemoveFromEventList>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d013      	beq.n	8003544 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800351c:	4b3f      	ldr	r3, [pc, #252]	@ (800361c <xQueueGenericSend+0x200>)
 800351e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	f3bf 8f4f 	dsb	sy
 8003528:	f3bf 8f6f 	isb	sy
 800352c:	e00a      	b.n	8003544 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800352e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003534:	4b39      	ldr	r3, [pc, #228]	@ (800361c <xQueueGenericSend+0x200>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003544:	f001 ff0a 	bl	800535c <vPortExitCritical>
				return pdPASS;
 8003548:	2301      	movs	r3, #1
 800354a:	e063      	b.n	8003614 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003552:	f001 ff03 	bl	800535c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003556:	2300      	movs	r3, #0
 8003558:	e05c      	b.n	8003614 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355c:	2b00      	cmp	r3, #0
 800355e:	d106      	bne.n	800356e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003560:	f107 0314 	add.w	r3, r7, #20
 8003564:	4618      	mov	r0, r3
 8003566:	f001 f839 	bl	80045dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800356a:	2301      	movs	r3, #1
 800356c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800356e:	f001 fef5 	bl	800535c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003572:	f000 fda5 	bl	80040c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003576:	f001 fec1 	bl	80052fc <vPortEnterCritical>
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003580:	b25b      	sxtb	r3, r3
 8003582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003586:	d103      	bne.n	8003590 <xQueueGenericSend+0x174>
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003596:	b25b      	sxtb	r3, r3
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d103      	bne.n	80035a6 <xQueueGenericSend+0x18a>
 800359e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035a6:	f001 fed9 	bl	800535c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035aa:	1d3a      	adds	r2, r7, #4
 80035ac:	f107 0314 	add.w	r3, r7, #20
 80035b0:	4611      	mov	r1, r2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 f828 	bl	8004608 <xTaskCheckForTimeOut>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d124      	bne.n	8003608 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035c0:	f000 faa6 	bl	8003b10 <prvIsQueueFull>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d018      	beq.n	80035fc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035cc:	3310      	adds	r3, #16
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f000 ff4c 	bl	8004470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035da:	f000 fa31 	bl	8003a40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035de:	f000 fd7d 	bl	80040dc <xTaskResumeAll>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f af7c 	bne.w	80034e2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80035ea:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <xQueueGenericSend+0x200>)
 80035ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035f0:	601a      	str	r2, [r3, #0]
 80035f2:	f3bf 8f4f 	dsb	sy
 80035f6:	f3bf 8f6f 	isb	sy
 80035fa:	e772      	b.n	80034e2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035fe:	f000 fa1f 	bl	8003a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003602:	f000 fd6b 	bl	80040dc <xTaskResumeAll>
 8003606:	e76c      	b.n	80034e2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003608:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800360a:	f000 fa19 	bl	8003a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800360e:	f000 fd65 	bl	80040dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003612:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003614:	4618      	mov	r0, r3
 8003616:	3738      	adds	r7, #56	@ 0x38
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	e000ed04 	.word	0xe000ed04

08003620 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b090      	sub	sp, #64	@ 0x40
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
 800362c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363c:	f383 8811 	msr	BASEPRI, r3
 8003640:	f3bf 8f6f 	isb	sy
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800364a:	bf00      	nop
 800364c:	bf00      	nop
 800364e:	e7fd      	b.n	800364c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d103      	bne.n	800365e <xQueueGenericSendFromISR+0x3e>
 8003656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <xQueueGenericSendFromISR+0x42>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <xQueueGenericSendFromISR+0x44>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800367a:	bf00      	nop
 800367c:	bf00      	nop
 800367e:	e7fd      	b.n	800367c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d103      	bne.n	800368e <xQueueGenericSendFromISR+0x6e>
 8003686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <xQueueGenericSendFromISR+0x72>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <xQueueGenericSendFromISR+0x74>
 8003692:	2300      	movs	r3, #0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	623b      	str	r3, [r7, #32]
}
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036b0:	f001 fee6 	bl	8005480 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036b4:	f3ef 8211 	mrs	r2, BASEPRI
 80036b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	61fa      	str	r2, [r7, #28]
 80036ca:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036cc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036ce:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d8:	429a      	cmp	r2, r3
 80036da:	d302      	bcc.n	80036e2 <xQueueGenericSendFromISR+0xc2>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d12f      	bne.n	8003742 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80036e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80036f8:	f000 f912 	bl	8003920 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036fc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d112      	bne.n	800372c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	3324      	adds	r3, #36	@ 0x24
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fefe 	bl	8004514 <xTaskRemoveFromEventList>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00b      	beq.n	800373c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e007      	b.n	800373c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800372c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003730:	3301      	adds	r3, #1
 8003732:	b2db      	uxtb	r3, r3
 8003734:	b25a      	sxtb	r2, r3
 8003736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800373c:	2301      	movs	r3, #1
 800373e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003740:	e001      	b.n	8003746 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003742:	2300      	movs	r3, #0
 8003744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003748:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003750:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003754:	4618      	mov	r0, r3
 8003756:	3740      	adds	r7, #64	@ 0x40
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10b      	bne.n	800378e <xQueueReceive+0x32>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	623b      	str	r3, [r7, #32]
}
 8003788:	bf00      	nop
 800378a:	bf00      	nop
 800378c:	e7fd      	b.n	800378a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <xQueueReceive+0x40>
 8003794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <xQueueReceive+0x44>
 800379c:	2301      	movs	r3, #1
 800379e:	e000      	b.n	80037a2 <xQueueReceive+0x46>
 80037a0:	2300      	movs	r3, #0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <xQueueReceive+0x62>
	__asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	61fb      	str	r3, [r7, #28]
}
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037be:	f001 f86f 	bl	80048a0 <xTaskGetSchedulerState>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d102      	bne.n	80037ce <xQueueReceive+0x72>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <xQueueReceive+0x76>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xQueueReceive+0x78>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <xQueueReceive+0x94>
	__asm volatile
 80037d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	61bb      	str	r3, [r7, #24]
}
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	e7fd      	b.n	80037ec <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037f0:	f001 fd84 	bl	80052fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01f      	beq.n	8003840 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003800:	68b9      	ldr	r1, [r7, #8]
 8003802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003804:	f000 f8f6 	bl	80039f4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	1e5a      	subs	r2, r3, #1
 800380c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800380e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00f      	beq.n	8003838 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381a:	3310      	adds	r3, #16
 800381c:	4618      	mov	r0, r3
 800381e:	f000 fe79 	bl	8004514 <xTaskRemoveFromEventList>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d007      	beq.n	8003838 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003828:	4b3c      	ldr	r3, [pc, #240]	@ (800391c <xQueueReceive+0x1c0>)
 800382a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003838:	f001 fd90 	bl	800535c <vPortExitCritical>
				return pdPASS;
 800383c:	2301      	movs	r3, #1
 800383e:	e069      	b.n	8003914 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d103      	bne.n	800384e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003846:	f001 fd89 	bl	800535c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800384a:	2300      	movs	r3, #0
 800384c:	e062      	b.n	8003914 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800384e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d106      	bne.n	8003862 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003854:	f107 0310 	add.w	r3, r7, #16
 8003858:	4618      	mov	r0, r3
 800385a:	f000 febf 	bl	80045dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800385e:	2301      	movs	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003862:	f001 fd7b 	bl	800535c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003866:	f000 fc2b 	bl	80040c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800386a:	f001 fd47 	bl	80052fc <vPortEnterCritical>
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003874:	b25b      	sxtb	r3, r3
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387a:	d103      	bne.n	8003884 <xQueueReceive+0x128>
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003886:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800388a:	b25b      	sxtb	r3, r3
 800388c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003890:	d103      	bne.n	800389a <xQueueReceive+0x13e>
 8003892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800389a:	f001 fd5f 	bl	800535c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800389e:	1d3a      	adds	r2, r7, #4
 80038a0:	f107 0310 	add.w	r3, r7, #16
 80038a4:	4611      	mov	r1, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 feae 	bl	8004608 <xTaskCheckForTimeOut>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d123      	bne.n	80038fa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038b4:	f000 f916 	bl	8003ae4 <prvIsQueueEmpty>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d017      	beq.n	80038ee <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	3324      	adds	r3, #36	@ 0x24
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fdd2 	bl	8004470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038ce:	f000 f8b7 	bl	8003a40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038d2:	f000 fc03 	bl	80040dc <xTaskResumeAll>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d189      	bne.n	80037f0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80038dc:	4b0f      	ldr	r3, [pc, #60]	@ (800391c <xQueueReceive+0x1c0>)
 80038de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	e780      	b.n	80037f0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038f0:	f000 f8a6 	bl	8003a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038f4:	f000 fbf2 	bl	80040dc <xTaskResumeAll>
 80038f8:	e77a      	b.n	80037f0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038fc:	f000 f8a0 	bl	8003a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003900:	f000 fbec 	bl	80040dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003904:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003906:	f000 f8ed 	bl	8003ae4 <prvIsQueueEmpty>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	f43f af6f 	beq.w	80037f0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003912:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003914:	4618      	mov	r0, r3
 8003916:	3730      	adds	r7, #48	@ 0x30
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	e000ed04 	.word	0xe000ed04

08003920 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003934:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d14d      	bne.n	80039e2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	4618      	mov	r0, r3
 800394c:	f000 ffc6 	bl	80048dc <xTaskPriorityDisinherit>
 8003950:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
 8003958:	e043      	b.n	80039e2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d119      	bne.n	8003994 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6858      	ldr	r0, [r3, #4]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003968:	461a      	mov	r2, r3
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	f002 f840 	bl	80059f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	441a      	add	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	429a      	cmp	r2, r3
 8003988:	d32b      	bcc.n	80039e2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	e026      	b.n	80039e2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	68d8      	ldr	r0, [r3, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800399c:	461a      	mov	r2, r3
 800399e:	68b9      	ldr	r1, [r7, #8]
 80039a0:	f002 f826 	bl	80059f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ac:	425b      	negs	r3, r3
 80039ae:	441a      	add	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d207      	bcs.n	80039d0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	425b      	negs	r3, r3
 80039ca:	441a      	add	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d105      	bne.n	80039e2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d002      	beq.n	80039e2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3b01      	subs	r3, #1
 80039e0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1c5a      	adds	r2, r3, #1
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80039ea:	697b      	ldr	r3, [r7, #20]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d018      	beq.n	8003a38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0e:	441a      	add	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d303      	bcc.n	8003a28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68d9      	ldr	r1, [r3, #12]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a30:	461a      	mov	r2, r3
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f001 ffdc 	bl	80059f0 <memcpy>
	}
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a48:	f001 fc58 	bl	80052fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a54:	e011      	b.n	8003a7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d012      	beq.n	8003a84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3324      	adds	r3, #36	@ 0x24
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fd56 	bl	8004514 <xTaskRemoveFromEventList>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a6e:	f000 fe2f 	bl	80046d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	dce9      	bgt.n	8003a56 <prvUnlockQueue+0x16>
 8003a82:	e000      	b.n	8003a86 <prvUnlockQueue+0x46>
					break;
 8003a84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	22ff      	movs	r2, #255	@ 0xff
 8003a8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003a8e:	f001 fc65 	bl	800535c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a92:	f001 fc33 	bl	80052fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a9e:	e011      	b.n	8003ac4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d012      	beq.n	8003ace <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	3310      	adds	r3, #16
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 fd31 	bl	8004514 <xTaskRemoveFromEventList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ab8:	f000 fe0a 	bl	80046d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003abc:	7bbb      	ldrb	r3, [r7, #14]
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	dce9      	bgt.n	8003aa0 <prvUnlockQueue+0x60>
 8003acc:	e000      	b.n	8003ad0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ace:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	22ff      	movs	r2, #255	@ 0xff
 8003ad4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ad8:	f001 fc40 	bl	800535c <vPortExitCritical>
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003aec:	f001 fc06 	bl	80052fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003af8:	2301      	movs	r3, #1
 8003afa:	60fb      	str	r3, [r7, #12]
 8003afc:	e001      	b.n	8003b02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b02:	f001 fc2b 	bl	800535c <vPortExitCritical>

	return xReturn;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b18:	f001 fbf0 	bl	80052fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d102      	bne.n	8003b2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e001      	b.n	8003b32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b32:	f001 fc13 	bl	800535c <vPortExitCritical>

	return xReturn;
 8003b36:	68fb      	ldr	r3, [r7, #12]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	60fb      	str	r3, [r7, #12]
 8003b4e:	e014      	b.n	8003b7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b50:	4a0e      	ldr	r2, [pc, #56]	@ (8003b8c <vQueueAddToRegistry+0x4c>)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b5c:	490b      	ldr	r1, [pc, #44]	@ (8003b8c <vQueueAddToRegistry+0x4c>)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b66:	4a09      	ldr	r2, [pc, #36]	@ (8003b8c <vQueueAddToRegistry+0x4c>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b72:	e006      	b.n	8003b82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3301      	adds	r3, #1
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b07      	cmp	r3, #7
 8003b7e:	d9e7      	bls.n	8003b50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000ccc 	.word	0x20000ccc

08003b90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ba0:	f001 fbac 	bl	80052fc <vPortEnterCritical>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d103      	bne.n	8003bba <vQueueWaitForMessageRestricted+0x2a>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d103      	bne.n	8003bd0 <vQueueWaitForMessageRestricted+0x40>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003bd0:	f001 fbc4 	bl	800535c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3324      	adds	r3, #36	@ 0x24
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fc69 	bl	80044bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff28 	bl	8003a40 <prvUnlockQueue>
	}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	@ 0x38
 8003bfc:	af04      	add	r7, sp, #16
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10b      	bne.n	8003c24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	623b      	str	r3, [r7, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	bf00      	nop
 8003c22:	e7fd      	b.n	8003c20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	61fb      	str	r3, [r7, #28]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c42:	23a8      	movs	r3, #168	@ 0xa8
 8003c44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2ba8      	cmp	r3, #168	@ 0xa8
 8003c4a:	d00b      	beq.n	8003c64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c50:	f383 8811 	msr	BASEPRI, r3
 8003c54:	f3bf 8f6f 	isb	sy
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	61bb      	str	r3, [r7, #24]
}
 8003c5e:	bf00      	nop
 8003c60:	bf00      	nop
 8003c62:	e7fd      	b.n	8003c60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01e      	beq.n	8003caa <xTaskCreateStatic+0xb2>
 8003c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d01b      	beq.n	8003caa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c84:	2300      	movs	r3, #0
 8003c86:	9303      	str	r3, [sp, #12]
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	9302      	str	r3, [sp, #8]
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	9301      	str	r3, [sp, #4]
 8003c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68b9      	ldr	r1, [r7, #8]
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f000 f851 	bl	8003d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ca2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ca4:	f000 f8f6 	bl	8003e94 <prvAddNewTaskToReadyList>
 8003ca8:	e001      	b.n	8003cae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003cae:	697b      	ldr	r3, [r7, #20]
	}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3728      	adds	r7, #40	@ 0x28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b08c      	sub	sp, #48	@ 0x30
 8003cbc:	af04      	add	r7, sp, #16
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cc8:	88fb      	ldrh	r3, [r7, #6]
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 fc17 	bl	8005500 <pvPortMalloc>
 8003cd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00e      	beq.n	8003cf8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cda:	20a8      	movs	r0, #168	@ 0xa8
 8003cdc:	f001 fc10 	bl	8005500 <pvPortMalloc>
 8003ce0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	631a      	str	r2, [r3, #48]	@ 0x30
 8003cee:	e005      	b.n	8003cfc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cf0:	6978      	ldr	r0, [r7, #20]
 8003cf2:	f001 fcd3 	bl	800569c <vPortFree>
 8003cf6:	e001      	b.n	8003cfc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d0a:	88fa      	ldrh	r2, [r7, #6]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	9303      	str	r3, [sp, #12]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	9302      	str	r3, [sp, #8]
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 f80f 	bl	8003d44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d26:	69f8      	ldr	r0, [r7, #28]
 8003d28:	f000 f8b4 	bl	8003e94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	e002      	b.n	8003d38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d38:	69bb      	ldr	r3, [r7, #24]
	}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3720      	adds	r7, #32
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
	...

08003d44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	21a5      	movs	r1, #165	@ 0xa5
 8003d5e:	f001 fdbb 	bl	80058d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f023 0307 	bic.w	r3, r3, #7
 8003d7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	f003 0307 	and.w	r3, r3, #7
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00b      	beq.n	8003d9e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	617b      	str	r3, [r7, #20]
}
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d01f      	beq.n	8003de4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	e012      	b.n	8003dd0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	7819      	ldrb	r1, [r3, #0]
 8003db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	4413      	add	r3, r2
 8003db8:	3334      	adds	r3, #52	@ 0x34
 8003dba:	460a      	mov	r2, r1
 8003dbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	61fb      	str	r3, [r7, #28]
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d9e9      	bls.n	8003daa <prvInitialiseNewTask+0x66>
 8003dd6:	e000      	b.n	8003dda <prvInitialiseNewTask+0x96>
			{
				break;
 8003dd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003de2:	e003      	b.n	8003dec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dee:	2b37      	cmp	r3, #55	@ 0x37
 8003df0:	d901      	bls.n	8003df6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003df2:	2337      	movs	r3, #55	@ 0x37
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e00:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e04:	2200      	movs	r2, #0
 8003e06:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff f96a 	bl	80030e6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	3318      	adds	r3, #24
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff f965 	bl	80030e6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e20:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e24:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e30:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e44:	3354      	adds	r3, #84	@ 0x54
 8003e46:	224c      	movs	r2, #76	@ 0x4c
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fd44 	bl	80058d8 <memset>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e52:	4a0d      	ldr	r2, [pc, #52]	@ (8003e88 <prvInitialiseNewTask+0x144>)
 8003e54:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e58:	4a0c      	ldr	r2, [pc, #48]	@ (8003e8c <prvInitialiseNewTask+0x148>)
 8003e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e5e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e90 <prvInitialiseNewTask+0x14c>)
 8003e60:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	68f9      	ldr	r1, [r7, #12]
 8003e66:	69b8      	ldr	r0, [r7, #24]
 8003e68:	f001 f954 	bl	8005114 <pxPortInitialiseStack>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e70:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e7e:	bf00      	nop
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20001f60 	.word	0x20001f60
 8003e8c:	20001fc8 	.word	0x20001fc8
 8003e90:	20002030 	.word	0x20002030

08003e94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e9c:	f001 fa2e 	bl	80052fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ea0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f58 <prvAddNewTaskToReadyList+0xc4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8003f58 <prvAddNewTaskToReadyList+0xc4>)
 8003ea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8003f5c <prvAddNewTaskToReadyList+0xc8>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d109      	bne.n	8003ec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003eb2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f5c <prvAddNewTaskToReadyList+0xc8>)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003eb8:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <prvAddNewTaskToReadyList+0xc4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d110      	bne.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ec0:	f000 fc2a 	bl	8004718 <prvInitialiseTaskLists>
 8003ec4:	e00d      	b.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ec6:	4b26      	ldr	r3, [pc, #152]	@ (8003f60 <prvAddNewTaskToReadyList+0xcc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003ece:	4b23      	ldr	r3, [pc, #140]	@ (8003f5c <prvAddNewTaskToReadyList+0xc8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d802      	bhi.n	8003ee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003edc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f5c <prvAddNewTaskToReadyList+0xc8>)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003ee2:	4b20      	ldr	r3, [pc, #128]	@ (8003f64 <prvAddNewTaskToReadyList+0xd0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8003f64 <prvAddNewTaskToReadyList+0xd0>)
 8003eea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003eec:	4b1d      	ldr	r3, [pc, #116]	@ (8003f64 <prvAddNewTaskToReadyList+0xd0>)
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f68 <prvAddNewTaskToReadyList+0xd4>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d903      	bls.n	8003f08 <prvAddNewTaskToReadyList+0x74>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <prvAddNewTaskToReadyList+0xd4>)
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4a15      	ldr	r2, [pc, #84]	@ (8003f6c <prvAddNewTaskToReadyList+0xd8>)
 8003f16:	441a      	add	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f7ff f8ed 	bl	80030fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003f24:	f001 fa1a 	bl	800535c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003f28:	4b0d      	ldr	r3, [pc, #52]	@ (8003f60 <prvAddNewTaskToReadyList+0xcc>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00e      	beq.n	8003f4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003f30:	4b0a      	ldr	r3, [pc, #40]	@ (8003f5c <prvAddNewTaskToReadyList+0xc8>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d207      	bcs.n	8003f4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <prvAddNewTaskToReadyList+0xdc>)
 8003f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200011e0 	.word	0x200011e0
 8003f5c:	20000d0c 	.word	0x20000d0c
 8003f60:	200011ec 	.word	0x200011ec
 8003f64:	200011fc 	.word	0x200011fc
 8003f68:	200011e8 	.word	0x200011e8
 8003f6c:	20000d10 	.word	0x20000d10
 8003f70:	e000ed04 	.word	0xe000ed04

08003f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d018      	beq.n	8003fb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f86:	4b14      	ldr	r3, [pc, #80]	@ (8003fd8 <vTaskDelay+0x64>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00b      	beq.n	8003fa6 <vTaskDelay+0x32>
	__asm volatile
 8003f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	60bb      	str	r3, [r7, #8]
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	e7fd      	b.n	8003fa2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003fa6:	f000 f88b 	bl	80040c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003faa:	2100      	movs	r1, #0
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fd05 	bl	80049bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003fb2:	f000 f893 	bl	80040dc <xTaskResumeAll>
 8003fb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d107      	bne.n	8003fce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003fbe:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <vTaskDelay+0x68>)
 8003fc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	20001208 	.word	0x20001208
 8003fdc:	e000ed04 	.word	0xe000ed04

08003fe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08a      	sub	sp, #40	@ 0x28
 8003fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fee:	463a      	mov	r2, r7
 8003ff0:	1d39      	adds	r1, r7, #4
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff f824 	bl	8003044 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	9202      	str	r2, [sp, #8]
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	2300      	movs	r3, #0
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	460a      	mov	r2, r1
 800400e:	4924      	ldr	r1, [pc, #144]	@ (80040a0 <vTaskStartScheduler+0xc0>)
 8004010:	4824      	ldr	r0, [pc, #144]	@ (80040a4 <vTaskStartScheduler+0xc4>)
 8004012:	f7ff fdf1 	bl	8003bf8 <xTaskCreateStatic>
 8004016:	4603      	mov	r3, r0
 8004018:	4a23      	ldr	r2, [pc, #140]	@ (80040a8 <vTaskStartScheduler+0xc8>)
 800401a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800401c:	4b22      	ldr	r3, [pc, #136]	@ (80040a8 <vTaskStartScheduler+0xc8>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d002      	beq.n	800402a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004024:	2301      	movs	r3, #1
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	e001      	b.n	800402e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d102      	bne.n	800403a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004034:	f000 fd16 	bl	8004a64 <xTimerCreateTimerTask>
 8004038:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11b      	bne.n	8004078 <vTaskStartScheduler+0x98>
	__asm volatile
 8004040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004044:	f383 8811 	msr	BASEPRI, r3
 8004048:	f3bf 8f6f 	isb	sy
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	613b      	str	r3, [r7, #16]
}
 8004052:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004054:	4b15      	ldr	r3, [pc, #84]	@ (80040ac <vTaskStartScheduler+0xcc>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3354      	adds	r3, #84	@ 0x54
 800405a:	4a15      	ldr	r2, [pc, #84]	@ (80040b0 <vTaskStartScheduler+0xd0>)
 800405c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800405e:	4b15      	ldr	r3, [pc, #84]	@ (80040b4 <vTaskStartScheduler+0xd4>)
 8004060:	f04f 32ff 	mov.w	r2, #4294967295
 8004064:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004066:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <vTaskStartScheduler+0xd8>)
 8004068:	2201      	movs	r2, #1
 800406a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800406c:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <vTaskStartScheduler+0xdc>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004072:	f001 f8d1 	bl	8005218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004076:	e00f      	b.n	8004098 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407e:	d10b      	bne.n	8004098 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	60fb      	str	r3, [r7, #12]
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <vTaskStartScheduler+0xb4>
}
 8004098:	bf00      	nop
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	08005ad8 	.word	0x08005ad8
 80040a4:	080046e9 	.word	0x080046e9
 80040a8:	20001204 	.word	0x20001204
 80040ac:	20000d0c 	.word	0x20000d0c
 80040b0:	20000010 	.word	0x20000010
 80040b4:	20001200 	.word	0x20001200
 80040b8:	200011ec 	.word	0x200011ec
 80040bc:	200011e4 	.word	0x200011e4

080040c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80040c4:	4b04      	ldr	r3, [pc, #16]	@ (80040d8 <vTaskSuspendAll+0x18>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	4a03      	ldr	r2, [pc, #12]	@ (80040d8 <vTaskSuspendAll+0x18>)
 80040cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80040ce:	bf00      	nop
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20001208 	.word	0x20001208

080040dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80040ea:	4b42      	ldr	r3, [pc, #264]	@ (80041f4 <xTaskResumeAll+0x118>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10b      	bne.n	800410a <xTaskResumeAll+0x2e>
	__asm volatile
 80040f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f6:	f383 8811 	msr	BASEPRI, r3
 80040fa:	f3bf 8f6f 	isb	sy
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	603b      	str	r3, [r7, #0]
}
 8004104:	bf00      	nop
 8004106:	bf00      	nop
 8004108:	e7fd      	b.n	8004106 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800410a:	f001 f8f7 	bl	80052fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800410e:	4b39      	ldr	r3, [pc, #228]	@ (80041f4 <xTaskResumeAll+0x118>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3b01      	subs	r3, #1
 8004114:	4a37      	ldr	r2, [pc, #220]	@ (80041f4 <xTaskResumeAll+0x118>)
 8004116:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004118:	4b36      	ldr	r3, [pc, #216]	@ (80041f4 <xTaskResumeAll+0x118>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d162      	bne.n	80041e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004120:	4b35      	ldr	r3, [pc, #212]	@ (80041f8 <xTaskResumeAll+0x11c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d05e      	beq.n	80041e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004128:	e02f      	b.n	800418a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800412a:	4b34      	ldr	r3, [pc, #208]	@ (80041fc <xTaskResumeAll+0x120>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	3318      	adds	r3, #24
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff f83c 	bl	80031b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3304      	adds	r3, #4
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff f837 	bl	80031b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800414a:	4b2d      	ldr	r3, [pc, #180]	@ (8004200 <xTaskResumeAll+0x124>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	429a      	cmp	r2, r3
 8004150:	d903      	bls.n	800415a <xTaskResumeAll+0x7e>
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004156:	4a2a      	ldr	r2, [pc, #168]	@ (8004200 <xTaskResumeAll+0x124>)
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4a27      	ldr	r2, [pc, #156]	@ (8004204 <xTaskResumeAll+0x128>)
 8004168:	441a      	add	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3304      	adds	r3, #4
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f7fe ffc4 	bl	80030fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417a:	4b23      	ldr	r3, [pc, #140]	@ (8004208 <xTaskResumeAll+0x12c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004184:	4b21      	ldr	r3, [pc, #132]	@ (800420c <xTaskResumeAll+0x130>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800418a:	4b1c      	ldr	r3, [pc, #112]	@ (80041fc <xTaskResumeAll+0x120>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1cb      	bne.n	800412a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004198:	f000 fb62 	bl	8004860 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800419c:	4b1c      	ldr	r3, [pc, #112]	@ (8004210 <xTaskResumeAll+0x134>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80041a8:	f000 f844 	bl	8004234 <xTaskIncrementTick>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d002      	beq.n	80041b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80041b2:	4b16      	ldr	r3, [pc, #88]	@ (800420c <xTaskResumeAll+0x130>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1f1      	bne.n	80041a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <xTaskResumeAll+0x134>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80041ca:	4b10      	ldr	r3, [pc, #64]	@ (800420c <xTaskResumeAll+0x130>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d009      	beq.n	80041e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80041d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004214 <xTaskResumeAll+0x138>)
 80041d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041e6:	f001 f8b9 	bl	800535c <vPortExitCritical>

	return xAlreadyYielded;
 80041ea:	68bb      	ldr	r3, [r7, #8]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20001208 	.word	0x20001208
 80041f8:	200011e0 	.word	0x200011e0
 80041fc:	200011a0 	.word	0x200011a0
 8004200:	200011e8 	.word	0x200011e8
 8004204:	20000d10 	.word	0x20000d10
 8004208:	20000d0c 	.word	0x20000d0c
 800420c:	200011f4 	.word	0x200011f4
 8004210:	200011f0 	.word	0x200011f0
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800421e:	4b04      	ldr	r3, [pc, #16]	@ (8004230 <xTaskGetTickCount+0x18>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004224:	687b      	ldr	r3, [r7, #4]
}
 8004226:	4618      	mov	r0, r3
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	200011e4 	.word	0x200011e4

08004234 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800423a:	2300      	movs	r3, #0
 800423c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800423e:	4b4f      	ldr	r3, [pc, #316]	@ (800437c <xTaskIncrementTick+0x148>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 8090 	bne.w	8004368 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004248:	4b4d      	ldr	r3, [pc, #308]	@ (8004380 <xTaskIncrementTick+0x14c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3301      	adds	r3, #1
 800424e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004250:	4a4b      	ldr	r2, [pc, #300]	@ (8004380 <xTaskIncrementTick+0x14c>)
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d121      	bne.n	80042a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800425c:	4b49      	ldr	r3, [pc, #292]	@ (8004384 <xTaskIncrementTick+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00b      	beq.n	800427e <xTaskIncrementTick+0x4a>
	__asm volatile
 8004266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426a:	f383 8811 	msr	BASEPRI, r3
 800426e:	f3bf 8f6f 	isb	sy
 8004272:	f3bf 8f4f 	dsb	sy
 8004276:	603b      	str	r3, [r7, #0]
}
 8004278:	bf00      	nop
 800427a:	bf00      	nop
 800427c:	e7fd      	b.n	800427a <xTaskIncrementTick+0x46>
 800427e:	4b41      	ldr	r3, [pc, #260]	@ (8004384 <xTaskIncrementTick+0x150>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	60fb      	str	r3, [r7, #12]
 8004284:	4b40      	ldr	r3, [pc, #256]	@ (8004388 <xTaskIncrementTick+0x154>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a3e      	ldr	r2, [pc, #248]	@ (8004384 <xTaskIncrementTick+0x150>)
 800428a:	6013      	str	r3, [r2, #0]
 800428c:	4a3e      	ldr	r2, [pc, #248]	@ (8004388 <xTaskIncrementTick+0x154>)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	4b3e      	ldr	r3, [pc, #248]	@ (800438c <xTaskIncrementTick+0x158>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3301      	adds	r3, #1
 8004298:	4a3c      	ldr	r2, [pc, #240]	@ (800438c <xTaskIncrementTick+0x158>)
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	f000 fae0 	bl	8004860 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80042a0:	4b3b      	ldr	r3, [pc, #236]	@ (8004390 <xTaskIncrementTick+0x15c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d349      	bcc.n	800433e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042aa:	4b36      	ldr	r3, [pc, #216]	@ (8004384 <xTaskIncrementTick+0x150>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042b4:	4b36      	ldr	r3, [pc, #216]	@ (8004390 <xTaskIncrementTick+0x15c>)
 80042b6:	f04f 32ff 	mov.w	r2, #4294967295
 80042ba:	601a      	str	r2, [r3, #0]
					break;
 80042bc:	e03f      	b.n	800433e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042be:	4b31      	ldr	r3, [pc, #196]	@ (8004384 <xTaskIncrementTick+0x150>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d203      	bcs.n	80042de <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80042d6:	4a2e      	ldr	r2, [pc, #184]	@ (8004390 <xTaskIncrementTick+0x15c>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80042dc:	e02f      	b.n	800433e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3304      	adds	r3, #4
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fe ff66 	bl	80031b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3318      	adds	r3, #24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fe ff5d 	bl	80031b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fe:	4b25      	ldr	r3, [pc, #148]	@ (8004394 <xTaskIncrementTick+0x160>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d903      	bls.n	800430e <xTaskIncrementTick+0xda>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430a:	4a22      	ldr	r2, [pc, #136]	@ (8004394 <xTaskIncrementTick+0x160>)
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	4613      	mov	r3, r2
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4a1f      	ldr	r2, [pc, #124]	@ (8004398 <xTaskIncrementTick+0x164>)
 800431c:	441a      	add	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3304      	adds	r3, #4
 8004322:	4619      	mov	r1, r3
 8004324:	4610      	mov	r0, r2
 8004326:	f7fe feea 	bl	80030fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	4b1b      	ldr	r3, [pc, #108]	@ (800439c <xTaskIncrementTick+0x168>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	429a      	cmp	r2, r3
 8004336:	d3b8      	bcc.n	80042aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004338:	2301      	movs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800433c:	e7b5      	b.n	80042aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800433e:	4b17      	ldr	r3, [pc, #92]	@ (800439c <xTaskIncrementTick+0x168>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004344:	4914      	ldr	r1, [pc, #80]	@ (8004398 <xTaskIncrementTick+0x164>)
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d901      	bls.n	800435a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004356:	2301      	movs	r3, #1
 8004358:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800435a:	4b11      	ldr	r3, [pc, #68]	@ (80043a0 <xTaskIncrementTick+0x16c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d007      	beq.n	8004372 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004362:	2301      	movs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e004      	b.n	8004372 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004368:	4b0e      	ldr	r3, [pc, #56]	@ (80043a4 <xTaskIncrementTick+0x170>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3301      	adds	r3, #1
 800436e:	4a0d      	ldr	r2, [pc, #52]	@ (80043a4 <xTaskIncrementTick+0x170>)
 8004370:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004372:	697b      	ldr	r3, [r7, #20]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20001208 	.word	0x20001208
 8004380:	200011e4 	.word	0x200011e4
 8004384:	20001198 	.word	0x20001198
 8004388:	2000119c 	.word	0x2000119c
 800438c:	200011f8 	.word	0x200011f8
 8004390:	20001200 	.word	0x20001200
 8004394:	200011e8 	.word	0x200011e8
 8004398:	20000d10 	.word	0x20000d10
 800439c:	20000d0c 	.word	0x20000d0c
 80043a0:	200011f4 	.word	0x200011f4
 80043a4:	200011f0 	.word	0x200011f0

080043a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80043ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004458 <vTaskSwitchContext+0xb0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80043b6:	4b29      	ldr	r3, [pc, #164]	@ (800445c <vTaskSwitchContext+0xb4>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80043bc:	e047      	b.n	800444e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80043be:	4b27      	ldr	r3, [pc, #156]	@ (800445c <vTaskSwitchContext+0xb4>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c4:	4b26      	ldr	r3, [pc, #152]	@ (8004460 <vTaskSwitchContext+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e011      	b.n	80043f0 <vTaskSwitchContext+0x48>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10b      	bne.n	80043ea <vTaskSwitchContext+0x42>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d6:	f383 8811 	msr	BASEPRI, r3
 80043da:	f3bf 8f6f 	isb	sy
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	607b      	str	r3, [r7, #4]
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop
 80043e8:	e7fd      	b.n	80043e6 <vTaskSwitchContext+0x3e>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	491c      	ldr	r1, [pc, #112]	@ (8004464 <vTaskSwitchContext+0xbc>)
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0e3      	beq.n	80043cc <vTaskSwitchContext+0x24>
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4613      	mov	r3, r2
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4a15      	ldr	r2, [pc, #84]	@ (8004464 <vTaskSwitchContext+0xbc>)
 8004410:	4413      	add	r3, r2
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	3308      	adds	r3, #8
 8004426:	429a      	cmp	r2, r3
 8004428:	d104      	bne.n	8004434 <vTaskSwitchContext+0x8c>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4a0b      	ldr	r2, [pc, #44]	@ (8004468 <vTaskSwitchContext+0xc0>)
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	4a08      	ldr	r2, [pc, #32]	@ (8004460 <vTaskSwitchContext+0xb8>)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004444:	4b08      	ldr	r3, [pc, #32]	@ (8004468 <vTaskSwitchContext+0xc0>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3354      	adds	r3, #84	@ 0x54
 800444a:	4a08      	ldr	r2, [pc, #32]	@ (800446c <vTaskSwitchContext+0xc4>)
 800444c:	6013      	str	r3, [r2, #0]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	20001208 	.word	0x20001208
 800445c:	200011f4 	.word	0x200011f4
 8004460:	200011e8 	.word	0x200011e8
 8004464:	20000d10 	.word	0x20000d10
 8004468:	20000d0c 	.word	0x20000d0c
 800446c:	20000010 	.word	0x20000010

08004470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60fb      	str	r3, [r7, #12]
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004498:	4b07      	ldr	r3, [pc, #28]	@ (80044b8 <vTaskPlaceOnEventList+0x48>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3318      	adds	r3, #24
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7fe fe4f 	bl	8003144 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80044a6:	2101      	movs	r1, #1
 80044a8:	6838      	ldr	r0, [r7, #0]
 80044aa:	f000 fa87 	bl	80049bc <prvAddCurrentTaskToDelayedList>
}
 80044ae:	bf00      	nop
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	20000d0c 	.word	0x20000d0c

080044bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	617b      	str	r3, [r7, #20]
}
 80044e0:	bf00      	nop
 80044e2:	bf00      	nop
 80044e4:	e7fd      	b.n	80044e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80044e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <vTaskPlaceOnEventListRestricted+0x54>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	3318      	adds	r3, #24
 80044ec:	4619      	mov	r1, r3
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	f7fe fe05 	bl	80030fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80044fa:	f04f 33ff 	mov.w	r3, #4294967295
 80044fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	68b8      	ldr	r0, [r7, #8]
 8004504:	f000 fa5a 	bl	80049bc <prvAddCurrentTaskToDelayedList>
	}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	20000d0c 	.word	0x20000d0c

08004514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10b      	bne.n	8004542 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800452a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	60fb      	str	r3, [r7, #12]
}
 800453c:	bf00      	nop
 800453e:	bf00      	nop
 8004540:	e7fd      	b.n	800453e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	3318      	adds	r3, #24
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fe34 	bl	80031b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800454c:	4b1d      	ldr	r3, [pc, #116]	@ (80045c4 <xTaskRemoveFromEventList+0xb0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11d      	bne.n	8004590 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe fe2b 	bl	80031b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004562:	4b19      	ldr	r3, [pc, #100]	@ (80045c8 <xTaskRemoveFromEventList+0xb4>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d903      	bls.n	8004572 <xTaskRemoveFromEventList+0x5e>
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	4a16      	ldr	r2, [pc, #88]	@ (80045c8 <xTaskRemoveFromEventList+0xb4>)
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a13      	ldr	r2, [pc, #76]	@ (80045cc <xTaskRemoveFromEventList+0xb8>)
 8004580:	441a      	add	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3304      	adds	r3, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f7fe fdb8 	bl	80030fe <vListInsertEnd>
 800458e:	e005      	b.n	800459c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	3318      	adds	r3, #24
 8004594:	4619      	mov	r1, r3
 8004596:	480e      	ldr	r0, [pc, #56]	@ (80045d0 <xTaskRemoveFromEventList+0xbc>)
 8004598:	f7fe fdb1 	bl	80030fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a0:	4b0c      	ldr	r3, [pc, #48]	@ (80045d4 <xTaskRemoveFromEventList+0xc0>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d905      	bls.n	80045b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80045aa:	2301      	movs	r3, #1
 80045ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80045ae:	4b0a      	ldr	r3, [pc, #40]	@ (80045d8 <xTaskRemoveFromEventList+0xc4>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e001      	b.n	80045ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80045ba:	697b      	ldr	r3, [r7, #20]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20001208 	.word	0x20001208
 80045c8:	200011e8 	.word	0x200011e8
 80045cc:	20000d10 	.word	0x20000d10
 80045d0:	200011a0 	.word	0x200011a0
 80045d4:	20000d0c 	.word	0x20000d0c
 80045d8:	200011f4 	.word	0x200011f4

080045dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80045e4:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <vTaskInternalSetTimeOutState+0x24>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80045ec:	4b05      	ldr	r3, [pc, #20]	@ (8004604 <vTaskInternalSetTimeOutState+0x28>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	605a      	str	r2, [r3, #4]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	200011f8 	.word	0x200011f8
 8004604:	200011e4 	.word	0x200011e4

08004608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10b      	bne.n	8004630 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	613b      	str	r3, [r7, #16]
}
 800462a:	bf00      	nop
 800462c:	bf00      	nop
 800462e:	e7fd      	b.n	800462c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60fb      	str	r3, [r7, #12]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800464e:	f000 fe55 	bl	80052fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004652:	4b1d      	ldr	r3, [pc, #116]	@ (80046c8 <xTaskCheckForTimeOut+0xc0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800466a:	d102      	bne.n	8004672 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800466c:	2300      	movs	r3, #0
 800466e:	61fb      	str	r3, [r7, #28]
 8004670:	e023      	b.n	80046ba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4b15      	ldr	r3, [pc, #84]	@ (80046cc <xTaskCheckForTimeOut+0xc4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d007      	beq.n	800468e <xTaskCheckForTimeOut+0x86>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	429a      	cmp	r2, r3
 8004686:	d302      	bcc.n	800468e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	e015      	b.n	80046ba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	429a      	cmp	r2, r3
 8004696:	d20b      	bcs.n	80046b0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f7ff ff99 	bl	80045dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61fb      	str	r3, [r7, #28]
 80046ae:	e004      	b.n	80046ba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80046ba:	f000 fe4f 	bl	800535c <vPortExitCritical>

	return xReturn;
 80046be:	69fb      	ldr	r3, [r7, #28]
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3720      	adds	r7, #32
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200011e4 	.word	0x200011e4
 80046cc:	200011f8 	.word	0x200011f8

080046d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80046d4:	4b03      	ldr	r3, [pc, #12]	@ (80046e4 <vTaskMissedYield+0x14>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
}
 80046da:	bf00      	nop
 80046dc:	46bd      	mov	sp, r7
 80046de:	bc80      	pop	{r7}
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	200011f4 	.word	0x200011f4

080046e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80046f0:	f000 f852 	bl	8004798 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <prvIdleTask+0x28>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d9f9      	bls.n	80046f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <prvIdleTask+0x2c>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800470c:	e7f0      	b.n	80046f0 <prvIdleTask+0x8>
 800470e:	bf00      	nop
 8004710:	20000d10 	.word	0x20000d10
 8004714:	e000ed04 	.word	0xe000ed04

08004718 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800471e:	2300      	movs	r3, #0
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e00c      	b.n	800473e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4a12      	ldr	r2, [pc, #72]	@ (8004778 <prvInitialiseTaskLists+0x60>)
 8004730:	4413      	add	r3, r2
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fcb8 	bl	80030a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	3301      	adds	r3, #1
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b37      	cmp	r3, #55	@ 0x37
 8004742:	d9ef      	bls.n	8004724 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004744:	480d      	ldr	r0, [pc, #52]	@ (800477c <prvInitialiseTaskLists+0x64>)
 8004746:	f7fe fcaf 	bl	80030a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800474a:	480d      	ldr	r0, [pc, #52]	@ (8004780 <prvInitialiseTaskLists+0x68>)
 800474c:	f7fe fcac 	bl	80030a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004750:	480c      	ldr	r0, [pc, #48]	@ (8004784 <prvInitialiseTaskLists+0x6c>)
 8004752:	f7fe fca9 	bl	80030a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004756:	480c      	ldr	r0, [pc, #48]	@ (8004788 <prvInitialiseTaskLists+0x70>)
 8004758:	f7fe fca6 	bl	80030a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800475c:	480b      	ldr	r0, [pc, #44]	@ (800478c <prvInitialiseTaskLists+0x74>)
 800475e:	f7fe fca3 	bl	80030a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <prvInitialiseTaskLists+0x78>)
 8004764:	4a05      	ldr	r2, [pc, #20]	@ (800477c <prvInitialiseTaskLists+0x64>)
 8004766:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004768:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <prvInitialiseTaskLists+0x7c>)
 800476a:	4a05      	ldr	r2, [pc, #20]	@ (8004780 <prvInitialiseTaskLists+0x68>)
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000d10 	.word	0x20000d10
 800477c:	20001170 	.word	0x20001170
 8004780:	20001184 	.word	0x20001184
 8004784:	200011a0 	.word	0x200011a0
 8004788:	200011b4 	.word	0x200011b4
 800478c:	200011cc 	.word	0x200011cc
 8004790:	20001198 	.word	0x20001198
 8004794:	2000119c 	.word	0x2000119c

08004798 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800479e:	e019      	b.n	80047d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047a0:	f000 fdac 	bl	80052fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a4:	4b10      	ldr	r3, [pc, #64]	@ (80047e8 <prvCheckTasksWaitingTermination+0x50>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3304      	adds	r3, #4
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fe fcff 	bl	80031b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047b6:	4b0d      	ldr	r3, [pc, #52]	@ (80047ec <prvCheckTasksWaitingTermination+0x54>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	4a0b      	ldr	r2, [pc, #44]	@ (80047ec <prvCheckTasksWaitingTermination+0x54>)
 80047be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <prvCheckTasksWaitingTermination+0x58>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	4a0a      	ldr	r2, [pc, #40]	@ (80047f0 <prvCheckTasksWaitingTermination+0x58>)
 80047c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047ca:	f000 fdc7 	bl	800535c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f810 	bl	80047f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d4:	4b06      	ldr	r3, [pc, #24]	@ (80047f0 <prvCheckTasksWaitingTermination+0x58>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1e1      	bne.n	80047a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047dc:	bf00      	nop
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	200011b4 	.word	0x200011b4
 80047ec:	200011e0 	.word	0x200011e0
 80047f0:	200011c8 	.word	0x200011c8

080047f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3354      	adds	r3, #84	@ 0x54
 8004800:	4618      	mov	r0, r3
 8004802:	f001 f871 	bl	80058e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800480c:	2b00      	cmp	r3, #0
 800480e:	d108      	bne.n	8004822 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	4618      	mov	r0, r3
 8004816:	f000 ff41 	bl	800569c <vPortFree>
				vPortFree( pxTCB );
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 ff3e 	bl	800569c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004820:	e019      	b.n	8004856 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004828:	2b01      	cmp	r3, #1
 800482a:	d103      	bne.n	8004834 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 ff35 	bl	800569c <vPortFree>
	}
 8004832:	e010      	b.n	8004856 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800483a:	2b02      	cmp	r3, #2
 800483c:	d00b      	beq.n	8004856 <prvDeleteTCB+0x62>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60fb      	str	r3, [r7, #12]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <prvDeleteTCB+0x5e>
	}
 8004856:	bf00      	nop
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
	...

08004860 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004866:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <prvResetNextTaskUnblockTime+0x38>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004870:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <prvResetNextTaskUnblockTime+0x3c>)
 8004872:	f04f 32ff 	mov.w	r2, #4294967295
 8004876:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004878:	e008      	b.n	800488c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800487a:	4b07      	ldr	r3, [pc, #28]	@ (8004898 <prvResetNextTaskUnblockTime+0x38>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	4a04      	ldr	r2, [pc, #16]	@ (800489c <prvResetNextTaskUnblockTime+0x3c>)
 800488a:	6013      	str	r3, [r2, #0]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	bc80      	pop	{r7}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	20001198 	.word	0x20001198
 800489c:	20001200 	.word	0x20001200

080048a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048a6:	4b0b      	ldr	r3, [pc, #44]	@ (80048d4 <xTaskGetSchedulerState+0x34>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d102      	bne.n	80048b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048ae:	2301      	movs	r3, #1
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	e008      	b.n	80048c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048b4:	4b08      	ldr	r3, [pc, #32]	@ (80048d8 <xTaskGetSchedulerState+0x38>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d102      	bne.n	80048c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048bc:	2302      	movs	r3, #2
 80048be:	607b      	str	r3, [r7, #4]
 80048c0:	e001      	b.n	80048c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048c2:	2300      	movs	r3, #0
 80048c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048c6:	687b      	ldr	r3, [r7, #4]
	}
 80048c8:	4618      	mov	r0, r3
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	200011ec 	.word	0x200011ec
 80048d8:	20001208 	.word	0x20001208

080048dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d058      	beq.n	80049a4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80048f2:	4b2f      	ldr	r3, [pc, #188]	@ (80049b0 <xTaskPriorityDisinherit+0xd4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d00b      	beq.n	8004914 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	60fb      	str	r3, [r7, #12]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	60bb      	str	r3, [r7, #8]
}
 800492e:	bf00      	nop
 8004930:	bf00      	nop
 8004932:	e7fd      	b.n	8004930 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004938:	1e5a      	subs	r2, r3, #1
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004946:	429a      	cmp	r2, r3
 8004948:	d02c      	beq.n	80049a4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494e:	2b00      	cmp	r3, #0
 8004950:	d128      	bne.n	80049a4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	3304      	adds	r3, #4
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fc2c 	bl	80031b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004968:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004974:	4b0f      	ldr	r3, [pc, #60]	@ (80049b4 <xTaskPriorityDisinherit+0xd8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d903      	bls.n	8004984 <xTaskPriorityDisinherit+0xa8>
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004980:	4a0c      	ldr	r2, [pc, #48]	@ (80049b4 <xTaskPriorityDisinherit+0xd8>)
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a09      	ldr	r2, [pc, #36]	@ (80049b8 <xTaskPriorityDisinherit+0xdc>)
 8004992:	441a      	add	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f7fe fbaf 	bl	80030fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80049a0:	2301      	movs	r3, #1
 80049a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049a4:	697b      	ldr	r3, [r7, #20]
	}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000d0c 	.word	0x20000d0c
 80049b4:	200011e8 	.word	0x200011e8
 80049b8:	20000d10 	.word	0x20000d10

080049bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80049c6:	4b21      	ldr	r3, [pc, #132]	@ (8004a4c <prvAddCurrentTaskToDelayedList+0x90>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049cc:	4b20      	ldr	r3, [pc, #128]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3304      	adds	r3, #4
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7fe fbee 	bl	80031b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049de:	d10a      	bne.n	80049f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049e6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0x94>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4819      	ldr	r0, [pc, #100]	@ (8004a54 <prvAddCurrentTaskToDelayedList+0x98>)
 80049f0:	f7fe fb85 	bl	80030fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80049f4:	e026      	b.n	8004a44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80049fe:	4b14      	ldr	r3, [pc, #80]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d209      	bcs.n	8004a22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a0e:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f7fe fb92 	bl	8003144 <vListInsert>
}
 8004a20:	e010      	b.n	8004a44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a22:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	f7fe fb88 	bl	8003144 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004a34:	4b0a      	ldr	r3, [pc, #40]	@ (8004a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d202      	bcs.n	8004a44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004a3e:	4a08      	ldr	r2, [pc, #32]	@ (8004a60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6013      	str	r3, [r2, #0]
}
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	200011e4 	.word	0x200011e4
 8004a50:	20000d0c 	.word	0x20000d0c
 8004a54:	200011cc 	.word	0x200011cc
 8004a58:	2000119c 	.word	0x2000119c
 8004a5c:	20001198 	.word	0x20001198
 8004a60:	20001200 	.word	0x20001200

08004a64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	@ 0x28
 8004a68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004a6e:	f000 fb11 	bl	8005094 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a72:	4b1d      	ldr	r3, [pc, #116]	@ (8004ae8 <xTimerCreateTimerTask+0x84>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a82:	1d3a      	adds	r2, r7, #4
 8004a84:	f107 0108 	add.w	r1, r7, #8
 8004a88:	f107 030c 	add.w	r3, r7, #12
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fe faf1 	bl	8003074 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	68fa      	ldr	r2, [r7, #12]
 8004a98:	9202      	str	r2, [sp, #8]
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	460a      	mov	r2, r1
 8004aa4:	4911      	ldr	r1, [pc, #68]	@ (8004aec <xTimerCreateTimerTask+0x88>)
 8004aa6:	4812      	ldr	r0, [pc, #72]	@ (8004af0 <xTimerCreateTimerTask+0x8c>)
 8004aa8:	f7ff f8a6 	bl	8003bf8 <xTaskCreateStatic>
 8004aac:	4603      	mov	r3, r0
 8004aae:	4a11      	ldr	r2, [pc, #68]	@ (8004af4 <xTimerCreateTimerTask+0x90>)
 8004ab0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ab2:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <xTimerCreateTimerTask+0x90>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004aba:	2301      	movs	r3, #1
 8004abc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d10b      	bne.n	8004adc <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ac8:	f383 8811 	msr	BASEPRI, r3
 8004acc:	f3bf 8f6f 	isb	sy
 8004ad0:	f3bf 8f4f 	dsb	sy
 8004ad4:	613b      	str	r3, [r7, #16]
}
 8004ad6:	bf00      	nop
 8004ad8:	bf00      	nop
 8004ada:	e7fd      	b.n	8004ad8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004adc:	697b      	ldr	r3, [r7, #20]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3718      	adds	r7, #24
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	2000123c 	.word	0x2000123c
 8004aec:	08005ae0 	.word	0x08005ae0
 8004af0:	08004c31 	.word	0x08004c31
 8004af4:	20001240 	.word	0x20001240

08004af8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b08a      	sub	sp, #40	@ 0x28
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <xTimerGenericCommand+0x30>
	__asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	623b      	str	r3, [r7, #32]
}
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004b28:	4b19      	ldr	r3, [pc, #100]	@ (8004b90 <xTimerGenericCommand+0x98>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d02a      	beq.n	8004b86 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b05      	cmp	r3, #5
 8004b40:	dc18      	bgt.n	8004b74 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004b42:	f7ff fead 	bl	80048a0 <xTaskGetSchedulerState>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d109      	bne.n	8004b60 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004b4c:	4b10      	ldr	r3, [pc, #64]	@ (8004b90 <xTimerGenericCommand+0x98>)
 8004b4e:	6818      	ldr	r0, [r3, #0]
 8004b50:	f107 0110 	add.w	r1, r7, #16
 8004b54:	2300      	movs	r3, #0
 8004b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b58:	f7fe fc60 	bl	800341c <xQueueGenericSend>
 8004b5c:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b5e:	e012      	b.n	8004b86 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004b60:	4b0b      	ldr	r3, [pc, #44]	@ (8004b90 <xTimerGenericCommand+0x98>)
 8004b62:	6818      	ldr	r0, [r3, #0]
 8004b64:	f107 0110 	add.w	r1, r7, #16
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f7fe fc56 	bl	800341c <xQueueGenericSend>
 8004b70:	6278      	str	r0, [r7, #36]	@ 0x24
 8004b72:	e008      	b.n	8004b86 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004b74:	4b06      	ldr	r3, [pc, #24]	@ (8004b90 <xTimerGenericCommand+0x98>)
 8004b76:	6818      	ldr	r0, [r3, #0]
 8004b78:	f107 0110 	add.w	r1, r7, #16
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	f7fe fd4e 	bl	8003620 <xQueueGenericSendFromISR>
 8004b84:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	@ 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	2000123c 	.word	0x2000123c

08004b94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b088      	sub	sp, #32
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9e:	4b23      	ldr	r3, [pc, #140]	@ (8004c2c <prvProcessExpiredTimer+0x98>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe fb01 	bl	80031b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d023      	beq.n	8004c08 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	699a      	ldr	r2, [r3, #24]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	18d1      	adds	r1, r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	6978      	ldr	r0, [r7, #20]
 8004bce:	f000 f8d3 	bl	8004d78 <prvInsertTimerInActiveList>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bd8:	2300      	movs	r3, #0
 8004bda:	9300      	str	r3, [sp, #0]
 8004bdc:	2300      	movs	r3, #0
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	2100      	movs	r1, #0
 8004be2:	6978      	ldr	r0, [r7, #20]
 8004be4:	f7ff ff88 	bl	8004af8 <xTimerGenericCommand>
 8004be8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d114      	bne.n	8004c1a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	60fb      	str	r3, [r7, #12]
}
 8004c02:	bf00      	nop
 8004c04:	bf00      	nop
 8004c06:	e7fd      	b.n	8004c04 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c0e:	f023 0301 	bic.w	r3, r3, #1
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	6978      	ldr	r0, [r7, #20]
 8004c20:	4798      	blx	r3
}
 8004c22:	bf00      	nop
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	20001234 	.word	0x20001234

08004c30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 f859 	bl	8004cf4 <prvGetNextExpireTime>
 8004c42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4619      	mov	r1, r3
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f805 	bl	8004c58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004c4e:	f000 f8d5 	bl	8004dfc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004c52:	bf00      	nop
 8004c54:	e7f0      	b.n	8004c38 <prvTimerTask+0x8>
	...

08004c58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004c62:	f7ff fa2d 	bl	80040c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f000 f864 	bl	8004d38 <prvSampleTimeNow>
 8004c70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d130      	bne.n	8004cda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <prvProcessTimerOrBlockTask+0x3c>
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d806      	bhi.n	8004c94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c86:	f7ff fa29 	bl	80040dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c8a:	68f9      	ldr	r1, [r7, #12]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff ff81 	bl	8004b94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c92:	e024      	b.n	8004cde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d008      	beq.n	8004cac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ce8 <prvProcessTimerOrBlockTask+0x90>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <prvProcessTimerOrBlockTask+0x50>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e000      	b.n	8004caa <prvProcessTimerOrBlockTask+0x52>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004cac:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <prvProcessTimerOrBlockTask+0x94>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	f7fe ff69 	bl	8003b90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004cbe:	f7ff fa0d 	bl	80040dc <xTaskResumeAll>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004cc8:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <prvProcessTimerOrBlockTask+0x98>)
 8004cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	f3bf 8f4f 	dsb	sy
 8004cd4:	f3bf 8f6f 	isb	sy
}
 8004cd8:	e001      	b.n	8004cde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004cda:	f7ff f9ff 	bl	80040dc <xTaskResumeAll>
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20001238 	.word	0x20001238
 8004cec:	2000123c 	.word	0x2000123c
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <prvGetNextExpireTime+0x40>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d101      	bne.n	8004d0a <prvGetNextExpireTime+0x16>
 8004d06:	2201      	movs	r2, #1
 8004d08:	e000      	b.n	8004d0c <prvGetNextExpireTime+0x18>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d18:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <prvGetNextExpireTime+0x40>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60fb      	str	r3, [r7, #12]
 8004d22:	e001      	b.n	8004d28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004d28:	68fb      	ldr	r3, [r7, #12]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	20001234 	.word	0x20001234

08004d38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004d40:	f7ff fa6a 	bl	8004218 <xTaskGetTickCount>
 8004d44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004d46:	4b0b      	ldr	r3, [pc, #44]	@ (8004d74 <prvSampleTimeNow+0x3c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d205      	bcs.n	8004d5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004d50:	f000 f93a 	bl	8004fc8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	e002      	b.n	8004d62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004d62:	4a04      	ldr	r2, [pc, #16]	@ (8004d74 <prvSampleTimeNow+0x3c>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004d68:	68fb      	ldr	r3, [r7, #12]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20001244 	.word	0x20001244

08004d78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d812      	bhi.n	8004dc4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	1ad2      	subs	r2, r2, r3
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d302      	bcc.n	8004db2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e01b      	b.n	8004dea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <prvInsertTimerInActiveList+0x7c>)
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	3304      	adds	r3, #4
 8004dba:	4619      	mov	r1, r3
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	f7fe f9c1 	bl	8003144 <vListInsert>
 8004dc2:	e012      	b.n	8004dea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d206      	bcs.n	8004dda <prvInsertTimerInActiveList+0x62>
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d302      	bcc.n	8004dda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	e007      	b.n	8004dea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dda:	4b07      	ldr	r3, [pc, #28]	@ (8004df8 <prvInsertTimerInActiveList+0x80>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3304      	adds	r3, #4
 8004de2:	4619      	mov	r1, r3
 8004de4:	4610      	mov	r0, r2
 8004de6:	f7fe f9ad 	bl	8003144 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004dea:	697b      	ldr	r3, [r7, #20]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	20001238 	.word	0x20001238
 8004df8:	20001234 	.word	0x20001234

08004dfc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b08e      	sub	sp, #56	@ 0x38
 8004e00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e02:	e0ce      	b.n	8004fa2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da19      	bge.n	8004e3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004e0a:	1d3b      	adds	r3, r7, #4
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d10b      	bne.n	8004e2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	61fb      	str	r3, [r7, #28]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e34:	6850      	ldr	r0, [r2, #4]
 8004e36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e38:	6892      	ldr	r2, [r2, #8]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f2c0 80ae 	blt.w	8004fa2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d004      	beq.n	8004e5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	3304      	adds	r3, #4
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7fe f9ac 	bl	80031b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e5c:	463b      	mov	r3, r7
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff ff6a 	bl	8004d38 <prvSampleTimeNow>
 8004e64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2b09      	cmp	r3, #9
 8004e6a:	f200 8097 	bhi.w	8004f9c <prvProcessReceivedCommands+0x1a0>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <prvProcessReceivedCommands+0x78>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004e9d 	.word	0x08004e9d
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004e9d 	.word	0x08004e9d
 8004e80:	08004f13 	.word	0x08004f13
 8004e84:	08004f27 	.word	0x08004f27
 8004e88:	08004f73 	.word	0x08004f73
 8004e8c:	08004e9d 	.word	0x08004e9d
 8004e90:	08004e9d 	.word	0x08004e9d
 8004e94:	08004f13 	.word	0x08004f13
 8004e98:	08004f27 	.word	0x08004f27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	18d1      	adds	r1, r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ebc:	f7ff ff5c 	bl	8004d78 <prvInsertTimerInActiveList>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d06c      	beq.n	8004fa0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ecc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d061      	beq.n	8004fa0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	441a      	add	r2, r3
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	2300      	movs	r3, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eee:	f7ff fe03 	bl	8004af8 <xTimerGenericCommand>
 8004ef2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d152      	bne.n	8004fa0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	61bb      	str	r3, [r7, #24]
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	b2da      	uxtb	r2, r3
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f24:	e03d      	b.n	8004fa2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10b      	bne.n	8004f5e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f60:	699a      	ldr	r2, [r3, #24]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f64:	18d1      	adds	r1, r2, r3
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f6c:	f7ff ff04 	bl	8004d78 <prvInsertTimerInActiveList>
					break;
 8004f70:	e017      	b.n	8004fa2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d103      	bne.n	8004f88 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004f80:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f82:	f000 fb8b 	bl	800569c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f86:	e00c      	b.n	8004fa2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f8e:	f023 0301 	bic.w	r3, r3, #1
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f9a:	e002      	b.n	8004fa2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004f9c:	bf00      	nop
 8004f9e:	e000      	b.n	8004fa2 <prvProcessReceivedCommands+0x1a6>
					break;
 8004fa0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004fa2:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <prvProcessReceivedCommands+0x1c8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	1d39      	adds	r1, r7, #4
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fe fbd6 	bl	800375c <xQueueReceive>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	f47f af26 	bne.w	8004e04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	3730      	adds	r7, #48	@ 0x30
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2000123c 	.word	0x2000123c

08004fc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fce:	e049      	b.n	8005064 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800508c <prvSwitchTimerLists+0xc4>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fda:	4b2c      	ldr	r3, [pc, #176]	@ (800508c <prvSwitchTimerLists+0xc4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe f8e3 	bl	80031b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ffc:	f003 0304 	and.w	r3, r3, #4
 8005000:	2b00      	cmp	r3, #0
 8005002:	d02f      	beq.n	8005064 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	4413      	add	r3, r2
 800500c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	429a      	cmp	r2, r3
 8005014:	d90e      	bls.n	8005034 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	68ba      	ldr	r2, [r7, #8]
 800501a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005022:	4b1a      	ldr	r3, [pc, #104]	@ (800508c <prvSwitchTimerLists+0xc4>)
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f7fe f889 	bl	8003144 <vListInsert>
 8005032:	e017      	b.n	8005064 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005034:	2300      	movs	r3, #0
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	2300      	movs	r3, #0
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	2100      	movs	r1, #0
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff fd5a 	bl	8004af8 <xTimerGenericCommand>
 8005044:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	603b      	str	r3, [r7, #0]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005064:	4b09      	ldr	r3, [pc, #36]	@ (800508c <prvSwitchTimerLists+0xc4>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1b0      	bne.n	8004fd0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800506e:	4b07      	ldr	r3, [pc, #28]	@ (800508c <prvSwitchTimerLists+0xc4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005074:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <prvSwitchTimerLists+0xc8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a04      	ldr	r2, [pc, #16]	@ (800508c <prvSwitchTimerLists+0xc4>)
 800507a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800507c:	4a04      	ldr	r2, [pc, #16]	@ (8005090 <prvSwitchTimerLists+0xc8>)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	6013      	str	r3, [r2, #0]
}
 8005082:	bf00      	nop
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	20001234 	.word	0x20001234
 8005090:	20001238 	.word	0x20001238

08005094 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b082      	sub	sp, #8
 8005098:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800509a:	f000 f92f 	bl	80052fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800509e:	4b15      	ldr	r3, [pc, #84]	@ (80050f4 <prvCheckForValidListAndQueue+0x60>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d120      	bne.n	80050e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80050a6:	4814      	ldr	r0, [pc, #80]	@ (80050f8 <prvCheckForValidListAndQueue+0x64>)
 80050a8:	f7fd fffe 	bl	80030a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80050ac:	4813      	ldr	r0, [pc, #76]	@ (80050fc <prvCheckForValidListAndQueue+0x68>)
 80050ae:	f7fd fffb 	bl	80030a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80050b2:	4b13      	ldr	r3, [pc, #76]	@ (8005100 <prvCheckForValidListAndQueue+0x6c>)
 80050b4:	4a10      	ldr	r2, [pc, #64]	@ (80050f8 <prvCheckForValidListAndQueue+0x64>)
 80050b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80050b8:	4b12      	ldr	r3, [pc, #72]	@ (8005104 <prvCheckForValidListAndQueue+0x70>)
 80050ba:	4a10      	ldr	r2, [pc, #64]	@ (80050fc <prvCheckForValidListAndQueue+0x68>)
 80050bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80050be:	2300      	movs	r3, #0
 80050c0:	9300      	str	r3, [sp, #0]
 80050c2:	4b11      	ldr	r3, [pc, #68]	@ (8005108 <prvCheckForValidListAndQueue+0x74>)
 80050c4:	4a11      	ldr	r2, [pc, #68]	@ (800510c <prvCheckForValidListAndQueue+0x78>)
 80050c6:	2110      	movs	r1, #16
 80050c8:	200a      	movs	r0, #10
 80050ca:	f7fe f907 	bl	80032dc <xQueueGenericCreateStatic>
 80050ce:	4603      	mov	r3, r0
 80050d0:	4a08      	ldr	r2, [pc, #32]	@ (80050f4 <prvCheckForValidListAndQueue+0x60>)
 80050d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80050d4:	4b07      	ldr	r3, [pc, #28]	@ (80050f4 <prvCheckForValidListAndQueue+0x60>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d005      	beq.n	80050e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80050dc:	4b05      	ldr	r3, [pc, #20]	@ (80050f4 <prvCheckForValidListAndQueue+0x60>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	490b      	ldr	r1, [pc, #44]	@ (8005110 <prvCheckForValidListAndQueue+0x7c>)
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fd2c 	bl	8003b40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050e8:	f000 f938 	bl	800535c <vPortExitCritical>
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	2000123c 	.word	0x2000123c
 80050f8:	2000120c 	.word	0x2000120c
 80050fc:	20001220 	.word	0x20001220
 8005100:	20001234 	.word	0x20001234
 8005104:	20001238 	.word	0x20001238
 8005108:	200012e8 	.word	0x200012e8
 800510c:	20001248 	.word	0x20001248
 8005110:	08005ae8 	.word	0x08005ae8

08005114 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3b04      	subs	r3, #4
 8005124:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800512c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3b04      	subs	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3b04      	subs	r3, #4
 8005142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005144:	4a08      	ldr	r2, [pc, #32]	@ (8005168 <pxPortInitialiseStack+0x54>)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b14      	subs	r3, #20
 800514e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3b20      	subs	r3, #32
 800515a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800515c:	68fb      	ldr	r3, [r7, #12]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr
 8005168:	0800516d 	.word	0x0800516d

0800516c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005176:	4b12      	ldr	r3, [pc, #72]	@ (80051c0 <prvTaskExitError+0x54>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d00b      	beq.n	8005198 <prvTaskExitError+0x2c>
	__asm volatile
 8005180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	60fb      	str	r3, [r7, #12]
}
 8005192:	bf00      	nop
 8005194:	bf00      	nop
 8005196:	e7fd      	b.n	8005194 <prvTaskExitError+0x28>
	__asm volatile
 8005198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519c:	f383 8811 	msr	BASEPRI, r3
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	f3bf 8f4f 	dsb	sy
 80051a8:	60bb      	str	r3, [r7, #8]
}
 80051aa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051ac:	bf00      	nop
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d0fc      	beq.n	80051ae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bc80      	pop	{r7}
 80051be:	4770      	bx	lr
 80051c0:	2000000c 	.word	0x2000000c
	...

080051d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051d0:	4b07      	ldr	r3, [pc, #28]	@ (80051f0 <pxCurrentTCBConst2>)
 80051d2:	6819      	ldr	r1, [r3, #0]
 80051d4:	6808      	ldr	r0, [r1, #0]
 80051d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051da:	f380 8809 	msr	PSP, r0
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f380 8811 	msr	BASEPRI, r0
 80051ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80051ee:	4770      	bx	lr

080051f0 <pxCurrentTCBConst2>:
 80051f0:	20000d0c 	.word	0x20000d0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop

080051f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80051f8:	4806      	ldr	r0, [pc, #24]	@ (8005214 <prvPortStartFirstTask+0x1c>)
 80051fa:	6800      	ldr	r0, [r0, #0]
 80051fc:	6800      	ldr	r0, [r0, #0]
 80051fe:	f380 8808 	msr	MSP, r0
 8005202:	b662      	cpsie	i
 8005204:	b661      	cpsie	f
 8005206:	f3bf 8f4f 	dsb	sy
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	df00      	svc	0
 8005210:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005212:	bf00      	nop
 8005214:	e000ed08 	.word	0xe000ed08

08005218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b084      	sub	sp, #16
 800521c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800521e:	4b32      	ldr	r3, [pc, #200]	@ (80052e8 <xPortStartScheduler+0xd0>)
 8005220:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b2db      	uxtb	r3, r3
 8005228:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	22ff      	movs	r2, #255	@ 0xff
 800522e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005238:	78fb      	ldrb	r3, [r7, #3]
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005240:	b2da      	uxtb	r2, r3
 8005242:	4b2a      	ldr	r3, [pc, #168]	@ (80052ec <xPortStartScheduler+0xd4>)
 8005244:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005246:	4b2a      	ldr	r3, [pc, #168]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005248:	2207      	movs	r2, #7
 800524a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800524c:	e009      	b.n	8005262 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800524e:	4b28      	ldr	r3, [pc, #160]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3b01      	subs	r3, #1
 8005254:	4a26      	ldr	r2, [pc, #152]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005256:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	b2db      	uxtb	r3, r3
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	b2db      	uxtb	r3, r3
 8005260:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005262:	78fb      	ldrb	r3, [r7, #3]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800526a:	2b80      	cmp	r3, #128	@ 0x80
 800526c:	d0ef      	beq.n	800524e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800526e:	4b20      	ldr	r3, [pc, #128]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f1c3 0307 	rsb	r3, r3, #7
 8005276:	2b04      	cmp	r3, #4
 8005278:	d00b      	beq.n	8005292 <xPortStartScheduler+0x7a>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	60bb      	str	r3, [r7, #8]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005292:	4b17      	ldr	r3, [pc, #92]	@ (80052f0 <xPortStartScheduler+0xd8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	4a15      	ldr	r2, [pc, #84]	@ (80052f0 <xPortStartScheduler+0xd8>)
 800529a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800529c:	4b14      	ldr	r3, [pc, #80]	@ (80052f0 <xPortStartScheduler+0xd8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052a4:	4a12      	ldr	r2, [pc, #72]	@ (80052f0 <xPortStartScheduler+0xd8>)
 80052a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80052b0:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a0f      	ldr	r2, [pc, #60]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80052bc:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <xPortStartScheduler+0xdc>)
 80052c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052c8:	f000 f8b8 	bl	800543c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052cc:	4b0a      	ldr	r3, [pc, #40]	@ (80052f8 <xPortStartScheduler+0xe0>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052d2:	f7ff ff91 	bl	80051f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052d6:	f7ff f867 	bl	80043a8 <vTaskSwitchContext>
	prvTaskExitError();
 80052da:	f7ff ff47 	bl	800516c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	e000e400 	.word	0xe000e400
 80052ec:	20001338 	.word	0x20001338
 80052f0:	2000133c 	.word	0x2000133c
 80052f4:	e000ed20 	.word	0xe000ed20
 80052f8:	2000000c 	.word	0x2000000c

080052fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	607b      	str	r3, [r7, #4]
}
 8005314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005316:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <vPortEnterCritical+0x58>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	4a0d      	ldr	r2, [pc, #52]	@ (8005354 <vPortEnterCritical+0x58>)
 800531e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005320:	4b0c      	ldr	r3, [pc, #48]	@ (8005354 <vPortEnterCritical+0x58>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d110      	bne.n	800534a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005328:	4b0b      	ldr	r3, [pc, #44]	@ (8005358 <vPortEnterCritical+0x5c>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <vPortEnterCritical+0x4e>
	__asm volatile
 8005332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	603b      	str	r3, [r7, #0]
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop
 8005348:	e7fd      	b.n	8005346 <vPortEnterCritical+0x4a>
	}
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	2000000c 	.word	0x2000000c
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <vPortExitCritical+0x50>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <vPortExitCritical+0x26>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	607b      	str	r3, [r7, #4]
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	e7fd      	b.n	800537e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <vPortExitCritical+0x50>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3b01      	subs	r3, #1
 8005388:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <vPortExitCritical+0x50>)
 800538a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <vPortExitCritical+0x50>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <vPortExitCritical+0x44>
 8005394:	2300      	movs	r3, #0
 8005396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	2000000c 	.word	0x2000000c

080053b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053b0:	f3ef 8009 	mrs	r0, PSP
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4b0d      	ldr	r3, [pc, #52]	@ (80053f0 <pxCurrentTCBConst>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053c0:	6010      	str	r0, [r2, #0]
 80053c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80053c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053ca:	f380 8811 	msr	BASEPRI, r0
 80053ce:	f7fe ffeb 	bl	80043a8 <vTaskSwitchContext>
 80053d2:	f04f 0000 	mov.w	r0, #0
 80053d6:	f380 8811 	msr	BASEPRI, r0
 80053da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80053e6:	f380 8809 	msr	PSP, r0
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	4770      	bx	lr

080053f0 <pxCurrentTCBConst>:
 80053f0:	20000d0c 	.word	0x20000d0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop

080053f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	607b      	str	r3, [r7, #4]
}
 8005410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005412:	f7fe ff0f 	bl	8004234 <xTaskIncrementTick>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800541c:	4b06      	ldr	r3, [pc, #24]	@ (8005438 <xPortSysTickHandler+0x40>)
 800541e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	2300      	movs	r3, #0
 8005426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	f383 8811 	msr	BASEPRI, r3
}
 800542e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005440:	4b0a      	ldr	r3, [pc, #40]	@ (800546c <vPortSetupTimerInterrupt+0x30>)
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005446:	4b0a      	ldr	r3, [pc, #40]	@ (8005470 <vPortSetupTimerInterrupt+0x34>)
 8005448:	2200      	movs	r2, #0
 800544a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <vPortSetupTimerInterrupt+0x38>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a09      	ldr	r2, [pc, #36]	@ (8005478 <vPortSetupTimerInterrupt+0x3c>)
 8005452:	fba2 2303 	umull	r2, r3, r2, r3
 8005456:	099b      	lsrs	r3, r3, #6
 8005458:	4a08      	ldr	r2, [pc, #32]	@ (800547c <vPortSetupTimerInterrupt+0x40>)
 800545a:	3b01      	subs	r3, #1
 800545c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800545e:	4b03      	ldr	r3, [pc, #12]	@ (800546c <vPortSetupTimerInterrupt+0x30>)
 8005460:	2207      	movs	r2, #7
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	46bd      	mov	sp, r7
 8005468:	bc80      	pop	{r7}
 800546a:	4770      	bx	lr
 800546c:	e000e010 	.word	0xe000e010
 8005470:	e000e018 	.word	0xe000e018
 8005474:	20000000 	.word	0x20000000
 8005478:	10624dd3 	.word	0x10624dd3
 800547c:	e000e014 	.word	0xe000e014

08005480 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005486:	f3ef 8305 	mrs	r3, IPSR
 800548a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b0f      	cmp	r3, #15
 8005490:	d915      	bls.n	80054be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005492:	4a17      	ldr	r2, [pc, #92]	@ (80054f0 <vPortValidateInterruptPriority+0x70>)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4413      	add	r3, r2
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800549c:	4b15      	ldr	r3, [pc, #84]	@ (80054f4 <vPortValidateInterruptPriority+0x74>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	7afa      	ldrb	r2, [r7, #11]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d20b      	bcs.n	80054be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	607b      	str	r3, [r7, #4]
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	e7fd      	b.n	80054ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054be:	4b0e      	ldr	r3, [pc, #56]	@ (80054f8 <vPortValidateInterruptPriority+0x78>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054c6:	4b0d      	ldr	r3, [pc, #52]	@ (80054fc <vPortValidateInterruptPriority+0x7c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d90b      	bls.n	80054e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <vPortValidateInterruptPriority+0x62>
	}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bc80      	pop	{r7}
 80054ee:	4770      	bx	lr
 80054f0:	e000e3f0 	.word	0xe000e3f0
 80054f4:	20001338 	.word	0x20001338
 80054f8:	e000ed0c 	.word	0xe000ed0c
 80054fc:	2000133c 	.word	0x2000133c

08005500 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	@ 0x28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800550c:	f7fe fdd8 	bl	80040c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005510:	4b5c      	ldr	r3, [pc, #368]	@ (8005684 <pvPortMalloc+0x184>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005518:	f000 f924 	bl	8005764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800551c:	4b5a      	ldr	r3, [pc, #360]	@ (8005688 <pvPortMalloc+0x188>)
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4013      	ands	r3, r2
 8005524:	2b00      	cmp	r3, #0
 8005526:	f040 8095 	bne.w	8005654 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01e      	beq.n	800556e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005530:	2208      	movs	r2, #8
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4413      	add	r3, r2
 8005536:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	2b00      	cmp	r3, #0
 8005540:	d015      	beq.n	800556e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f023 0307 	bic.w	r3, r3, #7
 8005548:	3308      	adds	r3, #8
 800554a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <pvPortMalloc+0x6e>
	__asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	617b      	str	r3, [r7, #20]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d06f      	beq.n	8005654 <pvPortMalloc+0x154>
 8005574:	4b45      	ldr	r3, [pc, #276]	@ (800568c <pvPortMalloc+0x18c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	429a      	cmp	r2, r3
 800557c:	d86a      	bhi.n	8005654 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800557e:	4b44      	ldr	r3, [pc, #272]	@ (8005690 <pvPortMalloc+0x190>)
 8005580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005582:	4b43      	ldr	r3, [pc, #268]	@ (8005690 <pvPortMalloc+0x190>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005588:	e004      	b.n	8005594 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <pvPortMalloc+0xa6>
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f1      	bne.n	800558a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055a6:	4b37      	ldr	r3, [pc, #220]	@ (8005684 <pvPortMalloc+0x184>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d051      	beq.n	8005654 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2208      	movs	r2, #8
 80055b6:	4413      	add	r3, r2
 80055b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	1ad2      	subs	r2, r2, r3
 80055ca:	2308      	movs	r3, #8
 80055cc:	005b      	lsls	r3, r3, #1
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d920      	bls.n	8005614 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4413      	add	r3, r2
 80055d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00b      	beq.n	80055fc <pvPortMalloc+0xfc>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	613b      	str	r3, [r7, #16]
}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	e7fd      	b.n	80055f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	1ad2      	subs	r2, r2, r3
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800560e:	69b8      	ldr	r0, [r7, #24]
 8005610:	f000 f90a 	bl	8005828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005614:	4b1d      	ldr	r3, [pc, #116]	@ (800568c <pvPortMalloc+0x18c>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	4a1b      	ldr	r2, [pc, #108]	@ (800568c <pvPortMalloc+0x18c>)
 8005620:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005622:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <pvPortMalloc+0x18c>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b1b      	ldr	r3, [pc, #108]	@ (8005694 <pvPortMalloc+0x194>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d203      	bcs.n	8005636 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800562e:	4b17      	ldr	r3, [pc, #92]	@ (800568c <pvPortMalloc+0x18c>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a18      	ldr	r2, [pc, #96]	@ (8005694 <pvPortMalloc+0x194>)
 8005634:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4b13      	ldr	r3, [pc, #76]	@ (8005688 <pvPortMalloc+0x188>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	431a      	orrs	r2, r3
 8005640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005642:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800564a:	4b13      	ldr	r3, [pc, #76]	@ (8005698 <pvPortMalloc+0x198>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a11      	ldr	r2, [pc, #68]	@ (8005698 <pvPortMalloc+0x198>)
 8005652:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005654:	f7fe fd42 	bl	80040dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f003 0307 	and.w	r3, r3, #7
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00b      	beq.n	800567a <pvPortMalloc+0x17a>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	60fb      	str	r3, [r7, #12]
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
 8005678:	e7fd      	b.n	8005676 <pvPortMalloc+0x176>
	return pvReturn;
 800567a:	69fb      	ldr	r3, [r7, #28]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3728      	adds	r7, #40	@ 0x28
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	20001f48 	.word	0x20001f48
 8005688:	20001f5c 	.word	0x20001f5c
 800568c:	20001f4c 	.word	0x20001f4c
 8005690:	20001f40 	.word	0x20001f40
 8005694:	20001f50 	.word	0x20001f50
 8005698:	20001f54 	.word	0x20001f54

0800569c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d04f      	beq.n	800574e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ae:	2308      	movs	r3, #8
 80056b0:	425b      	negs	r3, r3
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4413      	add	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	4b25      	ldr	r3, [pc, #148]	@ (8005758 <vPortFree+0xbc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10b      	bne.n	80056e2 <vPortFree+0x46>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60fb      	str	r3, [r7, #12]
}
 80056dc:	bf00      	nop
 80056de:	bf00      	nop
 80056e0:	e7fd      	b.n	80056de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <vPortFree+0x66>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60bb      	str	r3, [r7, #8]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <vPortFree+0xbc>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01e      	beq.n	800574e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d11a      	bne.n	800574e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b0e      	ldr	r3, [pc, #56]	@ (8005758 <vPortFree+0xbc>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005728:	f7fe fcca 	bl	80040c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	4b0a      	ldr	r3, [pc, #40]	@ (800575c <vPortFree+0xc0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4413      	add	r3, r2
 8005736:	4a09      	ldr	r2, [pc, #36]	@ (800575c <vPortFree+0xc0>)
 8005738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800573a:	6938      	ldr	r0, [r7, #16]
 800573c:	f000 f874 	bl	8005828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005740:	4b07      	ldr	r3, [pc, #28]	@ (8005760 <vPortFree+0xc4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3301      	adds	r3, #1
 8005746:	4a06      	ldr	r2, [pc, #24]	@ (8005760 <vPortFree+0xc4>)
 8005748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800574a:	f7fe fcc7 	bl	80040dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800574e:	bf00      	nop
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20001f5c 	.word	0x20001f5c
 800575c:	20001f4c 	.word	0x20001f4c
 8005760:	20001f58 	.word	0x20001f58

08005764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800576a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800576e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005770:	4b27      	ldr	r3, [pc, #156]	@ (8005810 <prvHeapInit+0xac>)
 8005772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f003 0307 	and.w	r3, r3, #7
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00c      	beq.n	8005798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	3307      	adds	r3, #7
 8005782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0307 	bic.w	r3, r3, #7
 800578a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	4a1f      	ldr	r2, [pc, #124]	@ (8005810 <prvHeapInit+0xac>)
 8005794:	4413      	add	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800579c:	4a1d      	ldr	r2, [pc, #116]	@ (8005814 <prvHeapInit+0xb0>)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057a2:	4b1c      	ldr	r3, [pc, #112]	@ (8005814 <prvHeapInit+0xb0>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4413      	add	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057b0:	2208      	movs	r2, #8
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0307 	bic.w	r3, r3, #7
 80057be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4a15      	ldr	r2, [pc, #84]	@ (8005818 <prvHeapInit+0xb4>)
 80057c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057c6:	4b14      	ldr	r3, [pc, #80]	@ (8005818 <prvHeapInit+0xb4>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2200      	movs	r2, #0
 80057cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057ce:	4b12      	ldr	r3, [pc, #72]	@ (8005818 <prvHeapInit+0xb4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	1ad2      	subs	r2, r2, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005818 <prvHeapInit+0xb4>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4a0a      	ldr	r2, [pc, #40]	@ (800581c <prvHeapInit+0xb8>)
 80057f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	4a09      	ldr	r2, [pc, #36]	@ (8005820 <prvHeapInit+0xbc>)
 80057fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057fc:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <prvHeapInit+0xc0>)
 80057fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005802:	601a      	str	r2, [r3, #0]
}
 8005804:	bf00      	nop
 8005806:	3714      	adds	r7, #20
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20001340 	.word	0x20001340
 8005814:	20001f40 	.word	0x20001f40
 8005818:	20001f48 	.word	0x20001f48
 800581c:	20001f50 	.word	0x20001f50
 8005820:	20001f4c 	.word	0x20001f4c
 8005824:	20001f5c 	.word	0x20001f5c

08005828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005830:	4b27      	ldr	r3, [pc, #156]	@ (80058d0 <prvInsertBlockIntoFreeList+0xa8>)
 8005832:	60fb      	str	r3, [r7, #12]
 8005834:	e002      	b.n	800583c <prvInsertBlockIntoFreeList+0x14>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	429a      	cmp	r2, r3
 8005844:	d8f7      	bhi.n	8005836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	4413      	add	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d108      	bne.n	800586a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	441a      	add	r2, r3
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	441a      	add	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d118      	bne.n	80058b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <prvInsertBlockIntoFreeList+0xac>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	429a      	cmp	r2, r3
 8005888:	d00d      	beq.n	80058a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	441a      	add	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	601a      	str	r2, [r3, #0]
 80058a4:	e008      	b.n	80058b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058a6:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <prvInsertBlockIntoFreeList+0xac>)
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	e003      	b.n	80058b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d002      	beq.n	80058c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058c6:	bf00      	nop
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr
 80058d0:	20001f40 	.word	0x20001f40
 80058d4:	20001f48 	.word	0x20001f48

080058d8 <memset>:
 80058d8:	4603      	mov	r3, r0
 80058da:	4402      	add	r2, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <_reclaim_reent>:
 80058e8:	4b2d      	ldr	r3, [pc, #180]	@ (80059a0 <_reclaim_reent+0xb8>)
 80058ea:	b570      	push	{r4, r5, r6, lr}
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4604      	mov	r4, r0
 80058f0:	4283      	cmp	r3, r0
 80058f2:	d053      	beq.n	800599c <_reclaim_reent+0xb4>
 80058f4:	69c3      	ldr	r3, [r0, #28]
 80058f6:	b31b      	cbz	r3, 8005940 <_reclaim_reent+0x58>
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	b163      	cbz	r3, 8005916 <_reclaim_reent+0x2e>
 80058fc:	2500      	movs	r5, #0
 80058fe:	69e3      	ldr	r3, [r4, #28]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	5959      	ldr	r1, [r3, r5]
 8005904:	b9b1      	cbnz	r1, 8005934 <_reclaim_reent+0x4c>
 8005906:	3504      	adds	r5, #4
 8005908:	2d80      	cmp	r5, #128	@ 0x80
 800590a:	d1f8      	bne.n	80058fe <_reclaim_reent+0x16>
 800590c:	69e3      	ldr	r3, [r4, #28]
 800590e:	4620      	mov	r0, r4
 8005910:	68d9      	ldr	r1, [r3, #12]
 8005912:	f000 f87b 	bl	8005a0c <_free_r>
 8005916:	69e3      	ldr	r3, [r4, #28]
 8005918:	6819      	ldr	r1, [r3, #0]
 800591a:	b111      	cbz	r1, 8005922 <_reclaim_reent+0x3a>
 800591c:	4620      	mov	r0, r4
 800591e:	f000 f875 	bl	8005a0c <_free_r>
 8005922:	69e3      	ldr	r3, [r4, #28]
 8005924:	689d      	ldr	r5, [r3, #8]
 8005926:	b15d      	cbz	r5, 8005940 <_reclaim_reent+0x58>
 8005928:	4629      	mov	r1, r5
 800592a:	4620      	mov	r0, r4
 800592c:	682d      	ldr	r5, [r5, #0]
 800592e:	f000 f86d 	bl	8005a0c <_free_r>
 8005932:	e7f8      	b.n	8005926 <_reclaim_reent+0x3e>
 8005934:	680e      	ldr	r6, [r1, #0]
 8005936:	4620      	mov	r0, r4
 8005938:	f000 f868 	bl	8005a0c <_free_r>
 800593c:	4631      	mov	r1, r6
 800593e:	e7e1      	b.n	8005904 <_reclaim_reent+0x1c>
 8005940:	6961      	ldr	r1, [r4, #20]
 8005942:	b111      	cbz	r1, 800594a <_reclaim_reent+0x62>
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f861 	bl	8005a0c <_free_r>
 800594a:	69e1      	ldr	r1, [r4, #28]
 800594c:	b111      	cbz	r1, 8005954 <_reclaim_reent+0x6c>
 800594e:	4620      	mov	r0, r4
 8005950:	f000 f85c 	bl	8005a0c <_free_r>
 8005954:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005956:	b111      	cbz	r1, 800595e <_reclaim_reent+0x76>
 8005958:	4620      	mov	r0, r4
 800595a:	f000 f857 	bl	8005a0c <_free_r>
 800595e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005960:	b111      	cbz	r1, 8005968 <_reclaim_reent+0x80>
 8005962:	4620      	mov	r0, r4
 8005964:	f000 f852 	bl	8005a0c <_free_r>
 8005968:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800596a:	b111      	cbz	r1, 8005972 <_reclaim_reent+0x8a>
 800596c:	4620      	mov	r0, r4
 800596e:	f000 f84d 	bl	8005a0c <_free_r>
 8005972:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005974:	b111      	cbz	r1, 800597c <_reclaim_reent+0x94>
 8005976:	4620      	mov	r0, r4
 8005978:	f000 f848 	bl	8005a0c <_free_r>
 800597c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800597e:	b111      	cbz	r1, 8005986 <_reclaim_reent+0x9e>
 8005980:	4620      	mov	r0, r4
 8005982:	f000 f843 	bl	8005a0c <_free_r>
 8005986:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005988:	b111      	cbz	r1, 8005990 <_reclaim_reent+0xa8>
 800598a:	4620      	mov	r0, r4
 800598c:	f000 f83e 	bl	8005a0c <_free_r>
 8005990:	6a23      	ldr	r3, [r4, #32]
 8005992:	b11b      	cbz	r3, 800599c <_reclaim_reent+0xb4>
 8005994:	4620      	mov	r0, r4
 8005996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800599a:	4718      	bx	r3
 800599c:	bd70      	pop	{r4, r5, r6, pc}
 800599e:	bf00      	nop
 80059a0:	20000010 	.word	0x20000010

080059a4 <__libc_init_array>:
 80059a4:	b570      	push	{r4, r5, r6, lr}
 80059a6:	2600      	movs	r6, #0
 80059a8:	4d0c      	ldr	r5, [pc, #48]	@ (80059dc <__libc_init_array+0x38>)
 80059aa:	4c0d      	ldr	r4, [pc, #52]	@ (80059e0 <__libc_init_array+0x3c>)
 80059ac:	1b64      	subs	r4, r4, r5
 80059ae:	10a4      	asrs	r4, r4, #2
 80059b0:	42a6      	cmp	r6, r4
 80059b2:	d109      	bne.n	80059c8 <__libc_init_array+0x24>
 80059b4:	f000 f87e 	bl	8005ab4 <_init>
 80059b8:	2600      	movs	r6, #0
 80059ba:	4d0a      	ldr	r5, [pc, #40]	@ (80059e4 <__libc_init_array+0x40>)
 80059bc:	4c0a      	ldr	r4, [pc, #40]	@ (80059e8 <__libc_init_array+0x44>)
 80059be:	1b64      	subs	r4, r4, r5
 80059c0:	10a4      	asrs	r4, r4, #2
 80059c2:	42a6      	cmp	r6, r4
 80059c4:	d105      	bne.n	80059d2 <__libc_init_array+0x2e>
 80059c6:	bd70      	pop	{r4, r5, r6, pc}
 80059c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059cc:	4798      	blx	r3
 80059ce:	3601      	adds	r6, #1
 80059d0:	e7ee      	b.n	80059b0 <__libc_init_array+0xc>
 80059d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d6:	4798      	blx	r3
 80059d8:	3601      	adds	r6, #1
 80059da:	e7f2      	b.n	80059c2 <__libc_init_array+0x1e>
 80059dc:	08005b40 	.word	0x08005b40
 80059e0:	08005b40 	.word	0x08005b40
 80059e4:	08005b40 	.word	0x08005b40
 80059e8:	08005b44 	.word	0x08005b44

080059ec <__retarget_lock_acquire_recursive>:
 80059ec:	4770      	bx	lr

080059ee <__retarget_lock_release_recursive>:
 80059ee:	4770      	bx	lr

080059f0 <memcpy>:
 80059f0:	440a      	add	r2, r1
 80059f2:	4291      	cmp	r1, r2
 80059f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	4770      	bx	lr
 80059fc:	b510      	push	{r4, lr}
 80059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a02:	4291      	cmp	r1, r2
 8005a04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a08:	d1f9      	bne.n	80059fe <memcpy+0xe>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <_free_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4605      	mov	r5, r0
 8005a10:	2900      	cmp	r1, #0
 8005a12:	d040      	beq.n	8005a96 <_free_r+0x8a>
 8005a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a18:	1f0c      	subs	r4, r1, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfb8      	it	lt
 8005a1e:	18e4      	addlt	r4, r4, r3
 8005a20:	f000 f83c 	bl	8005a9c <__malloc_lock>
 8005a24:	4a1c      	ldr	r2, [pc, #112]	@ (8005a98 <_free_r+0x8c>)
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	b933      	cbnz	r3, 8005a38 <_free_r+0x2c>
 8005a2a:	6063      	str	r3, [r4, #4]
 8005a2c:	6014      	str	r4, [r2, #0]
 8005a2e:	4628      	mov	r0, r5
 8005a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a34:	f000 b838 	b.w	8005aa8 <__malloc_unlock>
 8005a38:	42a3      	cmp	r3, r4
 8005a3a:	d908      	bls.n	8005a4e <_free_r+0x42>
 8005a3c:	6820      	ldr	r0, [r4, #0]
 8005a3e:	1821      	adds	r1, r4, r0
 8005a40:	428b      	cmp	r3, r1
 8005a42:	bf01      	itttt	eq
 8005a44:	6819      	ldreq	r1, [r3, #0]
 8005a46:	685b      	ldreq	r3, [r3, #4]
 8005a48:	1809      	addeq	r1, r1, r0
 8005a4a:	6021      	streq	r1, [r4, #0]
 8005a4c:	e7ed      	b.n	8005a2a <_free_r+0x1e>
 8005a4e:	461a      	mov	r2, r3
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	b10b      	cbz	r3, 8005a58 <_free_r+0x4c>
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	d9fa      	bls.n	8005a4e <_free_r+0x42>
 8005a58:	6811      	ldr	r1, [r2, #0]
 8005a5a:	1850      	adds	r0, r2, r1
 8005a5c:	42a0      	cmp	r0, r4
 8005a5e:	d10b      	bne.n	8005a78 <_free_r+0x6c>
 8005a60:	6820      	ldr	r0, [r4, #0]
 8005a62:	4401      	add	r1, r0
 8005a64:	1850      	adds	r0, r2, r1
 8005a66:	4283      	cmp	r3, r0
 8005a68:	6011      	str	r1, [r2, #0]
 8005a6a:	d1e0      	bne.n	8005a2e <_free_r+0x22>
 8005a6c:	6818      	ldr	r0, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4408      	add	r0, r1
 8005a72:	6010      	str	r0, [r2, #0]
 8005a74:	6053      	str	r3, [r2, #4]
 8005a76:	e7da      	b.n	8005a2e <_free_r+0x22>
 8005a78:	d902      	bls.n	8005a80 <_free_r+0x74>
 8005a7a:	230c      	movs	r3, #12
 8005a7c:	602b      	str	r3, [r5, #0]
 8005a7e:	e7d6      	b.n	8005a2e <_free_r+0x22>
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	1821      	adds	r1, r4, r0
 8005a84:	428b      	cmp	r3, r1
 8005a86:	bf01      	itttt	eq
 8005a88:	6819      	ldreq	r1, [r3, #0]
 8005a8a:	685b      	ldreq	r3, [r3, #4]
 8005a8c:	1809      	addeq	r1, r1, r0
 8005a8e:	6021      	streq	r1, [r4, #0]
 8005a90:	6063      	str	r3, [r4, #4]
 8005a92:	6054      	str	r4, [r2, #4]
 8005a94:	e7cb      	b.n	8005a2e <_free_r+0x22>
 8005a96:	bd38      	pop	{r3, r4, r5, pc}
 8005a98:	2000209c 	.word	0x2000209c

08005a9c <__malloc_lock>:
 8005a9c:	4801      	ldr	r0, [pc, #4]	@ (8005aa4 <__malloc_lock+0x8>)
 8005a9e:	f7ff bfa5 	b.w	80059ec <__retarget_lock_acquire_recursive>
 8005aa2:	bf00      	nop
 8005aa4:	20002098 	.word	0x20002098

08005aa8 <__malloc_unlock>:
 8005aa8:	4801      	ldr	r0, [pc, #4]	@ (8005ab0 <__malloc_unlock+0x8>)
 8005aaa:	f7ff bfa0 	b.w	80059ee <__retarget_lock_release_recursive>
 8005aae:	bf00      	nop
 8005ab0:	20002098 	.word	0x20002098

08005ab4 <_init>:
 8005ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab6:	bf00      	nop
 8005ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aba:	bc08      	pop	{r3}
 8005abc:	469e      	mov	lr, r3
 8005abe:	4770      	bx	lr

08005ac0 <_fini>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr
